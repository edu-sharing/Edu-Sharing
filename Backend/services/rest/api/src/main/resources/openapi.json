{
  "components": {
    "schemas": {
      "ACE": {
        "properties": {
          "authority": {
            "$ref": "#/components/schemas/Authority"
          },
          "editable": {
            "type": "boolean"
          },
          "from": {
            "format": "int64",
            "type": "integer"
          },
          "group": {
            "$ref": "#/components/schemas/GroupProfile"
          },
          "permissions": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "to": {
            "format": "int64",
            "type": "integer"
          },
          "user": {
            "$ref": "#/components/schemas/UserProfile"
          }
        },
        "required": [
          "authority",
          "permissions"
        ],
        "type": "object"
      },
      "ACL": {
        "properties": {
          "inherited": {
            "type": "boolean"
          },
          "permissions": {
            "items": {
              "$ref": "#/components/schemas/ACE"
            },
            "type": "array"
          }
        },
        "required": [
          "inherited",
          "permissions"
        ],
        "type": "object"
      },
      "About": {
        "properties": {
          "features": {
            "items": {
              "$ref": "#/components/schemas/FeatureInfo"
            },
            "type": "array"
          },
          "lastCacheUpdate": {
            "format": "int64",
            "type": "integer"
          },
          "plugins": {
            "items": {
              "$ref": "#/components/schemas/PluginInfo"
            },
            "type": "array"
          },
          "renderingService2": {
            "$ref": "#/components/schemas/RenderingService"
          },
          "services": {
            "items": {
              "$ref": "#/components/schemas/AboutService"
            },
            "type": "array"
          },
          "themesUrl": {
            "type": "string"
          },
          "version": {
            "$ref": "#/components/schemas/ServiceVersion"
          }
        },
        "required": [
          "services",
          "version"
        ],
        "type": "object"
      },
      "AboutService": {
        "properties": {
          "instances": {
            "items": {
              "$ref": "#/components/schemas/ServiceInstance"
            },
            "type": "array"
          },
          "name": {
            "type": "string"
          }
        },
        "required": [
          "instances",
          "name"
        ],
        "type": "object"
      },
      "AbstractEntries": {
        "properties": {
          "nodes": {
            "items": {
              "type": "object"
            },
            "type": "array"
          },
          "pagination": {
            "$ref": "#/components/schemas/Pagination"
          }
        },
        "required": [
          "nodes",
          "pagination"
        ],
        "type": "object"
      },
      "AddToCollectionEventDTO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/NotificationEventDTO"
          },
          {
            "properties": {
              "collection": {
                "$ref": "#/components/schemas/CollectionDTO"
              },
              "node": {
                "$ref": "#/components/schemas/NodeDataDTO"
              }
            },
            "type": "object"
          }
        ],
        "type": "object"
      },
      "Admin": {
        "properties": {
          "editorType": {
            "enum": [
              "Textarea",
              "Monaco"
            ],
            "type": "string"
          },
          "statistics": {
            "$ref": "#/components/schemas/Statistics"
          }
        },
        "type": "object"
      },
      "AdminStatistics": {
        "properties": {
          "activeLocks": {
            "items": {
              "$ref": "#/components/schemas/Node"
            },
            "type": "array"
          },
          "activeSessions": {
            "format": "int32",
            "type": "integer"
          },
          "allocatedMemory": {
            "format": "int64",
            "type": "integer"
          },
          "maxMemory": {
            "format": "int64",
            "type": "integer"
          },
          "numberOfPreviews": {
            "format": "int32",
            "type": "integer"
          },
          "previewCacheSize": {
            "format": "int64",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "Application": {
        "properties": {
          "clientBaseUrl": {
            "type": "string"
          },
          "configUrl": {
            "type": "string"
          },
          "contentUrl": {
            "type": "string"
          },
          "file": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "repositoryType": {
            "type": "string"
          },
          "subtype": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "webserverUrl": {
            "type": "string"
          },
          "xml": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "Audience": {
        "properties": {
          "name": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "AuthenticationToken": {
        "properties": {
          "ticket": {
            "type": "string"
          },
          "userId": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "Authority": {
        "properties": {
          "authorityName": {
            "type": "string"
          },
          "authorityType": {
            "enum": [
              "USER",
              "GROUP",
              "OWNER",
              "EVERYONE",
              "GUEST"
            ],
            "type": "string"
          },
          "editable": {
            "type": "boolean"
          },
          "properties": {
            "additionalProperties": {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "type": "object"
          }
        },
        "required": [
          "authorityName"
        ],
        "type": "object"
      },
      "AuthorityEntries": {
        "properties": {
          "authorities": {
            "items": {
              "$ref": "#/components/schemas/Authority"
            },
            "type": "array"
          },
          "pagination": {
            "$ref": "#/components/schemas/Pagination"
          }
        },
        "required": [
          "authorities",
          "pagination"
        ],
        "type": "object"
      },
      "AvailableMds": {
        "properties": {
          "mds": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "repository": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "Banner": {
        "properties": {
          "components": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "href": {
            "type": "string"
          },
          "url": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "BulkRun": {
        "properties": {
          "node": {
            "$ref": "#/components/schemas/Node"
          },
          "state": {
            "enum": [
              "New",
              "Published"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "CacheCluster": {
        "properties": {
          "availableProcessors": {
            "format": "int32",
            "type": "integer"
          },
          "cacheInfos": {
            "items": {
              "$ref": "#/components/schemas/CacheInfo"
            },
            "type": "array"
          },
          "freeMemory": {
            "format": "int64",
            "type": "integer"
          },
          "groupName": {
            "type": "string"
          },
          "instances": {
            "items": {
              "$ref": "#/components/schemas/CacheMember"
            },
            "type": "array"
          },
          "localMember": {
            "type": "string"
          },
          "maxMemory": {
            "format": "int64",
            "type": "integer"
          },
          "timeStamp": {
            "format": "date-time",
            "type": "string"
          },
          "totalMemory": {
            "format": "int64",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "CacheInfo": {
        "properties": {
          "backupCount": {
            "format": "int32",
            "type": "integer"
          },
          "backupEntryCount": {
            "format": "int64",
            "type": "integer"
          },
          "backupEntryMemoryCost": {
            "format": "int64",
            "type": "integer"
          },
          "getOwnedEntryMemoryCost": {
            "format": "int64",
            "type": "integer"
          },
          "groupName": {
            "type": "string"
          },
          "heapCost": {
            "format": "int64",
            "type": "integer"
          },
          "maxSize": {
            "format": "int32",
            "type": "integer"
          },
          "member": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "ownedEntryCount": {
            "format": "int64",
            "type": "integer"
          },
          "size": {
            "format": "int32",
            "type": "integer"
          },
          "sizeInMemory": {
            "format": "int64",
            "type": "integer"
          },
          "statisticHits": {
            "format": "int64",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "CacheMember": {
        "properties": {
          "name": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "Catalog": {
        "properties": {
          "name": {
            "type": "string"
          },
          "url": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "Collection": {
        "properties": {
          "authorFreetext": {
            "type": "string"
          },
          "childCollectionsCount": {
            "format": "int32",
            "type": "integer"
          },
          "childReferencesCount": {
            "format": "int32",
            "type": "integer"
          },
          "color": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "fromUser": {
            "description": "false",
            "type": "boolean"
          },
          "level0": {
            "description": "false",
            "type": "boolean"
          },
          "orderAscending": {
            "type": "boolean"
          },
          "orderMode": {
            "type": "string"
          },
          "pinned": {
            "type": "boolean"
          },
          "scope": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "viewtype": {
            "type": "string"
          },
          "x": {
            "format": "int32",
            "type": "integer"
          },
          "y": {
            "format": "int32",
            "type": "integer"
          },
          "z": {
            "format": "int32",
            "type": "integer"
          }
        },
        "required": [
          "fromUser",
          "level0",
          "title",
          "type",
          "viewtype"
        ],
        "type": "object"
      },
      "CollectionCounts": {
        "properties": {
          "collections": {
            "items": {
              "$ref": "#/components/schemas/Element"
            },
            "type": "array"
          },
          "refs": {
            "items": {
              "$ref": "#/components/schemas/Element"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "CollectionDTO": {
        "properties": {
          "aspects": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "properties": {
            "additionalProperties": {
              "type": "object"
            },
            "type": "object"
          },
          "type": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "CollectionEntries": {
        "properties": {
          "collections": {
            "items": {
              "$ref": "#/components/schemas/Node"
            },
            "type": "array"
          },
          "pagination": {
            "$ref": "#/components/schemas/Pagination"
          }
        },
        "required": [
          "collections"
        ],
        "type": "object"
      },
      "CollectionEntry": {
        "properties": {
          "collection": {
            "$ref": "#/components/schemas/Node"
          }
        },
        "required": [
          "collection"
        ],
        "type": "object"
      },
      "CollectionOptions": {
        "properties": {
          "privateCollections": {
            "enum": [
              "none",
              "assign",
              "delete"
            ],
            "type": "string"
          },
          "publicCollections": {
            "enum": [
              "none",
              "assign",
              "delete"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "CollectionProposalEntries": {
        "properties": {
          "collections": {
            "items": {
              "$ref": "#/components/schemas/NodeCollectionProposalCount"
            },
            "type": "array"
          },
          "pagination": {
            "$ref": "#/components/schemas/Pagination"
          }
        },
        "required": [
          "collections"
        ],
        "type": "object"
      },
      "CollectionReference": {
        "properties": {
          "access": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "accessEffective": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "accessOriginal": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "aspects": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "collection": {
            "$ref": "#/components/schemas/Collection"
          },
          "commentCount": {
            "format": "int32",
            "type": "integer"
          },
          "content": {
            "$ref": "#/components/schemas/Content"
          },
          "contributors": {
            "items": {
              "$ref": "#/components/schemas/Contributor"
            },
            "type": "array"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string"
          },
          "createdBy": {
            "$ref": "#/components/schemas/Person"
          },
          "downloadUrl": {
            "type": "string"
          },
          "iconURL": {
            "type": "string"
          },
          "isDirectory": {
            "type": "boolean"
          },
          "isPublic": {
            "type": "boolean"
          },
          "license": {
            "$ref": "#/components/schemas/License"
          },
          "mediatype": {
            "type": "string"
          },
          "metadataset": {
            "type": "string"
          },
          "mimetype": {
            "type": "string"
          },
          "modifiedAt": {
            "format": "date-time",
            "type": "string"
          },
          "modifiedBy": {
            "$ref": "#/components/schemas/Person"
          },
          "name": {
            "type": "string"
          },
          "nodeLTIDeepLink": {
            "$ref": "#/components/schemas/NodeLTIDeepLink"
          },
          "originalId": {
            "type": "string"
          },
          "originalRestrictedAccess": {
            "type": "boolean"
          },
          "owner": {
            "$ref": "#/components/schemas/Person"
          },
          "parent": {
            "$ref": "#/components/schemas/NodeRef"
          },
          "preview": {
            "$ref": "#/components/schemas/Preview"
          },
          "properties": {
            "additionalProperties": {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "type": "object"
          },
          "rating": {
            "$ref": "#/components/schemas/RatingDetails"
          },
          "ref": {
            "$ref": "#/components/schemas/NodeRef"
          },
          "relations": {
            "additionalProperties": {
              "$ref": "#/components/schemas/Node"
            },
            "type": "object"
          },
          "remote": {
            "$ref": "#/components/schemas/Remote"
          },
          "repositoryType": {
            "type": "string"
          },
          "size": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "usedInCollections": {
            "items": {
              "$ref": "#/components/schemas/Node"
            },
            "type": "array"
          }
        },
        "required": [
          "access",
          "collection",
          "createdAt",
          "createdBy",
          "downloadUrl",
          "name",
          "owner",
          "ref"
        ],
        "type": "object"
      },
      "Collections": {
        "properties": {
          "colors": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "CollectionsResult": {
        "properties": {
          "count": {
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "Comment": {
        "properties": {
          "comment": {
            "type": "string"
          },
          "created": {
            "format": "int64",
            "type": "integer"
          },
          "creator": {
            "$ref": "#/components/schemas/UserSimple"
          },
          "ref": {
            "$ref": "#/components/schemas/NodeRef"
          },
          "replyTo": {
            "$ref": "#/components/schemas/NodeRef"
          }
        },
        "type": "object"
      },
      "CommentEventDTO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/NotificationEventDTO"
          },
          {
            "properties": {
              "commentContent": {
                "type": "string"
              },
              "commentReference": {
                "type": "string"
              },
              "event": {
                "type": "string"
              },
              "node": {
                "$ref": "#/components/schemas/NodeDataDTO"
              }
            },
            "type": "object"
          }
        ],
        "type": "object"
      },
      "Comments": {
        "properties": {
          "comments": {
            "items": {
              "$ref": "#/components/schemas/Comment"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "Condition": {
        "properties": {
          "negate": {
            "type": "boolean"
          },
          "type": {
            "enum": [
              "TOOLPERMISSION"
            ],
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "Config": {
        "properties": {
          "contextId": {
            "type": "string"
          },
          "current": {
            "$ref": "#/components/schemas/Values"
          },
          "global": {
            "$ref": "#/components/schemas/Values"
          },
          "language": {
            "$ref": "#/components/schemas/Language"
          }
        },
        "type": "object"
      },
      "ConfigFrontpage": {
        "properties": {
          "enabled": {
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "ConfigPrivacy": {
        "properties": {
          "cookieDisclaimer": {
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "ConfigPublish": {
        "properties": {
          "authorMandatory": {
            "type": "boolean"
          },
          "licenseMandatory": {
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "ConfigRating": {
        "properties": {
          "mode": {
            "enum": [
              "none",
              "likes",
              "stars"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "ConfigRemote": {
        "properties": {
          "rocketchat": {
            "$ref": "#/components/schemas/ConfigRemoteRocketchat"
          }
        },
        "type": "object"
      },
      "ConfigRemoteRocketchat": {
        "type": "object"
      },
      "ConfigReportProblem": {
        "properties": {
          "toolPermissions": {
            "items": {
              "type": "string",
              "xml": {
                "name": "toolPermission"
              }
            },
            "type": "array",
            "xml": {
              "name": "toolPermission"
            }
          }
        },
        "type": "object"
      },
      "ConfigThemeColor": {
        "properties": {
          "value": {
            "type": "string"
          },
          "variable": {
            "type": "string",
            "xml": {
              "attribute": true
            }
          }
        },
        "type": "object"
      },
      "ConfigThemeColors": {
        "properties": {
          "color": {
            "items": {
              "$ref": "#/components/schemas/ConfigThemeColor"
            },
            "type": "array"
          },
          "colorSafe": {
            "items": {
              "$ref": "#/components/schemas/ConfigThemeColor"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "ConfigTutorial": {
        "properties": {
          "enabled": {
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "ConfigUpload": {
        "properties": {
          "postDialog": {
            "enum": [
              "SimpleEdit",
              "Mds"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "ConfigWorkflow": {
        "properties": {
          "commentRequired": {
            "type": "boolean"
          },
          "defaultReceiver": {
            "type": "string"
          },
          "defaultStatus": {
            "type": "string"
          },
          "workflows": {
            "items": {
              "$ref": "#/components/schemas/ConfigWorkflowList"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "ConfigWorkflowList": {
        "properties": {
          "color": {
            "type": "string"
          },
          "hasReceiver": {
            "type": "boolean"
          },
          "id": {
            "type": "string"
          },
          "next": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "Connector": {
        "properties": {
          "filetypes": {
            "items": {
              "$ref": "#/components/schemas/ConnectorFileType"
            },
            "type": "array"
          },
          "hasViewMode": {
            "type": "boolean"
          },
          "icon": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "mdsGroup": {
            "type": "string"
          },
          "onlyDesktop": {
            "type": "boolean"
          },
          "parameters": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "showNew": {
            "description": "false",
            "type": "boolean"
          }
        },
        "required": [
          "showNew"
        ],
        "type": "object"
      },
      "ConnectorFileType": {
        "properties": {
          "ccresourcesubtype": {
            "type": "string"
          },
          "ccressourcetype": {
            "type": "string"
          },
          "ccressourceversion": {
            "type": "string"
          },
          "creatable": {
            "type": "boolean"
          },
          "editable": {
            "type": "boolean"
          },
          "editorType": {
            "type": "string"
          },
          "filetype": {
            "type": "string"
          },
          "mimetype": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "ConnectorList": {
        "properties": {
          "connectors": {
            "items": {
              "$ref": "#/components/schemas/Connector"
            },
            "type": "array"
          },
          "simpleConnectors": {
            "items": {
              "$ref": "#/components/schemas/Connector"
            },
            "type": "array"
          },
          "url": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "Content": {
        "properties": {
          "hash": {
            "type": "string"
          },
          "url": {
            "type": "string"
          },
          "version": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "Context": {
        "properties": {
          "domain": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "id": {
            "type": "string"
          },
          "language": {
            "items": {
              "$ref": "#/components/schemas/Language"
            },
            "type": "array"
          },
          "values": {
            "$ref": "#/components/schemas/Values"
          },
          "variables": {
            "$ref": "#/components/schemas/Variables"
          }
        },
        "type": "object"
      },
      "ContextMenuEntry": {
        "properties": {
          "ajax": {
            "type": "boolean"
          },
          "changeStrategy": {
            "enum": [
              "update",
              "remove"
            ],
            "type": "string"
          },
          "group": {
            "type": "string"
          },
          "icon": {
            "type": "string"
          },
          "isDirectory": {
            "type": "boolean"
          },
          "isDisabled": {
            "type": "boolean"
          },
          "isSeparate": {
            "type": "boolean"
          },
          "isSeparateBottom": {
            "type": "boolean"
          },
          "mode": {
            "type": "string"
          },
          "multiple": {
            "type": "boolean"
          },
          "name": {
            "type": "string"
          },
          "onlyDesktop": {
            "type": "boolean"
          },
          "onlyWeb": {
            "type": "boolean"
          },
          "openInNew": {
            "type": "boolean"
          },
          "permission": {
            "type": "string"
          },
          "position": {
            "format": "int32",
            "type": "integer"
          },
          "scopes": {
            "items": {
              "enum": [
                "Render",
                "Search",
                "CollectionsReferences",
                "CollectionsCollection",
                "WorkspaceList",
                "WorkspaceTree",
                "Oer",
                "CreateMenu"
              ],
              "type": "string"
            },
            "type": "array"
          },
          "showAsAction": {
            "type": "boolean"
          },
          "toolpermission": {
            "type": "string"
          },
          "url": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "Contributor": {
        "properties": {
          "email": {
            "type": "string"
          },
          "firstname": {
            "type": "string"
          },
          "lastname": {
            "type": "string"
          },
          "org": {
            "type": "string"
          },
          "property": {
            "type": "string"
          },
          "vcard": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "Counts": {
        "properties": {
          "elements": {
            "items": {
              "$ref": "#/components/schemas/Element"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "Create": {
        "properties": {
          "onlyMetadata": {
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "CreateSuggestionRequestDTO": {
        "properties": {
          "confidence": {
            "format": "double",
            "type": "number"
          },
          "description": {
            "type": "string"
          },
          "propertyId": {
            "type": "string"
          },
          "value": {
            "type": "object"
          }
        },
        "type": "object"
      },
      "CreateUsage": {
        "properties": {
          "appId": {
            "type": "string"
          },
          "courseId": {
            "type": "string"
          },
          "nodeId": {
            "type": "string"
          },
          "nodeVersion": {
            "type": "string"
          },
          "resourceId": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "DeleteOption": {
        "properties": {
          "delete": {
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "DynamicConfig": {
        "properties": {
          "nodeId": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "DynamicRegistrationToken": {
        "properties": {
          "registeredAppId": {
            "type": "string"
          },
          "token": {
            "type": "string"
          },
          "tsCreated": {
            "format": "int64",
            "type": "integer"
          },
          "tsExpiry": {
            "format": "int64",
            "type": "integer"
          },
          "url": {
            "type": "string"
          },
          "valid": {
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "DynamicRegistrationTokens": {
        "properties": {
          "registrationLinks": {
            "items": {
              "$ref": "#/components/schemas/DynamicRegistrationToken"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "Element": {
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "type": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "ErrorResponse": {
        "properties": {
          "details": {
            "additionalProperties": {
              "type": "object"
            },
            "type": "object"
          },
          "error": {
            "type": "string"
          },
          "logLevel": {
            "type": "string"
          },
          "message": {
            "type": "string"
          },
          "stacktrace": {
            "type": "string",
            "writeOnly": true
          },
          "stacktraceArray": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "error",
          "message",
          "stacktraceArray"
        ],
        "type": "object"
      },
      "ExcelResult": {
        "properties": {
          "rows": {
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "Facet": {
        "properties": {
          "property": {
            "type": "string"
          },
          "sumOtherDocCount": {
            "format": "int64",
            "type": "integer"
          },
          "values": {
            "items": {
              "$ref": "#/components/schemas/Value"
            },
            "type": "array"
          }
        },
        "required": [
          "property",
          "values"
        ],
        "type": "object"
      },
      "FeatureInfo": {
        "properties": {
          "id": {
            "enum": [
              "handleService",
              "doiService"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "FeedbackData": {
        "properties": {
          "authority": {
            "type": "string"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string"
          },
          "data": {
            "additionalProperties": {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "type": "object"
          },
          "modifiedAt": {
            "format": "date-time",
            "type": "string"
          }
        },
        "type": "object"
      },
      "FeedbackResult": {
        "properties": {
          "nodeId": {
            "type": "string"
          },
          "wasUpdated": {
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "Filter": {
        "properties": {
          "entries": {
            "items": {
              "$ref": "#/components/schemas/FilterEntry"
            },
            "type": "array"
          }
        },
        "required": [
          "entries"
        ],
        "type": "object"
      },
      "FilterEntry": {
        "properties": {
          "property": {
            "type": "string"
          },
          "values": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "property",
          "values"
        ],
        "type": "object"
      },
      "FontIcon": {
        "properties": {
          "cssClass": {
            "type": "string"
          },
          "original": {
            "type": "string"
          },
          "replace": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "Frontpage": {
        "properties": {
          "collection": {
            "type": "string"
          },
          "displayCount": {
            "format": "int32",
            "type": "integer"
          },
          "mode": {
            "enum": [
              "collection",
              "rating",
              "views",
              "downloads"
            ],
            "type": "string"
          },
          "queries": {
            "items": {
              "$ref": "#/components/schemas/Query"
            },
            "type": "array"
          },
          "timespan": {
            "format": "int32",
            "type": "integer"
          },
          "timespanAll": {
            "type": "boolean"
          },
          "totalCount": {
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "General": {
        "properties": {
          "referencedInInstance": {
            "type": "string"
          },
          "referencedInName": {
            "type": "string"
          },
          "referencedInType": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "Geo": {
        "properties": {
          "addressCountry": {
            "type": "string"
          },
          "latitude": {
            "format": "double",
            "type": "number"
          },
          "longitude": {
            "format": "double",
            "type": "number"
          }
        },
        "type": "object"
      },
      "Group": {
        "properties": {
          "aspects": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "authorityName": {
            "type": "string"
          },
          "authorityType": {
            "enum": [
              "USER",
              "GROUP",
              "OWNER",
              "EVERYONE",
              "GUEST"
            ],
            "type": "string"
          },
          "editable": {
            "type": "boolean"
          },
          "groupName": {
            "type": "string"
          },
          "organizations": {
            "items": {
              "$ref": "#/components/schemas/Organization"
            },
            "type": "array"
          },
          "profile": {
            "$ref": "#/components/schemas/GroupProfile"
          },
          "properties": {
            "additionalProperties": {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "type": "object"
          },
          "ref": {
            "$ref": "#/components/schemas/NodeRef"
          },
          "signupMethod": {
            "enum": [
              "simple",
              "password",
              "list"
            ],
            "type": "string"
          }
        },
        "required": [
          "authorityName"
        ],
        "type": "object"
      },
      "GroupEntries": {
        "properties": {
          "groups": {
            "items": {
              "$ref": "#/components/schemas/Group"
            },
            "type": "array"
          },
          "pagination": {
            "$ref": "#/components/schemas/Pagination"
          }
        },
        "required": [
          "groups",
          "pagination"
        ],
        "type": "object"
      },
      "GroupEntry": {
        "properties": {
          "group": {
            "$ref": "#/components/schemas/Group"
          }
        },
        "required": [
          "group"
        ],
        "type": "object"
      },
      "GroupProfile": {
        "properties": {
          "customAttributes": {
            "additionalProperties": {
              "type": "object"
            },
            "type": "object"
          },
          "displayName": {
            "type": "string"
          },
          "groupEmail": {
            "type": "string"
          },
          "groupType": {
            "type": "string"
          },
          "scopeType": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "GroupSignupDetails": {
        "properties": {
          "signupMethod": {
            "enum": [
              "simple",
              "password",
              "list"
            ],
            "type": "string"
          },
          "signupPassword": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "HandleParam": {
        "properties": {
          "doiService": {
            "enum": [
              "distinct",
              "update"
            ],
            "type": "string"
          },
          "handleService": {
            "enum": [
              "distinct",
              "update"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "HelpMenuOptions": {
        "properties": {
          "icon": {
            "type": "string"
          },
          "key": {
            "type": "string"
          },
          "url": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "HomeFolderOptions": {
        "properties": {
          "ccFiles": {
            "enum": [
              "none",
              "assign",
              "delete"
            ],
            "type": "string"
          },
          "folders": {
            "enum": [
              "none",
              "assign",
              "delete"
            ],
            "type": "string"
          },
          "keepFolderStructure": {
            "type": "boolean"
          },
          "privateFiles": {
            "enum": [
              "none",
              "assign",
              "delete"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "Icon": {
        "properties": {
          "url": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "Image": {
        "properties": {
          "replace": {
            "type": "string"
          },
          "src": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "Interface": {
        "properties": {
          "documentation": {
            "type": "string"
          },
          "format": {
            "enum": [
              "Json",
              "XML",
              "Text"
            ],
            "type": "string"
          },
          "metadataPrefix": {
            "type": "string"
          },
          "set": {
            "type": "string"
          },
          "type": {
            "enum": [
              "Search",
              "Sitemap",
              "Statistics",
              "OAI",
              "Generic_Api"
            ],
            "type": "string"
          },
          "url": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "InviteEventDTO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/NotificationEventDTO"
          },
          {
            "properties": {
              "name": {
                "type": "string"
              },
              "node": {
                "$ref": "#/components/schemas/NodeDataDTO"
              },
              "permissions": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "type": {
                "type": "string"
              },
              "userComment": {
                "type": "string"
              }
            },
            "type": "object"
          }
        ],
        "type": "object"
      },
      "JSONObject": {
        "properties": {
          "empty": {
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "Job": {
        "properties": {
          "id": {
            "type": "string"
          },
          "status": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "status"
        ],
        "type": "object"
      },
      "JobBuilder": {
        "properties": {
          "jobData": {
            "$ref": "#/components/schemas/JobBuilder"
          }
        },
        "type": "object"
      },
      "JobDataMap": {
        "additionalProperties": {
          "type": "object"
        },
        "properties": {
          "allowsTransientData": {
            "type": "boolean"
          },
          "dirty": {
            "type": "boolean"
          },
          "empty": {
            "type": "boolean"
          },
          "keys": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "wrappedMap": {
            "additionalProperties": {
              "type": "object"
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "JobDescription": {
        "properties": {
          "description": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "params": {
            "items": {
              "$ref": "#/components/schemas/JobFieldDescription"
            },
            "type": "array"
          },
          "tags": {
            "items": {
              "enum": [
                "DeletePersonJob"
              ],
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "JobDetail": {
        "properties": {
          "concurrentExectionDisallowed": {
            "type": "boolean"
          },
          "description": {
            "type": "string"
          },
          "durable": {
            "type": "boolean"
          },
          "jobBuilder": {
            "$ref": "#/components/schemas/JobBuilder"
          },
          "jobDataMap": {
            "additionalProperties": {
              "type": "object"
            },
            "properties": {
              "allowsTransientData": {
                "type": "boolean"
              },
              "dirty": {
                "type": "boolean"
              },
              "empty": {
                "type": "boolean"
              },
              "keys": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "wrappedMap": {
                "additionalProperties": {
                  "type": "object"
                },
                "type": "object"
              }
            },
            "type": "object"
          },
          "key": {
            "$ref": "#/components/schemas/JobKey"
          },
          "persistJobDataAfterExecution": {
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "JobEntry": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/Job"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "JobFieldDescription": {
        "properties": {
          "array": {
            "type": "boolean"
          },
          "description": {
            "type": "string"
          },
          "file": {
            "type": "boolean"
          },
          "isArray": {
            "type": "boolean",
            "writeOnly": true
          },
          "name": {
            "type": "string"
          },
          "sampleValue": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "JobInfo": {
        "properties": {
          "finishTime": {
            "format": "int64",
            "type": "integer"
          },
          "jobDataMap": {
            "additionalProperties": {
              "type": "object"
            },
            "properties": {
              "allowsTransientData": {
                "type": "boolean"
              },
              "dirty": {
                "type": "boolean"
              },
              "empty": {
                "type": "boolean"
              },
              "keys": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "wrappedMap": {
                "additionalProperties": {
                  "type": "object"
                },
                "type": "object"
              }
            },
            "type": "object"
          },
          "jobDetail": {
            "$ref": "#/components/schemas/JobDetail"
          },
          "jobGroup": {
            "type": "string"
          },
          "jobName": {
            "type": "string"
          },
          "log": {
            "items": {
              "$ref": "#/components/schemas/LogEntry"
            },
            "type": "array"
          },
          "startTime": {
            "format": "int64",
            "type": "integer"
          },
          "status": {
            "enum": [
              "Running",
              "Failed",
              "Aborted",
              "Finished"
            ],
            "type": "string"
          },
          "threadId": {
            "format": "int64",
            "type": "integer"
          },
          "worstLevel": {
            "$ref": "#/components/schemas/Level"
          }
        },
        "type": "object"
      },
      "JobKey": {
        "properties": {
          "group": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "KeyValuePair": {
        "properties": {
          "key": {
            "type": "string",
            "xml": {
              "attribute": true
            }
          },
          "value": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "LTIPlatformConfiguration": {
        "properties": {
          "messages_supported": {
            "items": {
              "$ref": "#/components/schemas/Message"
            },
            "type": "array"
          },
          "product_family_code": {
            "type": "string"
          },
          "variables": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "version": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "LTISession": {
        "properties": {
          "acceptMultiple": {
            "type": "boolean"
          },
          "acceptPresentationDocumentTargets": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "acceptTypes": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "canConfirm": {
            "type": "boolean"
          },
          "customContentNode": {
            "$ref": "#/components/schemas/Node"
          },
          "deeplinkReturnUrl": {
            "type": "string"
          },
          "text": {
            "type": "string"
          },
          "title": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "LTIToolConfiguration": {
        "properties": {
          "claims": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "deployment_id": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "domain": {
            "type": "string"
          },
          "target_link_uri": {
            "type": "string"
          },
          "version": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "Language": {
        "properties": {
          "current": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object"
          },
          "currentLanguage": {
            "type": "string"
          },
          "global": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "Level": {
        "properties": {
          "syslogEquivalent": {
            "format": "int32",
            "type": "integer"
          },
          "version2Level": {
            "$ref": "#/components/schemas/Level"
          }
        },
        "type": "object"
      },
      "License": {
        "properties": {
          "icon": {
            "type": "string"
          },
          "url": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "LicenseAgreement": {
        "properties": {
          "nodeId": {
            "items": {
              "$ref": "#/components/schemas/LicenseAgreementNode"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "LicenseAgreementNode": {
        "properties": {
          "language": {
            "type": "string",
            "xml": {
              "attribute": true
            }
          },
          "value": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "Licenses": {
        "properties": {
          "repository": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object"
          },
          "services": {
            "additionalProperties": {
              "additionalProperties": {
                "type": "string"
              },
              "type": "object"
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "Location": {
        "properties": {
          "geo": {
            "$ref": "#/components/schemas/Geo"
          }
        },
        "type": "object"
      },
      "LogEntry": {
        "properties": {
          "className": {
            "type": "string"
          },
          "date": {
            "format": "int64",
            "type": "integer"
          },
          "level": {
            "$ref": "#/components/schemas/Level"
          },
          "message": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "LoggerConfigResult": {
        "properties": {
          "appender": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "config": {
            "type": "boolean"
          },
          "level": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "Login": {
        "properties": {
          "authorityName": {
            "type": "string"
          },
          "currentScope": {
            "type": "string"
          },
          "isAdmin": {
            "type": "boolean"
          },
          "isGuest": {
            "type": "boolean"
          },
          "isValidLogin": {
            "type": "boolean"
          },
          "ltiSession": {
            "$ref": "#/components/schemas/LTISession"
          },
          "remoteAuthentications": {
            "additionalProperties": {
              "$ref": "#/components/schemas/RemoteAuthDescription"
            },
            "type": "object"
          },
          "sessionTimeout": {
            "format": "int32",
            "type": "integer"
          },
          "statusCode": {
            "type": "string"
          },
          "toolPermissions": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "userHome": {
            "type": "string"
          }
        },
        "required": [
          "currentScope",
          "isAdmin",
          "isGuest",
          "isValidLogin",
          "sessionTimeout"
        ],
        "type": "object"
      },
      "LoginCredentials": {
        "properties": {
          "password": {
            "type": "string"
          },
          "scope": {
            "type": "string"
          },
          "userName": {
            "type": "string"
          }
        },
        "required": [
          "password",
          "scope",
          "userName"
        ],
        "type": "object"
      },
      "LogoutInfo": {
        "properties": {
          "ajax": {
            "type": "boolean"
          },
          "destroySession": {
            "type": "boolean"
          },
          "localUrl": {
            "type": "string"
          },
          "next": {
            "type": "string"
          },
          "ssoUrl": {
            "type": "string"
          },
          "url": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "Mainnav": {
        "properties": {
          "icon": {
            "$ref": "#/components/schemas/Icon"
          },
          "mainMenuStyle": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "ManualRegistrationData": {
        "properties": {
          "clientName": {
            "description": "Name of the Tool to be presented to the End-User. Localized representations may be included as described in Section 2.1 of the [OIDC-Reg] specification. ",
            "type": "string"
          },
          "customParameters": {
            "description": "JSON Object where each value is a string. Custom parameters to be included in each launch to this tool. If a custom parameter is also defined at the message level, the message level value takes precedence. The value of the custom parameters may be substitution parameters as described in the LTI Core [LTI-13] specification. ",
            "items": {
              "description": "JSON Object where each value is a string. Custom parameters to be included in each launch to this tool. If a custom parameter is also defined at the message level, the message level value takes precedence. The value of the custom parameters may be substitution parameters as described in the LTI Core [LTI-13] specification. ",
              "type": "string"
            },
            "type": "array"
          },
          "keysetUrl": {
            "type": "string"
          },
          "loginInitiationUrl": {
            "type": "string"
          },
          "logoUrl": {
            "type": "string"
          },
          "redirectionUrls": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "targetLinkUri": {
            "description": "The default target link uri to use unless defined otherwise in the message or link definition",
            "type": "string"
          },
          "targetLinkUriDeepLink": {
            "description": "The target link uri to use for DeepLing Message",
            "type": "string"
          },
          "toolDescription": {
            "type": "string"
          },
          "toolName": {
            "type": "string"
          },
          "toolUrl": {
            "type": "string"
          }
        },
        "required": [
          "clientName",
          "targetLinkUri"
        ],
        "type": "object"
      },
      "McOrgConnectResult": {
        "properties": {
          "rows": {
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "Mds": {
        "properties": {
          "create": {
            "$ref": "#/components/schemas/Create"
          },
          "groups": {
            "items": {
              "$ref": "#/components/schemas/MdsGroup"
            },
            "type": "array"
          },
          "lists": {
            "items": {
              "$ref": "#/components/schemas/MdsList"
            },
            "type": "array"
          },
          "name": {
            "type": "string"
          },
          "sorts": {
            "items": {
              "$ref": "#/components/schemas/MdsSort"
            },
            "type": "array"
          },
          "views": {
            "items": {
              "$ref": "#/components/schemas/MdsView"
            },
            "type": "array"
          },
          "widgets": {
            "items": {
              "$ref": "#/components/schemas/MdsWidget"
            },
            "type": "array"
          }
        },
        "required": [
          "groups",
          "lists",
          "name",
          "sorts",
          "views",
          "widgets"
        ],
        "type": "object"
      },
      "MdsColumn": {
        "properties": {
          "format": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "showDefault": {
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "MdsEntries": {
        "properties": {
          "metadatasets": {
            "items": {
              "$ref": "#/components/schemas/MetadataSetInfo"
            },
            "type": "array"
          }
        },
        "required": [
          "metadatasets"
        ],
        "type": "object"
      },
      "MdsGroup": {
        "properties": {
          "id": {
            "type": "string"
          },
          "rendering": {
            "enum": [
              "legacy",
              "angular"
            ],
            "type": "string"
          },
          "views": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "MdsList": {
        "properties": {
          "columns": {
            "items": {
              "$ref": "#/components/schemas/MdsColumn"
            },
            "type": "array"
          },
          "id": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "MdsQueryCriteria": {
        "properties": {
          "property": {
            "type": "string"
          },
          "values": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "property",
          "values"
        ],
        "type": "object"
      },
      "MdsSort": {
        "properties": {
          "columns": {
            "items": {
              "$ref": "#/components/schemas/MdsSortColumn"
            },
            "type": "array"
          },
          "default": {
            "$ref": "#/components/schemas/MdsSortDefault"
          },
          "defaultSearch": {
            "$ref": "#/components/schemas/MdsSortDefault"
          },
          "id": {
            "type": "string"
          }
        },
        "required": [
          "id"
        ],
        "type": "object"
      },
      "MdsSortColumn": {
        "properties": {
          "id": {
            "type": "string"
          },
          "mode": {
            "type": "string"
          }
        },
        "required": [
          "id"
        ],
        "type": "object"
      },
      "MdsSortDefault": {
        "properties": {
          "sortAscending": {
            "type": "boolean"
          },
          "sortBy": {
            "type": "string"
          }
        },
        "required": [
          "sortAscending",
          "sortBy"
        ],
        "type": "object"
      },
      "MdsSubwidget": {
        "properties": {
          "id": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "MdsValue": {
        "properties": {
          "abbreviation": {
            "type": "string"
          },
          "alternativeIds": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "caption": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "parent": {
            "type": "string"
          },
          "url": {
            "type": "string"
          }
        },
        "required": [
          "id"
        ],
        "type": "object"
      },
      "MdsView": {
        "properties": {
          "caption": {
            "type": "string"
          },
          "hideIfEmpty": {
            "type": "boolean"
          },
          "html": {
            "type": "string"
          },
          "icon": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "isExtended": {
            "type": "boolean"
          },
          "rel": {
            "enum": [
              "suggestions"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "MdsWidget": {
        "properties": {
          "allowValuespaceSuggestions": {
            "type": "boolean"
          },
          "allowempty": {
            "type": "boolean"
          },
          "bottomCaption": {
            "type": "string"
          },
          "caption": {
            "type": "string"
          },
          "condition": {
            "$ref": "#/components/schemas/MdsWidgetCondition"
          },
          "configuration": {
            "type": "string"
          },
          "countDefaultvalueAsFilter": {
            "description": "When true, a set defaultvalue will still trigger the search to show an active filter. When false (default), the defaultvalue will be shown as if no filter is active",
            "type": "boolean"
          },
          "defaultMax": {
            "format": "int32",
            "type": "integer"
          },
          "defaultMin": {
            "format": "int32",
            "type": "integer"
          },
          "defaultvalue": {
            "type": "string"
          },
          "expandable": {
            "enum": [
              "disabled",
              "expanded",
              "collapsed"
            ],
            "type": "string"
          },
          "filterMode": {
            "enum": [
              "disabled",
              "auto",
              "always"
            ],
            "type": "string"
          },
          "format": {
            "type": "string"
          },
          "hasValues": {
            "type": "boolean"
          },
          "hideIfEmpty": {
            "type": "boolean"
          },
          "icon": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "ids": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object"
          },
          "interactionType": {
            "enum": [
              "Input",
              "None"
            ],
            "type": "string"
          },
          "isExtended": {
            "type": "boolean"
          },
          "isRequired": {
            "enum": [
              "mandatory",
              "mandatoryForPublish",
              "recommended",
              "optional",
              "ignore"
            ],
            "type": "string"
          },
          "isSearchable": {
            "type": "boolean"
          },
          "link": {
            "type": "string"
          },
          "max": {
            "format": "int32",
            "type": "integer"
          },
          "maxlength": {
            "format": "int32",
            "type": "integer"
          },
          "min": {
            "format": "int32",
            "type": "integer"
          },
          "placeholder": {
            "type": "string"
          },
          "required": {
            "enum": [
              "mandatory",
              "mandatoryForPublish",
              "recommended",
              "optional",
              "ignore"
            ],
            "type": "string",
            "writeOnly": true
          },
          "step": {
            "format": "int32",
            "type": "integer"
          },
          "subwidgets": {
            "items": {
              "$ref": "#/components/schemas/MdsSubwidget"
            },
            "type": "array"
          },
          "template": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "unit": {
            "type": "string"
          },
          "values": {
            "items": {
              "$ref": "#/components/schemas/MdsValue"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "MdsWidgetCondition": {
        "properties": {
          "dynamic": {
            "type": "boolean"
          },
          "negate": {
            "type": "boolean"
          },
          "pattern": {
            "type": "string"
          },
          "type": {
            "enum": [
              "PROPERTY",
              "TOOLPERMISSION"
            ],
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        },
        "required": [
          "dynamic",
          "negate",
          "type",
          "value"
        ],
        "type": "object"
      },
      "Mediacenter": {
        "properties": {
          "administrationAccess": {
            "type": "boolean"
          },
          "aspects": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "authorityName": {
            "type": "string"
          },
          "authorityType": {
            "enum": [
              "USER",
              "GROUP",
              "OWNER",
              "EVERYONE",
              "GUEST"
            ],
            "type": "string"
          },
          "editable": {
            "type": "boolean"
          },
          "groupName": {
            "type": "string"
          },
          "organizations": {
            "items": {
              "$ref": "#/components/schemas/Organization"
            },
            "type": "array"
          },
          "profile": {
            "$ref": "#/components/schemas/GroupProfile"
          },
          "properties": {
            "additionalProperties": {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "type": "object"
          },
          "ref": {
            "$ref": "#/components/schemas/NodeRef"
          },
          "signupMethod": {
            "enum": [
              "simple",
              "password",
              "list"
            ],
            "type": "string"
          }
        },
        "required": [
          "authorityName"
        ],
        "type": "object"
      },
      "MediacenterProfileExtension": {
        "properties": {
          "catalogs": {
            "items": {
              "$ref": "#/components/schemas/Catalog"
            },
            "type": "array"
          },
          "contentStatus": {
            "enum": [
              "Activated",
              "Deactivated"
            ],
            "type": "string"
          },
          "districtAbbreviation": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "location": {
            "type": "string"
          },
          "mainUrl": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "MediacentersImportResult": {
        "properties": {
          "rows": {
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "MenuEntry": {
        "properties": {
          "icon": {
            "type": "string"
          },
          "isDisabled": {
            "type": "boolean"
          },
          "isSeparate": {
            "type": "boolean"
          },
          "isSeparateBottom": {
            "type": "boolean"
          },
          "name": {
            "type": "string"
          },
          "onlyDesktop": {
            "type": "boolean"
          },
          "onlyWeb": {
            "type": "boolean"
          },
          "openInNew": {
            "type": "boolean"
          },
          "path": {
            "type": "string"
          },
          "position": {
            "format": "int32",
            "type": "integer"
          },
          "scope": {
            "type": "string"
          },
          "url": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "Message": {
        "properties": {
          "placements": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "type": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "MetadataSetInfo": {
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "name"
        ],
        "type": "object"
      },
      "MetadataSuggestionEventDTO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/NotificationEventDTO"
          },
          {
            "properties": {
              "caption": {
                "type": "string"
              },
              "captionId": {
                "type": "string"
              },
              "node": {
                "$ref": "#/components/schemas/NodeDataDTO"
              },
              "parentCaption": {
                "type": "string"
              },
              "parentId": {
                "type": "string"
              },
              "widget": {
                "$ref": "#/components/schemas/WidgetDataDTO"
              }
            },
            "type": "object"
          }
        ],
        "type": "object"
      },
      "Node": {
        "properties": {
          "access": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "accessEffective": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "aspects": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "collection": {
            "$ref": "#/components/schemas/Collection"
          },
          "commentCount": {
            "format": "int32",
            "type": "integer"
          },
          "content": {
            "$ref": "#/components/schemas/Content"
          },
          "contributors": {
            "items": {
              "$ref": "#/components/schemas/Contributor"
            },
            "type": "array"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string"
          },
          "createdBy": {
            "$ref": "#/components/schemas/Person"
          },
          "downloadUrl": {
            "type": "string"
          },
          "iconURL": {
            "type": "string"
          },
          "isDirectory": {
            "type": "boolean"
          },
          "isPublic": {
            "type": "boolean"
          },
          "license": {
            "$ref": "#/components/schemas/License"
          },
          "mediatype": {
            "type": "string"
          },
          "metadataset": {
            "type": "string"
          },
          "mimetype": {
            "type": "string"
          },
          "modifiedAt": {
            "format": "date-time",
            "type": "string"
          },
          "modifiedBy": {
            "$ref": "#/components/schemas/Person"
          },
          "name": {
            "type": "string"
          },
          "nodeLTIDeepLink": {
            "$ref": "#/components/schemas/NodeLTIDeepLink"
          },
          "owner": {
            "$ref": "#/components/schemas/Person"
          },
          "parent": {
            "$ref": "#/components/schemas/NodeRef"
          },
          "preview": {
            "$ref": "#/components/schemas/Preview"
          },
          "properties": {
            "additionalProperties": {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "type": "object"
          },
          "rating": {
            "$ref": "#/components/schemas/RatingDetails"
          },
          "ref": {
            "$ref": "#/components/schemas/NodeRef"
          },
          "relations": {
            "additionalProperties": {
              "$ref": "#/components/schemas/Node"
            },
            "type": "object"
          },
          "remote": {
            "$ref": "#/components/schemas/Remote"
          },
          "repositoryType": {
            "type": "string"
          },
          "size": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "usedInCollections": {
            "items": {
              "$ref": "#/components/schemas/Node"
            },
            "type": "array"
          }
        },
        "required": [
          "access",
          "collection",
          "createdAt",
          "createdBy",
          "downloadUrl",
          "name",
          "owner",
          "ref"
        ],
        "type": "object"
      },
      "NodeCollectionProposalCount": {
        "properties": {
          "access": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "accessEffective": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "aspects": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "collection": {
            "$ref": "#/components/schemas/Collection"
          },
          "commentCount": {
            "format": "int32",
            "type": "integer"
          },
          "content": {
            "$ref": "#/components/schemas/Content"
          },
          "contributors": {
            "items": {
              "$ref": "#/components/schemas/Contributor"
            },
            "type": "array"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string"
          },
          "createdBy": {
            "$ref": "#/components/schemas/Person"
          },
          "downloadUrl": {
            "type": "string"
          },
          "iconURL": {
            "type": "string"
          },
          "isDirectory": {
            "type": "boolean"
          },
          "isPublic": {
            "type": "boolean"
          },
          "license": {
            "$ref": "#/components/schemas/License"
          },
          "mediatype": {
            "type": "string"
          },
          "metadataset": {
            "type": "string"
          },
          "mimetype": {
            "type": "string"
          },
          "modifiedAt": {
            "format": "date-time",
            "type": "string"
          },
          "modifiedBy": {
            "$ref": "#/components/schemas/Person"
          },
          "name": {
            "type": "string"
          },
          "nodeLTIDeepLink": {
            "$ref": "#/components/schemas/NodeLTIDeepLink"
          },
          "owner": {
            "$ref": "#/components/schemas/Person"
          },
          "parent": {
            "$ref": "#/components/schemas/NodeRef"
          },
          "preview": {
            "$ref": "#/components/schemas/Preview"
          },
          "properties": {
            "additionalProperties": {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "type": "object"
          },
          "proposalCount": {
            "additionalProperties": {
              "format": "int32",
              "type": "integer"
            },
            "type": "object",
            "writeOnly": true
          },
          "proposalCounts": {
            "additionalProperties": {
              "format": "int32",
              "type": "integer"
            },
            "type": "object"
          },
          "rating": {
            "$ref": "#/components/schemas/RatingDetails"
          },
          "ref": {
            "$ref": "#/components/schemas/NodeRef"
          },
          "relations": {
            "additionalProperties": {
              "$ref": "#/components/schemas/Node"
            },
            "type": "object"
          },
          "remote": {
            "$ref": "#/components/schemas/Remote"
          },
          "repositoryType": {
            "type": "string"
          },
          "size": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "usedInCollections": {
            "items": {
              "$ref": "#/components/schemas/Node"
            },
            "type": "array"
          }
        },
        "required": [
          "access",
          "collection",
          "createdAt",
          "createdBy",
          "downloadUrl",
          "name",
          "owner",
          "ref"
        ],
        "type": "object"
      },
      "NodeData": {
        "properties": {
          "counts": {
            "additionalProperties": {
              "format": "int32",
              "type": "integer"
            },
            "type": "object"
          },
          "timestamp": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "NodeDataDTO": {
        "properties": {
          "aspects": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "properties": {
            "additionalProperties": {
              "type": "object"
            },
            "type": "object"
          },
          "type": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "NodeEntries": {
        "properties": {
          "nodes": {
            "items": {
              "$ref": "#/components/schemas/Node"
            },
            "type": "array"
          },
          "pagination": {
            "$ref": "#/components/schemas/Pagination"
          }
        },
        "required": [
          "nodes",
          "pagination"
        ],
        "type": "object"
      },
      "NodeEntry": {
        "properties": {
          "node": {
            "$ref": "#/components/schemas/Node"
          }
        },
        "required": [
          "node"
        ],
        "type": "object"
      },
      "NodeIssueEventDTO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/NotificationEventDTO"
          },
          {
            "properties": {
              "node": {
                "$ref": "#/components/schemas/NodeDataDTO"
              },
              "reason": {
                "type": "string"
              },
              "userComment": {
                "type": "string"
              }
            },
            "type": "object"
          }
        ],
        "type": "object"
      },
      "NodeLTIDeepLink": {
        "properties": {
          "jwtDeepLinkResponse": {
            "type": "string"
          },
          "ltiDeepLinkReturnUrl": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "NodeLocked": {
        "properties": {
          "isLocked": {
            "type": "boolean"
          }
        },
        "required": [
          "isLocked"
        ],
        "type": "object"
      },
      "NodePermissionEntry": {
        "properties": {
          "permissions": {
            "$ref": "#/components/schemas/NodePermissions"
          }
        },
        "required": [
          "permissions"
        ],
        "type": "object"
      },
      "NodePermissions": {
        "properties": {
          "inheritedPermissions": {
            "items": {
              "$ref": "#/components/schemas/ACE"
            },
            "type": "array"
          },
          "localPermissions": {
            "$ref": "#/components/schemas/ACL"
          }
        },
        "required": [
          "inheritedPermissions",
          "localPermissions"
        ],
        "type": "object"
      },
      "NodeRef": {
        "properties": {
          "archived": {
            "type": "boolean"
          },
          "id": {
            "type": "string"
          },
          "isHomeRepo": {
            "type": "boolean"
          },
          "repo": {
            "type": "string"
          }
        },
        "required": [
          "archived",
          "id",
          "repo"
        ],
        "type": "object"
      },
      "NodeRelation": {
        "properties": {
          "node": {
            "$ref": "#/components/schemas/Node"
          },
          "relations": {
            "items": {
              "$ref": "#/components/schemas/RelationData"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "NodeRemote": {
        "properties": {
          "node": {
            "$ref": "#/components/schemas/Node"
          },
          "remote": {
            "$ref": "#/components/schemas/Node"
          }
        },
        "required": [
          "node",
          "remote"
        ],
        "type": "object"
      },
      "NodeShare": {
        "properties": {
          "downloadCount": {
            "format": "int32",
            "type": "integer"
          },
          "email": {
            "type": "string"
          },
          "expiryDate": {
            "format": "int64",
            "type": "integer"
          },
          "invitedAt": {
            "format": "int64",
            "type": "integer"
          },
          "password": {
            "type": "boolean"
          },
          "shareId": {
            "type": "string"
          },
          "token": {
            "type": "string"
          },
          "url": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "NodeStats": {
        "properties": {
          "total": {
            "additionalProperties": {
              "format": "int32",
              "type": "integer"
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "NodeSuggestionResponseDTO": {
        "properties": {
          "nodeId": {
            "type": "string"
          },
          "suggestions": {
            "additionalProperties": {
              "items": {
                "$ref": "#/components/schemas/SuggestionResponseDTO"
              },
              "type": "array"
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "NodeText": {
        "properties": {
          "html": {
            "type": "string"
          },
          "raw": {
            "type": "string"
          },
          "text": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "NodeVersion": {
        "properties": {
          "comment": {
            "type": "string"
          },
          "contentUrl": {
            "type": "string"
          },
          "modifiedAt": {
            "type": "string"
          },
          "modifiedBy": {
            "$ref": "#/components/schemas/Person"
          },
          "properties": {
            "additionalProperties": {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "type": "object"
          },
          "version": {
            "$ref": "#/components/schemas/NodeVersionRef"
          }
        },
        "required": [
          "comment",
          "modifiedAt",
          "modifiedBy",
          "version"
        ],
        "type": "object"
      },
      "NodeVersionEntries": {
        "properties": {
          "versions": {
            "items": {
              "$ref": "#/components/schemas/NodeVersion"
            },
            "type": "array"
          }
        },
        "required": [
          "versions"
        ],
        "type": "object"
      },
      "NodeVersionEntry": {
        "properties": {
          "version": {
            "$ref": "#/components/schemas/NodeVersion"
          }
        },
        "required": [
          "version"
        ],
        "type": "object"
      },
      "NodeVersionRef": {
        "properties": {
          "major": {
            "format": "int32",
            "type": "integer"
          },
          "minor": {
            "format": "int32",
            "type": "integer"
          },
          "node": {
            "$ref": "#/components/schemas/NodeRef"
          }
        },
        "required": [
          "major",
          "minor",
          "node"
        ],
        "type": "object"
      },
      "NodeVersionRefEntries": {
        "properties": {
          "versions": {
            "items": {
              "$ref": "#/components/schemas/NodeVersionRef"
            },
            "type": "array"
          }
        },
        "required": [
          "versions"
        ],
        "type": "object"
      },
      "NotificationConfig": {
        "properties": {
          "configMode": {
            "enum": [
              "uniformly",
              "individual"
            ],
            "type": "string"
          },
          "defaultInterval": {
            "enum": [
              "immediately",
              "disabled",
              "daily",
              "weekly"
            ],
            "type": "string"
          },
          "intervals": {
            "$ref": "#/components/schemas/NotificationIntervals"
          }
        },
        "type": "object"
      },
      "NotificationEventDTO": {
        "discriminator": {
          "propertyName": "_class"
        },
        "properties": {
          "_class": {
            "type": "string"
          },
          "_id": {
            "type": "string"
          },
          "creator": {
            "$ref": "#/components/schemas/UserDataDTO"
          },
          "receiver": {
            "$ref": "#/components/schemas/UserDataDTO"
          },
          "status": {
            "enum": [
              "PENDING",
              "SENT",
              "READ",
              "IGNORED"
            ],
            "type": "string"
          },
          "timestamp": {
            "format": "date-time",
            "type": "string"
          }
        },
        "required": [
          "_class"
        ],
        "type": "object"
      },
      "NotificationIntervals": {
        "properties": {
          "addToCollectionEvent": {
            "enum": [
              "immediately",
              "disabled",
              "daily",
              "weekly"
            ],
            "type": "string"
          },
          "commentEvent": {
            "enum": [
              "immediately",
              "disabled",
              "daily",
              "weekly"
            ],
            "type": "string"
          },
          "inviteEvent": {
            "enum": [
              "immediately",
              "disabled",
              "daily",
              "weekly"
            ],
            "type": "string"
          },
          "metadataSuggestionEvent": {
            "enum": [
              "immediately",
              "disabled",
              "daily",
              "weekly"
            ],
            "type": "string"
          },
          "nodeIssueEvent": {
            "enum": [
              "immediately",
              "disabled",
              "daily",
              "weekly"
            ],
            "type": "string"
          },
          "proposeForCollectionEvent": {
            "enum": [
              "immediately",
              "disabled",
              "daily",
              "weekly"
            ],
            "type": "string"
          },
          "ratingEvent": {
            "enum": [
              "immediately",
              "disabled",
              "daily",
              "weekly"
            ],
            "type": "string"
          },
          "workflowEvent": {
            "enum": [
              "immediately",
              "disabled",
              "daily",
              "weekly"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "NotificationResponsePage": {
        "properties": {
          "content": {
            "items": {
              "$ref": "#/components/schemas/NotificationEventDTO"
            },
            "type": "array"
          },
          "empty": {
            "type": "boolean"
          },
          "first": {
            "type": "boolean"
          },
          "last": {
            "type": "boolean"
          },
          "number": {
            "format": "int32",
            "type": "integer"
          },
          "numberOfElements": {
            "format": "int32",
            "type": "integer"
          },
          "pageable": {
            "$ref": "#/components/schemas/Pageable"
          },
          "size": {
            "format": "int32",
            "type": "integer"
          },
          "sort": {
            "$ref": "#/components/schemas/Sort"
          },
          "totalElements": {
            "format": "int64",
            "type": "integer"
          },
          "totalPages": {
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "NotifyEntry": {
        "properties": {
          "action": {
            "type": "string"
          },
          "date": {
            "format": "int64",
            "type": "integer"
          },
          "permissions": {
            "$ref": "#/components/schemas/ACL"
          },
          "user": {
            "$ref": "#/components/schemas/User"
          }
        },
        "required": [
          "action",
          "date",
          "permissions",
          "user"
        ],
        "type": "object"
      },
      "OpenIdConfiguration": {
        "properties": {
          "authorization_endpoint": {
            "type": "string"
          },
          "claims_supported": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "https://purl.imsglobal.org/spec/lti-platform-configuration": {
            "$ref": "#/components/schemas/LTIPlatformConfiguration"
          },
          "id_token_signing_alg_values_supported": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "issuer": {
            "type": "string"
          },
          "jwks_uri": {
            "type": "string"
          },
          "registration_endpoint": {
            "type": "string"
          },
          "response_types_supported": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "scopes_supported": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "subject_types_supported": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "token_endpoint": {
            "type": "string"
          },
          "token_endpoint_auth_methods_supported": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "token_endpoint_auth_signing_alg_values_supported": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "OpenIdRegistrationResult": {
        "properties": {
          "application_type": {
            "type": "string"
          },
          "client_id": {
            "type": "string"
          },
          "client_name": {
            "type": "string"
          },
          "grant_types": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "https://purl.imsglobal.org/spec/lti-tool-configuration": {
            "$ref": "#/components/schemas/LTIToolConfiguration"
          },
          "initiate_login_uri": {
            "type": "string"
          },
          "jwks_uri": {
            "type": "string"
          },
          "logo_uri": {
            "type": "string"
          },
          "redirect_uris": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "response_types": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "scope": {
            "type": "string"
          },
          "token_endpoint_auth_method": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "OrganisationsImportResult": {
        "properties": {
          "rows": {
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "Organization": {
        "properties": {
          "administrationAccess": {
            "type": "boolean"
          },
          "aspects": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "authorityName": {
            "type": "string"
          },
          "authorityType": {
            "enum": [
              "USER",
              "GROUP",
              "OWNER",
              "EVERYONE",
              "GUEST"
            ],
            "type": "string"
          },
          "editable": {
            "type": "boolean"
          },
          "groupName": {
            "type": "string"
          },
          "profile": {
            "$ref": "#/components/schemas/GroupProfile"
          },
          "properties": {
            "additionalProperties": {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "type": "object"
          },
          "ref": {
            "$ref": "#/components/schemas/NodeRef"
          },
          "sharedFolder": {
            "$ref": "#/components/schemas/NodeRef"
          },
          "signupMethod": {
            "enum": [
              "simple",
              "password",
              "list"
            ],
            "type": "string"
          }
        },
        "required": [
          "authorityName"
        ],
        "type": "object"
      },
      "OrganizationEntries": {
        "properties": {
          "canCreate": {
            "type": "boolean"
          },
          "organizations": {
            "items": {
              "$ref": "#/components/schemas/Organization"
            },
            "type": "array"
          },
          "pagination": {
            "$ref": "#/components/schemas/Pagination"
          }
        },
        "required": [
          "organizations",
          "pagination"
        ],
        "type": "object"
      },
      "Pageable": {
        "properties": {
          "offset": {
            "format": "int64",
            "type": "integer"
          },
          "pageNumber": {
            "format": "int32",
            "type": "integer"
          },
          "pageSize": {
            "format": "int32",
            "type": "integer"
          },
          "paged": {
            "type": "boolean"
          },
          "sort": {
            "$ref": "#/components/schemas/Sort"
          },
          "unpaged": {
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "Pagination": {
        "properties": {
          "count": {
            "format": "int32",
            "type": "integer"
          },
          "from": {
            "format": "int32",
            "type": "integer"
          },
          "total": {
            "format": "int32",
            "type": "integer"
          }
        },
        "required": [
          "count",
          "from",
          "total"
        ],
        "type": "object"
      },
      "Parameters": {
        "properties": {
          "general": {
            "$ref": "#/components/schemas/General"
          }
        },
        "type": "object",
        "xml": {
          "name": "usage"
        }
      },
      "ParentEntries": {
        "properties": {
          "nodes": {
            "items": {
              "$ref": "#/components/schemas/Node"
            },
            "type": "array"
          },
          "pagination": {
            "$ref": "#/components/schemas/Pagination"
          },
          "scope": {
            "type": "string"
          }
        },
        "required": [
          "nodes",
          "pagination"
        ],
        "type": "object"
      },
      "Person": {
        "properties": {
          "firstName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "mailbox": {
            "type": "string"
          },
          "profile": {
            "$ref": "#/components/schemas/UserProfile"
          }
        },
        "type": "object"
      },
      "PersonDeleteOptions": {
        "properties": {
          "cleanupMetadata": {
            "type": "boolean"
          },
          "collectionFeedback": {
            "$ref": "#/components/schemas/DeleteOption"
          },
          "collections": {
            "$ref": "#/components/schemas/CollectionOptions"
          },
          "comments": {
            "$ref": "#/components/schemas/DeleteOption"
          },
          "homeFolder": {
            "$ref": "#/components/schemas/HomeFolderOptions"
          },
          "ratings": {
            "$ref": "#/components/schemas/DeleteOption"
          },
          "receiver": {
            "type": "string"
          },
          "receiverGroup": {
            "type": "string"
          },
          "sharedFolders": {
            "$ref": "#/components/schemas/SharedFolderOptions"
          },
          "statistics": {
            "$ref": "#/components/schemas/DeleteOption"
          },
          "stream": {
            "$ref": "#/components/schemas/DeleteOption"
          }
        },
        "type": "object"
      },
      "PersonDeleteResult": {
        "properties": {
          "authorityName": {
            "type": "string"
          },
          "collectionFeedback": {
            "format": "int32",
            "type": "integer"
          },
          "collections": {
            "$ref": "#/components/schemas/CollectionCounts"
          },
          "comments": {
            "format": "int32",
            "type": "integer"
          },
          "deletedName": {
            "type": "string"
          },
          "homeFolder": {
            "additionalProperties": {
              "$ref": "#/components/schemas/Counts"
            },
            "type": "object"
          },
          "ratings": {
            "format": "int32",
            "type": "integer"
          },
          "sharedFolders": {
            "additionalProperties": {
              "$ref": "#/components/schemas/Counts"
            },
            "type": "object"
          },
          "stream": {
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "PersonReport": {
        "properties": {
          "options": {
            "$ref": "#/components/schemas/PersonDeleteOptions"
          },
          "results": {
            "items": {
              "$ref": "#/components/schemas/PersonDeleteResult"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "PluginInfo": {
        "properties": {
          "id": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "PluginStatus": {
        "properties": {
          "enabled": {
            "type": "boolean"
          },
          "name": {
            "type": "string"
          },
          "version": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "Preferences": {
        "properties": {
          "preferences": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "Preview": {
        "properties": {
          "data": {
            "format": "byte",
            "type": "string"
          },
          "height": {
            "format": "int32",
            "type": "integer"
          },
          "isGenerated": {
            "type": "boolean"
          },
          "isIcon": {
            "type": "boolean"
          },
          "mimetype": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "url": {
            "type": "string"
          },
          "width": {
            "format": "int32",
            "type": "integer"
          }
        },
        "required": [
          "height",
          "isIcon",
          "url",
          "width"
        ],
        "type": "object"
      },
      "Profile": {
        "properties": {
          "customAttributes": {
            "additionalProperties": {
              "type": "object"
            },
            "type": "object"
          },
          "displayName": {
            "type": "string"
          },
          "groupEmail": {
            "type": "string"
          },
          "groupType": {
            "type": "string"
          },
          "mediacenter": {
            "$ref": "#/components/schemas/MediacenterProfileExtension"
          },
          "scopeType": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "ProfileSettings": {
        "properties": {
          "showEmail": {
            "description": "false",
            "type": "boolean"
          }
        },
        "required": [
          "showEmail"
        ],
        "type": "object"
      },
      "ProposeForCollectionEventDTO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/NotificationEventDTO"
          },
          {
            "properties": {
              "collection": {
                "$ref": "#/components/schemas/CollectionDTO"
              },
              "node": {
                "$ref": "#/components/schemas/NodeDataDTO"
              }
            },
            "type": "object"
          }
        ],
        "type": "object"
      },
      "Provider": {
        "properties": {
          "areaServed": {
            "enum": [
              "Organization",
              "City",
              "State",
              "Country",
              "Continent",
              "World"
            ],
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "legalName": {
            "type": "string"
          },
          "location": {
            "$ref": "#/components/schemas/Location"
          },
          "url": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "Query": {
        "properties": {
          "condition": {
            "$ref": "#/components/schemas/Condition"
          },
          "query": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "RatingData": {
        "properties": {
          "count": {
            "format": "int64",
            "type": "integer"
          },
          "rating": {
            "format": "double",
            "type": "number"
          },
          "sum": {
            "format": "double",
            "type": "number"
          }
        },
        "type": "object"
      },
      "RatingDetails": {
        "properties": {
          "affiliation": {
            "additionalProperties": {
              "$ref": "#/components/schemas/RatingData"
            },
            "type": "object"
          },
          "overall": {
            "$ref": "#/components/schemas/RatingData"
          },
          "user": {
            "format": "double",
            "type": "number"
          }
        },
        "type": "object"
      },
      "RatingEventDTO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/NotificationEventDTO"
          },
          {
            "properties": {
              "newRating": {
                "format": "double",
                "type": "number"
              },
              "node": {
                "$ref": "#/components/schemas/NodeDataDTO"
              },
              "ratingCount": {
                "format": "int64",
                "type": "integer"
              },
              "ratingSum": {
                "format": "double",
                "type": "number"
              }
            },
            "type": "object"
          }
        ],
        "type": "object"
      },
      "RatingHistory": {
        "properties": {
          "affiliation": {
            "additionalProperties": {
              "$ref": "#/components/schemas/RatingData"
            },
            "type": "object"
          },
          "overall": {
            "$ref": "#/components/schemas/RatingData"
          },
          "timestamp": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "ReferenceEntries": {
        "properties": {
          "pagination": {
            "$ref": "#/components/schemas/Pagination"
          },
          "references": {
            "items": {
              "$ref": "#/components/schemas/CollectionReference"
            },
            "type": "array"
          }
        },
        "required": [
          "references"
        ],
        "type": "object"
      },
      "Register": {
        "properties": {
          "local": {
            "type": "boolean"
          },
          "loginUrl": {
            "type": "string"
          },
          "recoverPassword": {
            "type": "boolean"
          },
          "recoverUrl": {
            "type": "string"
          },
          "requiredFields": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "RegisterExists": {
        "properties": {
          "exists": {
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "RegisterInformation": {
        "properties": {
          "allowNotifications": {
            "type": "boolean"
          },
          "authorityName": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "firstName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "organization": {
            "type": "string"
          },
          "password": {
            "type": "string"
          },
          "vcard": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "RegistrationUrl": {
        "properties": {
          "url": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "RelationData": {
        "properties": {
          "creator": {
            "$ref": "#/components/schemas/User"
          },
          "node": {
            "$ref": "#/components/schemas/Node"
          },
          "timestamp": {
            "format": "date-time",
            "type": "string"
          },
          "type": {
            "enum": [
              "isPartOf",
              "isBasedOn",
              "references",
              "hasPart",
              "isBasisFor"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "Remote": {
        "properties": {
          "id": {
            "type": "string"
          },
          "repository": {
            "$ref": "#/components/schemas/Repo"
          }
        },
        "type": "object"
      },
      "RemoteAuthDescription": {
        "properties": {
          "token": {
            "type": "string"
          },
          "url": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "Rendering": {
        "properties": {
          "gdpr": {
            "items": {
              "$ref": "#/components/schemas/RenderingGdpr"
            },
            "type": "array"
          },
          "prerender": {
            "type": "boolean"
          },
          "showDownloadButton": {
            "type": "boolean"
          },
          "showPreview": {
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "RenderingDetailsEntry": {
        "properties": {
          "detailsSnippet": {
            "type": "string"
          },
          "mimeType": {
            "type": "string"
          },
          "node": {
            "$ref": "#/components/schemas/Node"
          }
        },
        "required": [
          "detailsSnippet",
          "mimeType",
          "node"
        ],
        "type": "object"
      },
      "RenderingGdpr": {
        "properties": {
          "matcher": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "privacyInformationUrl": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "RenderingService": {
        "properties": {
          "url": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "Repo": {
        "properties": {
          "icon": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "isHomeRepo": {
            "type": "boolean"
          },
          "logo": {
            "type": "string"
          },
          "renderingSupported": {
            "type": "boolean"
          },
          "repositoryType": {
            "type": "string"
          },
          "title": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "RepoEntries": {
        "properties": {
          "repositories": {
            "items": {
              "$ref": "#/components/schemas/Repo"
            },
            "type": "array"
          }
        },
        "required": [
          "repositories"
        ],
        "type": "object"
      },
      "RepositoryConfig": {
        "properties": {
          "frontpage": {
            "$ref": "#/components/schemas/Frontpage"
          }
        },
        "type": "object"
      },
      "RestoreResult": {
        "properties": {
          "archiveNodeId": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "nodeId": {
            "type": "string"
          },
          "parent": {
            "type": "string"
          },
          "path": {
            "type": "string"
          },
          "restoreStatus": {
            "type": "string"
          }
        },
        "required": [
          "archiveNodeId",
          "name",
          "nodeId",
          "parent",
          "path",
          "restoreStatus"
        ],
        "type": "object"
      },
      "RestoreResults": {
        "properties": {
          "results": {
            "items": {
              "$ref": "#/components/schemas/RestoreResult"
            },
            "type": "array"
          }
        },
        "required": [
          "results"
        ],
        "type": "object"
      },
      "RevokeDetails": {
        "properties": {
          "reason": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "SearchParameters": {
        "properties": {
          "criteria": {
            "items": {
              "$ref": "#/components/schemas/MdsQueryCriteria"
            },
            "type": "array"
          },
          "excludes": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "facetLimit": {
            "default": 10,
            "format": "int32",
            "type": "integer"
          },
          "facetMinCount": {
            "default": 5,
            "format": "int32",
            "type": "integer"
          },
          "facetSuggest": {
            "type": "string"
          },
          "facets": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "permissions": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "resolveCollections": {
            "type": "boolean"
          },
          "resolveUsernames": {
            "type": "boolean"
          },
          "returnSuggestions": {
            "type": "boolean"
          }
        },
        "required": [
          "criteria"
        ],
        "type": "object"
      },
      "SearchParametersFacets": {
        "properties": {
          "criteria": {
            "items": {
              "$ref": "#/components/schemas/MdsQueryCriteria"
            },
            "type": "array"
          },
          "facetLimit": {
            "default": 10,
            "format": "int32",
            "type": "integer"
          },
          "facetMinCount": {
            "default": 5,
            "format": "int32",
            "type": "integer"
          },
          "facetSuggest": {
            "type": "string"
          },
          "facets": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "criteria",
          "facets"
        ],
        "type": "object"
      },
      "SearchResult": {
        "properties": {
          "facets": {
            "items": {
              "$ref": "#/components/schemas/Facet"
            },
            "type": "array"
          },
          "nodes": {
            "items": {
              "$ref": "#/components/schemas/Node"
            },
            "type": "array"
          },
          "pagination": {
            "$ref": "#/components/schemas/Pagination"
          }
        },
        "required": [
          "facets",
          "nodes",
          "pagination"
        ],
        "type": "object"
      },
      "SearchResultElastic": {
        "properties": {
          "elasticResponse": {
            "type": "string"
          },
          "facets": {
            "items": {
              "$ref": "#/components/schemas/Facet"
            },
            "type": "array"
          },
          "ignored": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "nodes": {
            "items": {
              "type": "object"
            },
            "type": "array"
          },
          "pagination": {
            "$ref": "#/components/schemas/Pagination"
          },
          "suggests": {
            "items": {
              "$ref": "#/components/schemas/Suggest"
            },
            "type": "array"
          }
        },
        "required": [
          "facets",
          "nodes",
          "pagination"
        ],
        "type": "object"
      },
      "SearchResultLrmi": {
        "properties": {
          "facets": {
            "items": {
              "$ref": "#/components/schemas/Facet"
            },
            "type": "array"
          },
          "ignored": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "nodes": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "pagination": {
            "$ref": "#/components/schemas/Pagination"
          },
          "suggests": {
            "items": {
              "$ref": "#/components/schemas/Suggest"
            },
            "type": "array"
          }
        },
        "required": [
          "facets",
          "nodes",
          "pagination"
        ],
        "type": "object"
      },
      "SearchResultNode": {
        "properties": {
          "facets": {
            "items": {
              "$ref": "#/components/schemas/Facet"
            },
            "type": "array"
          },
          "ignored": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "nodes": {
            "items": {
              "$ref": "#/components/schemas/Node"
            },
            "type": "array"
          },
          "pagination": {
            "$ref": "#/components/schemas/Pagination"
          },
          "suggests": {
            "items": {
              "$ref": "#/components/schemas/Suggest"
            },
            "type": "array"
          }
        },
        "required": [
          "facets",
          "nodes",
          "pagination"
        ],
        "type": "object"
      },
      "SearchVCard": {
        "properties": {
          "vcard": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "ServerUpdateInfo": {
        "properties": {
          "auto": {
            "type": "boolean"
          },
          "description": {
            "type": "string"
          },
          "executedAt": {
            "format": "int64",
            "type": "integer"
          },
          "id": {
            "type": "string"
          },
          "order": {
            "format": "int32",
            "type": "integer"
          },
          "testable": {
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "Service": {
        "properties": {
          "about": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "audience": {
            "items": {
              "$ref": "#/components/schemas/Audience"
            },
            "type": "array"
          },
          "description": {
            "type": "string"
          },
          "icon": {
            "type": "string"
          },
          "inLanguage": {
            "type": "string"
          },
          "interfaces": {
            "items": {
              "$ref": "#/components/schemas/Interface"
            },
            "type": "array"
          },
          "isAccessibleForFree": {
            "type": "boolean"
          },
          "logo": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "provider": {
            "$ref": "#/components/schemas/Provider"
          },
          "startDate": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "url": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "ServiceInstance": {
        "properties": {
          "endpoint": {
            "type": "string"
          },
          "version": {
            "$ref": "#/components/schemas/ServiceVersion"
          }
        },
        "required": [
          "endpoint",
          "version"
        ],
        "type": "object"
      },
      "ServiceVersion": {
        "properties": {
          "major": {
            "format": "int32",
            "type": "integer"
          },
          "minor": {
            "format": "int32",
            "type": "integer"
          },
          "renderservice": {
            "type": "string"
          },
          "repository": {
            "type": "string"
          }
        },
        "required": [
          "major",
          "minor"
        ],
        "type": "object"
      },
      "Services": {
        "properties": {
          "visualization": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "SessionExpiredDialog": {
        "type": "object"
      },
      "SharedFolderOptions": {
        "properties": {
          "ccFiles": {
            "enum": [
              "none",
              "assign",
              "delete"
            ],
            "type": "string"
          },
          "folders": {
            "enum": [
              "none",
              "assign",
              "delete"
            ],
            "type": "string"
          },
          "move": {
            "type": "boolean"
          },
          "privateFiles": {
            "enum": [
              "none",
              "assign",
              "delete"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "SharingInfo": {
        "properties": {
          "expired": {
            "type": "boolean"
          },
          "invitedBy": {
            "$ref": "#/components/schemas/Person"
          },
          "node": {
            "$ref": "#/components/schemas/Node"
          },
          "password": {
            "type": "boolean"
          },
          "passwordMatches": {
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "SimpleEdit": {
        "properties": {
          "globalGroups": {
            "items": {
              "$ref": "#/components/schemas/SimpleEditGlobalGroups"
            },
            "type": "array"
          },
          "licenses": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "organization": {
            "$ref": "#/components/schemas/SimpleEditOrganization"
          },
          "organizationFilter": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "SimpleEditGlobalGroups": {
        "properties": {
          "groups": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "toolpermission": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "SimpleEditOrganization": {
        "properties": {
          "groupTypes": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "Sort": {
        "properties": {
          "empty": {
            "type": "boolean"
          },
          "sorted": {
            "type": "boolean"
          },
          "unsorted": {
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "StatisticEntity": {
        "properties": {
          "count": {
            "format": "int32",
            "type": "integer"
          },
          "value": {
            "type": "string"
          }
        },
        "required": [
          "count",
          "value"
        ],
        "type": "object"
      },
      "StatisticEntry": {
        "properties": {
          "entities": {
            "items": {
              "$ref": "#/components/schemas/StatisticEntity"
            },
            "type": "array"
          },
          "property": {
            "type": "string"
          }
        },
        "required": [
          "entities",
          "property"
        ],
        "type": "object"
      },
      "Statistics": {
        "properties": {
          "entries": {
            "items": {
              "$ref": "#/components/schemas/StatisticEntry"
            },
            "type": "array"
          }
        },
        "required": [
          "entries"
        ],
        "type": "object"
      },
      "StatisticsGlobal": {
        "properties": {
          "groups": {
            "items": {
              "$ref": "#/components/schemas/StatisticsKeyGroup"
            },
            "type": "array"
          },
          "overall": {
            "$ref": "#/components/schemas/StatisticsGroup"
          },
          "user": {
            "$ref": "#/components/schemas/StatisticsUser"
          }
        },
        "type": "object"
      },
      "StatisticsGroup": {
        "properties": {
          "count": {
            "format": "int32",
            "type": "integer"
          },
          "subGroups": {
            "items": {
              "$ref": "#/components/schemas/StatisticsSubGroup"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "StatisticsKeyGroup": {
        "properties": {
          "count": {
            "format": "int32",
            "type": "integer"
          },
          "displayName": {
            "type": "string"
          },
          "key": {
            "type": "string"
          },
          "subGroups": {
            "items": {
              "$ref": "#/components/schemas/StatisticsSubGroup"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "StatisticsSubGroup": {
        "properties": {
          "count": {
            "items": {
              "$ref": "#/components/schemas/SubGroupItem"
            },
            "type": "array"
          },
          "id": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "StatisticsUser": {
        "properties": {
          "count": {
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "StoredService": {
        "properties": {
          "about": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "audience": {
            "items": {
              "$ref": "#/components/schemas/Audience"
            },
            "type": "array"
          },
          "description": {
            "type": "string"
          },
          "icon": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "inLanguage": {
            "type": "string"
          },
          "interfaces": {
            "items": {
              "$ref": "#/components/schemas/Interface"
            },
            "type": "array"
          },
          "isAccessibleForFree": {
            "type": "boolean"
          },
          "logo": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "provider": {
            "$ref": "#/components/schemas/Provider"
          },
          "startDate": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "url": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "Stream": {
        "properties": {
          "enabled": {
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "StreamEntry": {
        "properties": {
          "author": {
            "$ref": "#/components/schemas/UserSimple"
          },
          "created": {
            "format": "int64",
            "type": "integer"
          },
          "description": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "modified": {
            "format": "int64",
            "type": "integer"
          },
          "nodes": {
            "items": {
              "$ref": "#/components/schemas/Node"
            },
            "type": "array"
          },
          "priority": {
            "format": "int32",
            "type": "integer"
          },
          "properties": {
            "additionalProperties": {
              "type": "object"
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "StreamEntryInput": {
        "properties": {
          "description": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "nodes": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "priority": {
            "format": "int32",
            "type": "integer"
          },
          "properties": {
            "additionalProperties": {
              "type": "object"
            },
            "type": "object"
          },
          "title": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "StreamList": {
        "properties": {
          "pagination": {
            "$ref": "#/components/schemas/Pagination"
          },
          "stream": {
            "items": {
              "$ref": "#/components/schemas/StreamEntry"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "SubGroupItem": {
        "properties": {
          "count": {
            "format": "int32",
            "type": "integer"
          },
          "displayName": {
            "type": "string"
          },
          "key": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "Suggest": {
        "properties": {
          "highlighted": {
            "description": "suggested text with corrected words highlighted",
            "type": "string"
          },
          "score": {
            "description": "score of the suggestion",
            "format": "double",
            "type": "number"
          },
          "text": {
            "description": "suggested text",
            "type": "string"
          }
        },
        "required": [
          "score",
          "text"
        ],
        "type": "object"
      },
      "Suggestion": {
        "properties": {
          "displayString": {
            "type": "string"
          },
          "key": {
            "type": "string"
          },
          "replacementString": {
            "type": "string"
          }
        },
        "required": [
          "displayString",
          "replacementString"
        ],
        "type": "object"
      },
      "SuggestionParam": {
        "properties": {
          "criteria": {
            "items": {
              "$ref": "#/components/schemas/MdsQueryCriteria"
            },
            "type": "array"
          },
          "valueParameters": {
            "$ref": "#/components/schemas/ValueParameters"
          }
        },
        "type": "object"
      },
      "SuggestionResponseDTO": {
        "properties": {
          "confidence": {
            "format": "double",
            "type": "number"
          },
          "created": {
            "format": "date-time",
            "type": "string"
          },
          "createdBy": {
            "$ref": "#/components/schemas/UserSimple"
          },
          "description": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "modified": {
            "format": "date-time",
            "type": "string"
          },
          "modifiedBy": {
            "$ref": "#/components/schemas/UserSimple"
          },
          "nodeId": {
            "type": "string"
          },
          "propertyId": {
            "type": "string"
          },
          "status": {
            "enum": [
              "ACCEPTED",
              "PENDING",
              "DECLINED"
            ],
            "type": "string"
          },
          "type": {
            "enum": [
              "AI",
              "USER_PROPOSAL"
            ],
            "type": "string"
          },
          "value": {
            "type": "object"
          },
          "version": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "Suggestions": {
        "properties": {
          "values": {
            "items": {
              "$ref": "#/components/schemas/Suggestion"
            },
            "type": "array"
          }
        },
        "required": [
          "values"
        ],
        "type": "object"
      },
      "Tool": {
        "properties": {
          "appId": {
            "type": "string"
          },
          "customContentOption": {
            "type": "boolean"
          },
          "description": {
            "type": "string"
          },
          "domain": {
            "type": "string"
          },
          "logo": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "resourceType": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "Tools": {
        "properties": {
          "tools": {
            "items": {
              "$ref": "#/components/schemas/Tool"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "Tracking": {
        "properties": {
          "authority": {
            "$ref": "#/components/schemas/TrackingAuthority"
          },
          "counts": {
            "additionalProperties": {
              "format": "int32",
              "type": "integer"
            },
            "type": "object"
          },
          "date": {
            "type": "string"
          },
          "fields": {
            "additionalProperties": {
              "type": "object"
            },
            "type": "object"
          },
          "groups": {
            "additionalProperties": {
              "additionalProperties": {
                "additionalProperties": {
                  "format": "int64",
                  "type": "integer"
                },
                "type": "object"
              },
              "type": "object"
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "TrackingAuthority": {
        "properties": {
          "hash": {
            "type": "string"
          },
          "mediacenter": {
            "items": {
              "$ref": "#/components/schemas/Group"
            },
            "type": "array"
          },
          "organization": {
            "items": {
              "$ref": "#/components/schemas/Organization"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "TrackingNode": {
        "properties": {
          "authority": {
            "$ref": "#/components/schemas/TrackingAuthority"
          },
          "counts": {
            "additionalProperties": {
              "format": "int32",
              "type": "integer"
            },
            "type": "object"
          },
          "date": {
            "type": "string"
          },
          "fields": {
            "additionalProperties": {
              "type": "object"
            },
            "type": "object"
          },
          "groups": {
            "additionalProperties": {
              "additionalProperties": {
                "additionalProperties": {
                  "format": "int64",
                  "type": "integer"
                },
                "type": "object"
              },
              "type": "object"
            },
            "type": "object"
          },
          "node": {
            "$ref": "#/components/schemas/Node"
          }
        },
        "type": "object"
      },
      "UploadResult": {
        "properties": {
          "file": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "Usage": {
        "properties": {
          "appId": {
            "type": "string"
          },
          "appSubtype": {
            "type": "string"
          },
          "appType": {
            "type": "string"
          },
          "appUser": {
            "type": "string"
          },
          "appUserMail": {
            "type": "string"
          },
          "courseId": {
            "type": "string"
          },
          "created": {
            "format": "date-time",
            "type": "string"
          },
          "distinctPersons": {
            "format": "int32",
            "type": "integer"
          },
          "fromUsed": {
            "format": "date-time",
            "type": "string"
          },
          "guid": {
            "type": "string"
          },
          "modified": {
            "format": "date-time",
            "type": "string"
          },
          "nodeId": {
            "type": "string"
          },
          "parentNodeId": {
            "type": "string"
          },
          "resourceId": {
            "type": "string"
          },
          "toUsed": {
            "format": "date-time",
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "usageCounter": {
            "format": "int32",
            "type": "integer"
          },
          "usageVersion": {
            "type": "string"
          },
          "usageXmlParams": {
            "$ref": "#/components/schemas/Parameters"
          },
          "usageXmlParamsRaw": {
            "type": "string"
          }
        },
        "required": [
          "appId",
          "appUser",
          "appUserMail",
          "courseId",
          "nodeId",
          "parentNodeId",
          "resourceId",
          "usageVersion"
        ],
        "type": "object"
      },
      "Usages": {
        "properties": {
          "usages": {
            "items": {
              "$ref": "#/components/schemas/Usage"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "User": {
        "properties": {
          "authorityName": {
            "type": "string"
          },
          "authorityType": {
            "enum": [
              "USER",
              "GROUP",
              "OWNER",
              "EVERYONE",
              "GUEST"
            ],
            "type": "string"
          },
          "editable": {
            "type": "boolean"
          },
          "homeFolder": {
            "$ref": "#/components/schemas/NodeRef"
          },
          "organizations": {
            "items": {
              "$ref": "#/components/schemas/Organization"
            },
            "type": "array"
          },
          "profile": {
            "$ref": "#/components/schemas/UserProfile"
          },
          "properties": {
            "additionalProperties": {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "type": "object"
          },
          "quota": {
            "$ref": "#/components/schemas/UserQuota"
          },
          "sharedFolders": {
            "items": {
              "$ref": "#/components/schemas/NodeRef"
            },
            "type": "array"
          },
          "status": {
            "$ref": "#/components/schemas/UserStatus"
          },
          "userName": {
            "type": "string"
          }
        },
        "required": [
          "authorityName",
          "homeFolder"
        ],
        "type": "object"
      },
      "UserCredential": {
        "properties": {
          "newPassword": {
            "type": "string"
          },
          "oldPassword": {
            "type": "string"
          }
        },
        "required": [
          "newPassword"
        ],
        "type": "object"
      },
      "UserDataDTO": {
        "properties": {
          "firstName": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "mailbox": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "UserEntries": {
        "properties": {
          "pagination": {
            "$ref": "#/components/schemas/Pagination"
          },
          "users": {
            "items": {
              "$ref": "#/components/schemas/UserSimple"
            },
            "type": "array"
          }
        },
        "required": [
          "pagination",
          "users"
        ],
        "type": "object"
      },
      "UserEntry": {
        "properties": {
          "editProfile": {
            "type": "boolean"
          },
          "person": {
            "$ref": "#/components/schemas/User"
          }
        },
        "required": [
          "person"
        ],
        "type": "object"
      },
      "UserProfile": {
        "properties": {
          "about": {
            "type": "string"
          },
          "avatar": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "firstName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "primaryAffiliation": {
            "type": "string"
          },
          "skills": {
            "items": {
              "nullable": true,
              "type": "string"
            },
            "nullable": true,
            "type": "array"
          },
          "type": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "writeOnly": true
          },
          "types": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "vcard": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "UserProfileAppAuth": {
        "properties": {
          "about": {
            "type": "string"
          },
          "avatar": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "extendedAttributes": {
            "additionalProperties": {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "type": "object"
          },
          "firstName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "primaryAffiliation": {
            "type": "string"
          },
          "skills": {
            "items": {
              "nullable": true,
              "type": "string"
            },
            "nullable": true,
            "type": "array"
          },
          "type": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "writeOnly": true
          },
          "types": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "vcard": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "UserProfileEdit": {
        "properties": {
          "about": {
            "type": "string"
          },
          "avatar": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "firstName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "primaryAffiliation": {
            "type": "string"
          },
          "sizeQuota": {
            "format": "int64",
            "type": "integer"
          },
          "skills": {
            "items": {
              "nullable": true,
              "type": "string"
            },
            "nullable": true,
            "type": "array"
          },
          "type": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "writeOnly": true
          },
          "types": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "vcard": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "UserQuota": {
        "properties": {
          "enabled": {
            "type": "boolean"
          },
          "sizeCurrent": {
            "format": "int64",
            "type": "integer"
          },
          "sizeQuota": {
            "format": "int64",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "UserSimple": {
        "properties": {
          "authorityName": {
            "type": "string"
          },
          "authorityType": {
            "enum": [
              "USER",
              "GROUP",
              "OWNER",
              "EVERYONE",
              "GUEST"
            ],
            "type": "string"
          },
          "editable": {
            "type": "boolean"
          },
          "organizations": {
            "items": {
              "$ref": "#/components/schemas/Organization"
            },
            "type": "array"
          },
          "profile": {
            "$ref": "#/components/schemas/UserProfile"
          },
          "properties": {
            "additionalProperties": {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "type": "object"
          },
          "status": {
            "$ref": "#/components/schemas/UserStatus"
          },
          "userName": {
            "type": "string"
          }
        },
        "required": [
          "authorityName"
        ],
        "type": "object"
      },
      "UserStats": {
        "properties": {
          "collectionCount": {
            "format": "int32",
            "type": "integer"
          },
          "nodeCount": {
            "format": "int32",
            "type": "integer"
          },
          "nodeCountCC": {
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "UserStatus": {
        "properties": {
          "date": {
            "format": "int64",
            "type": "integer"
          },
          "status": {
            "enum": [
              "active",
              "blocked",
              "todelete"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "Value": {
        "properties": {
          "count": {
            "format": "int32",
            "type": "integer"
          },
          "value": {
            "type": "string"
          }
        },
        "required": [
          "count",
          "value"
        ],
        "type": "object"
      },
      "ValueParameters": {
        "properties": {
          "pattern": {
            "description": "prefix of the value (or \"-all-\" for all values)",
            "type": "string"
          },
          "property": {
            "type": "string"
          },
          "query": {
            "type": "string"
          }
        },
        "required": [
          "pattern",
          "property",
          "query"
        ],
        "type": "object"
      },
      "Values": {
        "properties": {
          "admin": {
            "$ref": "#/components/schemas/Admin"
          },
          "allowedLicenses": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "appleTouchIcon": {
            "type": "string"
          },
          "availableMds": {
            "items": {
              "$ref": "#/components/schemas/AvailableMds"
            },
            "type": "array"
          },
          "availableRepositories": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "banner": {
            "$ref": "#/components/schemas/Banner"
          },
          "branding": {
            "type": "boolean"
          },
          "collections": {
            "$ref": "#/components/schemas/Collections"
          },
          "customCSS": {
            "type": "string"
          },
          "customLicenses": {
            "items": {
              "$ref": "#/components/schemas/License"
            },
            "type": "array"
          },
          "customOptions": {
            "items": {
              "$ref": "#/components/schemas/ContextMenuEntry"
            },
            "type": "array"
          },
          "defaultLocation": {
            "type": "string"
          },
          "defaultPassword": {
            "type": "string"
          },
          "defaultUsername": {
            "type": "string"
          },
          "editProfile": {
            "type": "boolean"
          },
          "editProfileUrl": {
            "type": "string"
          },
          "extension": {
            "type": "string"
          },
          "favicon": {
            "type": "string"
          },
          "frontpage": {
            "$ref": "#/components/schemas/ConfigFrontpage"
          },
          "helpMenuOptions": {
            "items": {
              "$ref": "#/components/schemas/HelpMenuOptions"
            },
            "type": "array"
          },
          "helpUrl": {
            "type": "string"
          },
          "hideMainMenu": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "icons": {
            "items": {
              "$ref": "#/components/schemas/FontIcon"
            },
            "type": "array"
          },
          "images": {
            "items": {
              "$ref": "#/components/schemas/Image"
            },
            "type": "array"
          },
          "imprintUrl": {
            "type": "string"
          },
          "itemsPerRequest": {
            "format": "int32",
            "type": "integer"
          },
          "licenseAgreement": {
            "$ref": "#/components/schemas/LicenseAgreement"
          },
          "licenseDialogOnUpload": {
            "type": "boolean"
          },
          "loginAllowLocal": {
            "type": "boolean"
          },
          "loginDefaultLocation": {
            "type": "string"
          },
          "loginProviderTargetUrl": {
            "type": "string"
          },
          "loginProvidersUrl": {
            "type": "string"
          },
          "loginSilentMode": {
            "enum": [
              "none",
              "iframe",
              "redirect"
            ],
            "type": "string"
          },
          "loginUrl": {
            "type": "string"
          },
          "logout": {
            "$ref": "#/components/schemas/LogoutInfo"
          },
          "mainnav": {
            "$ref": "#/components/schemas/Mainnav"
          },
          "menuEntries": {
            "items": {
              "$ref": "#/components/schemas/MenuEntry"
            },
            "type": "array"
          },
          "nodeReport": {
            "type": "boolean"
          },
          "privacy": {
            "$ref": "#/components/schemas/ConfigPrivacy"
          },
          "privacyInformationUrl": {
            "type": "string"
          },
          "publish": {
            "$ref": "#/components/schemas/ConfigPublish"
          },
          "publishingNotice": {
            "type": "boolean"
          },
          "rating": {
            "$ref": "#/components/schemas/ConfigRating"
          },
          "recoverPasswordUrl": {
            "type": "string"
          },
          "register": {
            "$ref": "#/components/schemas/Register"
          },
          "remote": {
            "$ref": "#/components/schemas/ConfigRemote"
          },
          "rendering": {
            "$ref": "#/components/schemas/Rendering"
          },
          "reportProblem": {
            "$ref": "#/components/schemas/ConfigReportProblem"
          },
          "searchGroupResults": {
            "type": "boolean"
          },
          "searchSidenavMode": {
            "type": "string"
          },
          "searchViewType": {
            "format": "int32",
            "type": "integer"
          },
          "services": {
            "$ref": "#/components/schemas/Services"
          },
          "sessionExpiredDialog": {
            "$ref": "#/components/schemas/SessionExpiredDialog"
          },
          "simpleEdit": {
            "$ref": "#/components/schemas/SimpleEdit"
          },
          "siteTitle": {
            "type": "string"
          },
          "stream": {
            "$ref": "#/components/schemas/Stream"
          },
          "supportedLanguages": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "themeColors": {
            "$ref": "#/components/schemas/ConfigThemeColors"
          },
          "tutorial": {
            "$ref": "#/components/schemas/ConfigTutorial"
          },
          "upload": {
            "$ref": "#/components/schemas/ConfigUpload"
          },
          "userAffiliation": {
            "type": "boolean"
          },
          "userDisplayName": {
            "type": "string"
          },
          "userMenuOverrides": {
            "items": {
              "$ref": "#/components/schemas/ContextMenuEntry"
            },
            "type": "array"
          },
          "userSecondaryDisplayName": {
            "type": "string"
          },
          "whatsNewUrl": {
            "type": "string"
          },
          "workflow": {
            "$ref": "#/components/schemas/ConfigWorkflow"
          },
          "workspaceColumns": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "workspaceSharedToMeDefaultAll": {
            "type": "boolean"
          },
          "workspaceViewType": {
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "Variables": {
        "properties": {
          "current": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object"
          },
          "global": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "WebsiteInformation": {
        "properties": {
          "description": {
            "type": "string"
          },
          "duplicateNodes": {
            "items": {
              "$ref": "#/components/schemas/Node"
            },
            "type": "array"
          },
          "keywords": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "license": {
            "type": "string"
          },
          "page": {
            "type": "string"
          },
          "title": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "WidgetDataDTO": {
        "properties": {
          "caption": {
            "type": "string"
          },
          "id": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "WorkflowEventDTO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/NotificationEventDTO"
          },
          {
            "properties": {
              "node": {
                "$ref": "#/components/schemas/NodeDataDTO"
              },
              "userComment": {
                "type": "string"
              },
              "workflowStatus": {
                "type": "string"
              }
            },
            "type": "object"
          }
        ],
        "type": "object"
      },
      "WorkflowHistory": {
        "properties": {
          "comment": {
            "type": "string"
          },
          "editor": {
            "$ref": "#/components/schemas/UserSimple"
          },
          "receiver": {
            "items": {
              "$ref": "#/components/schemas/Authority"
            },
            "type": "array"
          },
          "status": {
            "type": "string"
          },
          "time": {
            "format": "int64",
            "type": "integer"
          }
        },
        "type": "object"
      }
    },
    "securitySchemes": {
      "basicAuth": {
        "scheme": "basic",
        "type": "http"
      },
      "cookieAuth": {
        "in": "cookie",
        "name": "JSESSIONID",
        "type": "apiKey"
      }
    }
  },
  "info": {
    "description": "The public restful API of the edu-sharing repository.",
    "title": "edu-sharing Repository REST API",
    "version": "1.1"
  },
  "openapi": "3.0.1",
  "paths": {
    "/_about": {
      "get": {
        "description": "Get all services provided by this API.",
        "operationId": "about",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/About"
                }
              }
            },
            "description": "OK."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization failed."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Fatal error occured."
          }
        },
        "security": [],
        "summary": "Discover the API.",
        "tags": [
          "ABOUT"
        ]
      }
    },
    "/_about/licenses": {
      "get": {
        "description": "Get information about used 3rd-party licenses.",
        "operationId": "licenses",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Licenses"
                }
              }
            },
            "description": "OK."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Fatal error occured."
          }
        },
        "security": [],
        "summary": "License information.",
        "tags": [
          "ABOUT"
        ]
      }
    },
    "/_about/status/{mode}": {
      "get": {
        "description": "returns http status 200 when ok",
        "operationId": "status",
        "parameters": [
          {
            "in": "path",
            "name": "mode",
            "required": true,
            "schema": {
              "enum": [
                "SEARCH",
                "SERVICE"
              ],
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "timeoutSeconds",
            "schema": {
              "default": 10,
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "OK."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Preconditions are not present."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization failed."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Session user has insufficient rights to perform this operation."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Ressources are not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Fatal error occured."
          }
        },
        "security": [],
        "summary": "status of repo services",
        "tags": [
          "ABOUT"
        ]
      }
    },
    "/admin/v1/applications": {
      "get": {
        "description": "List all registered applications.",
        "operationId": "getApplications",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Application"
                  },
                  "type": "array"
                }
              }
            },
            "description": "OK."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Preconditions are not present."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization failed."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Session user has insufficient rights to perform this operation."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Ressources are not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Fatal error occured."
          }
        },
        "summary": "list applications",
        "tags": [
          "ADMIN v1"
        ]
      },
      "put": {
        "description": "register the specified application.",
        "operationId": "addApplication_1",
        "parameters": [
          {
            "description": "Remote application metadata url",
            "in": "query",
            "name": "url",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "OK."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Preconditions are not present."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization failed."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Session user has insufficient rights to perform this operation."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Ressources are not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Fatal error occured."
          }
        },
        "summary": "register/add an application",
        "tags": [
          "ADMIN v1"
        ]
      }
    },
    "/admin/v1/applications/xml": {
      "put": {
        "description": "register the xml file provided.",
        "operationId": "addApplication",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "properties": {
                  "xml": {
                    "description": "XML file for app to register",
                    "type": "object"
                  }
                },
                "required": [
                  "xml"
                ],
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "OK."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Preconditions are not present."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization failed."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Session user has insufficient rights to perform this operation."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Ressources are not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Fatal error occured."
          }
        },
        "summary": "register/add an application via xml file",
        "tags": [
          "ADMIN v1"
        ]
      }
    },
    "/admin/v1/applications/{id}": {
      "delete": {
        "description": "remove the specified application.",
        "operationId": "removeApplication",
        "parameters": [
          {
            "description": "Application id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "OK."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Preconditions are not present."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization failed."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Session user has insufficient rights to perform this operation."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Ressources are not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Fatal error occured."
          }
        },
        "summary": "remove an application",
        "tags": [
          "ADMIN v1"
        ]
      }
    },
    "/admin/v1/applications/{xml}": {
      "get": {
        "description": "list any xml properties (like from homeApplication.properties.xml)",
        "operationId": "getApplicationXML",
        "parameters": [
          {
            "description": "Properties Filename (*.xml)",
            "in": "path",
            "name": "xml",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "OK."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Preconditions are not present."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization failed."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Session user has insufficient rights to perform this operation."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Ressources are not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Fatal error occured."
          }
        },
        "summary": "list any xml properties (like from homeApplication.properties.xml)",
        "tags": [
          "ADMIN v1"
        ]
      },
      "put": {
        "description": "if the key exists, it will be overwritten. Otherwise, it will be created. You only need to transfer keys you want to edit",
        "operationId": "updateApplicationXML",
        "parameters": [
          {
            "description": "Properties Filename (*.xml)",
            "in": "path",
            "name": "xml",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "additionalProperties": {
                  "type": "string"
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "OK."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Preconditions are not present."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization failed."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Session user has insufficient rights to perform this operation."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Ressources are not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Fatal error occured."
          }
        },
        "summary": "edit any properties xml (like homeApplication.properties.xml)",
        "tags": [
          "ADMIN v1"
        ]
      }
    },
    "/admin/v1/applyTemplate": {
      "post": {
        "description": "apply a folder template.",
        "operationId": "applyTemplate",
        "parameters": [
          {
            "description": "Template Filename",
            "in": "query",
            "name": "template",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Group name (authority name)",
            "in": "query",
            "name": "group",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Folder name",
            "in": "query",
            "name": "folder",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "OK."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Preconditions are not present."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization failed."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Session user has insufficient rights to perform this operation."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Ressources are not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Fatal error occured."
          }
        },
        "summary": "apply a folder template",
        "tags": [
          "ADMIN v1"
        ]
      }
    },
    "/admin/v1/authenticate/{authorityName}": {
      "post": {
        "operationId": "switchAuthority",
        "parameters": [
          {
            "description": "the authority to use (must be a person)",
            "in": "path",
            "name": "authorityName",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "OK."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Preconditions are not present."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization failed."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Session user has insufficient rights to perform this operation."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Ressources are not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Fatal error occured."
          }
        },
        "summary": "switch the session to a known authority name",
        "tags": [
          "ADMIN v1"
        ]
      }
    },
    "/admin/v1/cache/cacheEntries/{id}": {
      "get": {
        "description": "Get entries of a cache.",
        "operationId": "getCacheEntries",
        "parameters": [
          {
            "description": "Id/bean name of the cache",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "OK."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Preconditions are not present."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization failed."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Session user has insufficient rights to perform this operation."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Ressources are not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Fatal error occured."
          }
        },
        "summary": "Get entries of a cache",
        "tags": [
          "ADMIN v1"
        ]
      }
    },
    "/admin/v1/cache/cacheInfo/{id}": {
      "get": {
        "description": "Get information about a cache.",
        "operationId": "getCacheInfo",
        "parameters": [
          {
            "description": "Id/bean name of the cache",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CacheInfo"
                }
              }
            },
            "description": "OK."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Preconditions are not present."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization failed."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Session user has insufficient rights to perform this operation."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Ressources are not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Fatal error occured."
          }
        },
        "summary": "Get information about a cache",
        "tags": [
          "ADMIN v1"
        ]
      }
    },
    "/admin/v1/cache/clearCache": {
      "post": {
        "description": "clear cache",
        "operationId": "clearCache",
        "parameters": [
          {
            "description": "bean",
            "in": "query",
            "name": "bean",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "OK."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Preconditions are not present."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization failed."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Session user has insufficient rights to perform this operation."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Ressources are not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Fatal error occured."
          }
        },
        "summary": "clear cache",
        "tags": [
          "ADMIN v1"
        ]
      }
    },
    "/admin/v1/cache/removeCacheEntry": {
      "post": {
        "description": "remove cache entry",
        "operationId": "removeCacheEntry",
        "parameters": [
          {
            "description": "cacheIndex",
            "in": "query",
            "name": "cacheIndex",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "bean",
            "in": "query",
            "name": "bean",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "OK."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Preconditions are not present."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization failed."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Session user has insufficient rights to perform this operation."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Ressources are not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Fatal error occured."
          }
        },
        "summary": "remove cache entry",
        "tags": [
          "ADMIN v1"
        ]
      }
    },
    "/admin/v1/catalina": {
      "get": {
        "description": "Get catalina.out log.",
        "operationId": "getCatalinaOut",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                }
              }
            },
            "description": "OK."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Preconditions are not present."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization failed."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Session user has insufficient rights to perform this operation."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Ressources are not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Fatal error occured."
          }
        },
        "summary": "Get last info from catalina out",
        "tags": [
          "ADMIN v1"
        ]
      }
    },
    "/admin/v1/clusterInfo": {
      "get": {
        "description": "Get information the Cluster",
        "operationId": "getCluster",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CacheCluster"
                }
              }
            },
            "description": "OK."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Preconditions are not present."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization failed."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Session user has insufficient rights to perform this operation."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Ressources are not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Fatal error occured."
          }
        },
        "summary": "Get information about the Cluster",
        "tags": [
          "ADMIN v1"
        ]
      }
    },
    "/admin/v1/clusterInfos": {
      "get": {
        "description": "Get information the Cluster",
        "operationId": "getClusters",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CacheCluster"
                }
              }
            },
            "description": "OK."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Preconditions are not present."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization failed."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Session user has insufficient rights to perform this operation."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Ressources are not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Fatal error occured."
          }
        },
        "summary": "Get information about the Cluster",
        "tags": [
          "ADMIN v1"
        ]
      }
    },
    "/admin/v1/config/merged": {
      "get": {
        "description": "Get the fully merged & parsed (lightbend) backend config",
        "operationId": "getLightbendConfig",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "OK."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Preconditions are not present."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization failed."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Session user has insufficient rights to perform this operation."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Ressources are not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Fatal error occured."
          }
        },
        "tags": [
          "ADMIN v1"
        ]
      }
    },
    "/admin/v1/configFile": {
      "get": {
        "operationId": "getConfigFile",
        "parameters": [
          {
            "description": "filename to fetch",
            "in": "query",
            "name": "filename",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "path prefix this file belongs to",
            "in": "query",
            "name": "pathPrefix",
            "required": true,
            "schema": {
              "enum": [
                "node",
                "cluster/applications",
                "cluster",
                "defaults",
                "defaults/metadatasets",
                "defaults/mailtemplates",
                "defaults/database"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "OK."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Preconditions are not present."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization failed."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Session user has insufficient rights to perform this operation."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Ressources are not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Fatal error occured."
          }
        },
        "summary": "get a base system config file (e.g. edu-sharing.conf)",
        "tags": [
          "ADMIN v1"
        ]
      },
      "put": {
        "operationId": "updateConfigFile",
        "parameters": [
          {
            "description": "filename to fetch",
            "in": "query",
            "name": "filename",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "path prefix this file belongs to",
            "in": "query",
            "name": "pathPrefix",
            "required": true,
            "schema": {
              "enum": [
                "node",
                "cluster/applications",
                "cluster",
                "defaults",
                "defaults/metadatasets",
                "defaults/mailtemplates",
                "defaults/database"
              ],
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "string"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "OK."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Preconditions are not present."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization failed."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Session user has insufficient rights to perform this operation."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Ressources are not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Fatal error occured."
          }
        },
        "summary": "update a base system config file (e.g. edu-sharing.conf)",
        "tags": [
          "ADMIN v1"
        ]
      }
    },
    "/admin/v1/deletePersons": {
      "put": {
        "description": "delete the given persons. Their status must be set to \"todelete\"",
        "operationId": "deletePerson",
        "parameters": [
          {
            "description": "names of the users to delete",
            "in": "query",
            "name": "username",
            "required": true,
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PersonDeleteOptions"
              }
            }
          },
          "description": "options object what and how to delete user contents"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PersonReport"
                }
              }
            },
            "description": "OK."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Preconditions are not present."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization failed."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Session user has insufficient rights to perform this operation."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Ressources are not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Fatal error occured."
          }
        },
        "summary": "delete persons",
        "tags": [
          "ADMIN v1"
        ]
      }
    },
    "/admin/v1/elastic": {
      "get": {
        "operationId": "searchByElasticDSL",
        "parameters": [
          {
            "description": "dsl query (json encoded)",
            "in": "query",
            "name": "dsl",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchResultElastic"
                }
              }
            },
            "description": "OK."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Preconditions are not present."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization failed."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Session user has insufficient rights to perform this operation."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Ressources are not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Fatal error occured."
          }
        },
        "summary": "Search for custom elastic DSL query",
        "tags": [
          "ADMIN v1"
        ]
      }
    },
    "/admin/v1/export/lom": {
      "get": {
        "description": "Export Nodes with LOM Metadata Format.",
        "operationId": "exportLOM",
        "parameters": [
          {
            "description": "filterQuery",
            "in": "query",
            "name": "filterQuery",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "targetDir",
            "in": "query",
            "name": "targetDir",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "targetDir",
            "in": "query",
            "name": "format",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "OK."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Preconditions are not present."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization failed."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Session user has insufficient rights to perform this operation."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Ressources are not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Fatal error occured."
          }
        },
        "summary": "Export Nodes with given Metadata Format",
        "tags": [
          "ADMIN v1"
        ]
      }
    },
    "/admin/v1/globalGroups": {
      "get": {
        "description": "Get global groups (groups across repositories).",
        "operationId": "getGlobalGroups",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Group"
                  },
                  "type": "array"
                }
              }
            },
            "description": "OK."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Preconditions are not present."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization failed."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Session user has insufficient rights to perform this operation."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Ressources are not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Fatal error occured."
          }
        },
        "summary": "Get global groups",
        "tags": [
          "ADMIN v1"
        ]
      }
    },
    "/admin/v1/import/collections": {
      "post": {
        "description": "xml file must be structured as defined by the xsd standard",
        "operationId": "importCollections",
        "parameters": [
          {
            "description": "Id of the root to initialize the collection structure, or '-root-' to inflate them on the first level",
            "in": "query",
            "name": "parent",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "properties": {
                  "xml": {
                    "description": "XML file to parse (or zip file containing exactly 1 xml file to parse)",
                    "type": "object"
                  }
                },
                "required": [
                  "xml"
                ],
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionsResult"
                }
              }
            },
            "description": "OK."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Preconditions are not present."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization failed."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Session user has insufficient rights to perform this operation."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Ressources are not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Fatal error occured."
          }
        },
        "summary": "import collections via a xml file",
        "tags": [
          "ADMIN v1"
        ]
      }
    },
    "/admin/v1/import/excel": {
      "post": {
        "description": "Import excel data.",
        "operationId": "importExcel",
        "parameters": [
          {
            "description": "parent",
            "in": "query",
            "name": "parent",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "addToCollection",
            "in": "query",
            "name": "addToCollection",
            "required": true,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "properties": {
                  "excel": {
                    "description": "Excel file to import",
                    "type": "object"
                  }
                },
                "required": [
                  "excel"
                ],
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExcelResult"
                }
              }
            },
            "description": "OK."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Preconditions are not present."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization failed."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Session user has insufficient rights to perform this operation."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Ressources are not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Fatal error occured."
          }
        },
        "summary": "Import excel data",
        "tags": [
          "ADMIN v1"
        ]
      }
    },
    "/admin/v1/import/oai": {
      "delete": {
        "description": "Remove deleted imports.",
        "operationId": "removeOaiImports",
        "parameters": [
          {
            "description": "base url",
            "in": "query",
            "name": "baseUrl",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "set/catalog id",
            "in": "query",
            "name": "set",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "metadata prefix",
            "in": "query",
            "name": "metadataPrefix",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "OK."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Preconditions are not present."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization failed."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Session user has insufficient rights to perform this operation."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Ressources are not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Fatal error occured."
          }
        },
        "summary": "Remove deleted imports",
        "tags": [
          "ADMIN v1"
        ]
      },
      "post": {
        "description": "Import oai data.",
        "operationId": "importOai",
        "parameters": [
          {
            "description": "base url",
            "in": "query",
            "name": "baseUrl",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "set/catalog id",
            "in": "query",
            "name": "set",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "metadata prefix",
            "in": "query",
            "name": "metadataPrefix",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "id metadataset",
            "in": "query",
            "name": "metadataset",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "importer job class name (call /classes to obtain a list)",
            "in": "query",
            "name": "className",
            "required": true,
            "schema": {
              "default": "org.edu_sharing.repository.server.jobs.quartz.ImporterJob",
              "type": "string"
            }
          },
          {
            "description": "importer class name (call /classes to obtain a list)",
            "in": "query",
            "name": "importerClassName",
            "schema": {
              "default": "org.edu_sharing.repository.server.importer.OAIPMHLOMImporter",
              "type": "string"
            }
          },
          {
            "description": "RecordHandler class name",
            "in": "query",
            "name": "recordHandlerClassName",
            "schema": {
              "default": "org.edu_sharing.repository.server.importer.RecordHandlerLOM",
              "type": "string"
            }
          },
          {
            "description": "BinaryHandler class name (may be empty for none)",
            "in": "query",
            "name": "binaryHandlerClassName",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "PersistentHandlerClassName class name (may be empty for none)",
            "in": "query",
            "name": "persistentHandlerClassName",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "url to file",
            "in": "query",
            "name": "fileUrl",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "OAI Ids to import, can be null than the whole set will be imported",
            "in": "query",
            "name": "oaiIds",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "force Update of all entries",
            "in": "query",
            "name": "forceUpdate",
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "description": "from: datestring yyyy-MM-dd)",
            "in": "query",
            "name": "from",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "until: datestring yyyy-MM-dd)",
            "in": "query",
            "name": "until",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "periodInDays: internal sets from and until. only effective if from/until not set)",
            "in": "query",
            "name": "periodInDays",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "OK."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Preconditions are not present."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization failed."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Session user has insufficient rights to perform this operation."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Ressources are not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Fatal error occured."
          }
        },
        "summary": "Import oai data",
        "tags": [
          "ADMIN v1"
        ]
      }
    },
    "/admin/v1/import/oai/classes": {
      "get": {
        "description": "Get available importer classes for OAI import.",
        "operationId": "getOaiClasses",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                }
              }
            },
            "description": "OK."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Preconditions are not present."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization failed."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Session user has insufficient rights to perform this operation."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Ressources are not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Fatal error occured."
          }
        },
        "summary": "Get OAI class names",
        "tags": [
          "ADMIN v1"
        ]
      }
    },
    "/admin/v1/import/oai/xml": {
      "post": {
        "operationId": "importOaiXML",
        "parameters": [
          {
            "description": "RecordHandler class name",
            "in": "query",
            "name": "recordHandlerClassName",
            "schema": {
              "default": "org.edu_sharing.repository.server.importer.RecordHandlerLOM",
              "type": "string"
            }
          },
          {
            "description": "BinaryHandler class name (may be empty for none)",
            "in": "query",
            "name": "binaryHandlerClassName",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "properties": {
                  "xml": {
                    "type": "object"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Node"
                }
              }
            },
            "description": "OK."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Preconditions are not present."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization failed."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Session user has insufficient rights to perform this operation."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Ressources are not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Fatal error occured."
          }
        },
        "summary": "Import single xml via oai (for testing)",
        "tags": [
          "ADMIN v1"
        ]
      }
    },
    "/admin/v1/import/refreshCache/{folder}": {
      "post": {
        "description": "Refresh importer cache.",
        "operationId": "refreshCache",
        "parameters": [
          {
            "description": "refresh cache root folder id",
            "in": "path",
            "name": "folder",
            "required": true,
            "schema": {
              "default": "-userhome-",
              "type": "string"
            }
          },
          {
            "description": "sticky",
            "in": "query",
            "name": "sticky",
            "required": true,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "OK."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Preconditions are not present."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization failed."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Session user has insufficient rights to perform this operation."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Ressources are not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Fatal error occured."
          }
        },
        "summary": "Refresh cache",
        "tags": [
          "ADMIN v1"
        ]
      }
    },
    "/admin/v1/job/{jobClass}": {
      "post": {
        "description": "Start a Job.",
        "operationId": "startJob",
        "parameters": [
          {
            "description": "jobClass",
            "in": "path",
            "name": "jobClass",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "additionalProperties": {
                  "type": "object"
                },
                "type": "object"
              }
            }
          },
          "description": "params",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "OK."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Preconditions are not present."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization failed."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Session user has insufficient rights to perform this operation."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Ressources are not found."
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Duplicate Entity/Node conflict (Node with same name exists)"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Fatal error occured."
          }
        },
        "summary": "Start a Job.",
        "tags": [
          "ADMIN v1"
        ]
      }
    },
    "/admin/v1/job/{jobClass}/sync": {
      "post": {
        "description": "Start a Job. Wait for the result synchronously",
        "operationId": "startJobSync",
        "parameters": [
          {
            "description": "jobClass",
            "in": "path",
            "name": "jobClass",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "additionalProperties": {
                  "type": "object"
                },
                "type": "object"
              }
            }
          },
          "description": "params",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "OK."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Preconditions are not present."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization failed."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Session user has insufficient rights to perform this operation."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Ressources are not found."
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Duplicate Entity/Node conflict (Node with same name exists)"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Fatal error occured."
          }
        },
        "summary": "Start a Job.",
        "tags": [
          "ADMIN v1"
        ]
      }
    },
    "/admin/v1/jobs": {
      "get": {
        "operationId": "getJobs",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/JobInfo"
                  },
                  "type": "array"
                }
              }
            },
            "description": "OK."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Preconditions are not present."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization failed."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Session user has insufficient rights to perform this operation."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Ressources are not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Fatal error occured."
          }
        },
        "summary": "get all running jobs",
        "tags": [
          "ADMIN v1"
        ]
      }
    },
    "/admin/v1/jobs/all": {
      "get": {
        "operationId": "getAllJobs",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/JobDescription"
                  },
                  "type": "array"
                }
              }
            },
            "description": "OK."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Preconditions are not present."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization failed."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Session user has insufficient rights to perform this operation."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Ressources are not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Fatal error occured."
          }
        },
        "summary": "get all available jobs",
        "tags": [
          "ADMIN v1"
        ]
      }
    },
    "/admin/v1/jobs/{job}": {
      "delete": {
        "operationId": "cancelJob",
        "parameters": [
          {
            "in": "path",
            "name": "job",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "force",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "OK."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Preconditions are not present."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization failed."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Session user has insufficient rights to perform this operation."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Ressources are not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Fatal error occured."
          }
        },
        "summary": "cancel a running job",
        "tags": [
          "ADMIN v1"
        ]
      }
    },
    "/admin/v1/log/config": {
      "get": {
        "operationId": "getLoggingRuntime",
        "parameters": [
          {
            "description": "filters",
            "in": "query",
            "name": "filters",
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "description": "onlyConfig if true only loggers defined in log4j.xml or at runtime are returned",
            "in": "query",
            "name": "onlyConfig",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoggerConfigResult"
                }
              }
            },
            "description": "OK."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Preconditions are not present."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization failed."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Session user has insufficient rights to perform this operation."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Ressources are not found."
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Duplicate Entity/Node conflict (Node with same name exists)"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Fatal error occured."
          }
        },
        "summary": "get the logger config",
        "tags": [
          "ADMIN v1"
        ]
      },
      "post": {
        "description": "Root appenders are used. Check the appender treshold.",
        "operationId": "changeLogging",
        "parameters": [
          {
            "description": "name",
            "in": "query",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "loglevel",
            "in": "query",
            "name": "loglevel",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "appender",
            "in": "query",
            "name": "appender",
            "schema": {
              "default": "ConsoleAppender",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "OK."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Preconditions are not present."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization failed."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Session user has insufficient rights to perform this operation."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Ressources are not found."
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Duplicate Entity/Node conflict (Node with same name exists)"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Fatal error occured."
          }
        },
        "summary": "Change the loglevel for classes at runtime.",
        "tags": [
          "ADMIN v1"
        ]
      }
    },
    "/admin/v1/lucene": {
      "get": {
        "description": "e.g. @cm\\:name:\"*\"",
        "operationId": "searchByLucene",
        "parameters": [
          {
            "description": "query",
            "in": "query",
            "name": "query",
            "schema": {
              "default": "@cm\\:name:\"*\"",
              "type": "string"
            }
          },
          {
            "description": "maximum items per page",
            "in": "query",
            "name": "maxItems",
            "schema": {
              "default": 10,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "skip a number of items",
            "in": "query",
            "name": "skipCount",
            "schema": {
              "default": 0,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "sort properties",
            "in": "query",
            "name": "sortProperties",
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "description": "sort ascending, true if not set. Use multiple values to change the direction according to the given property at the same index",
            "in": "query",
            "name": "sortAscending",
            "schema": {
              "items": {
                "type": "boolean"
              },
              "type": "array"
            }
          },
          {
            "description": "property filter for result nodes (or \"-all-\" for all properties)",
            "in": "query",
            "name": "propertyFilter",
            "schema": {
              "items": {
                "default": "-all-",
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "description": "store, workspace or archive",
            "in": "query",
            "name": "store",
            "schema": {
              "enum": [
                "Workspace",
                "Archive"
              ],
              "type": "string"
            }
          },
          {
            "description": "authority scope to search for",
            "in": "query",
            "name": "authorityScope",
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchResult"
                }
              }
            },
            "description": "OK."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Preconditions are not present."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization failed."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Session user has insufficient rights to perform this operation."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Ressources are not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Fatal error occured."
          }
        },
        "summary": "Search for custom lucene query",
        "tags": [
          "ADMIN v1"
        ]
      }
    },
    "/admin/v1/lucene/export": {
      "get": {
        "description": "e.g. @cm\\:name:\"*\"",
        "operationId": "exportByLucene",
        "parameters": [
          {
            "description": "query",
            "in": "query",
            "name": "query",
            "schema": {
              "default": "@cm\\:name:\"*\"",
              "type": "string"
            }
          },
          {
            "description": "sort properties",
            "in": "query",
            "name": "sortProperties",
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "description": "sort ascending, true if not set. Use multiple values to change the direction according to the given property at the same index",
            "in": "query",
            "name": "sortAscending",
            "schema": {
              "items": {
                "type": "boolean"
              },
              "type": "array"
            }
          },
          {
            "description": "properties to fetch, use parent::<property> to include parent property values",
            "in": "query",
            "name": "properties",
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "description": "store, workspace or archive",
            "in": "query",
            "name": "store",
            "schema": {
              "enum": [
                "Workspace",
                "Archive"
              ],
              "type": "string"
            }
          },
          {
            "description": "authority scope to search for",
            "in": "query",
            "name": "authorityScope",
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "OK."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Preconditions are not present."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization failed."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Session user has insufficient rights to perform this operation."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Ressources are not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Fatal error occured."
          }
        },
        "summary": "Search for custom lucene query and choose specific properties to load",
        "tags": [
          "ADMIN v1"
        ]
      }
    },
    "/admin/v1/mail/{receiver}/{template}": {
      "post": {
        "description": "Sends the given template as a test to the given receiver.",
        "operationId": "testMail",
        "parameters": [
          {
            "in": "path",
            "name": "receiver",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "template",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "OK."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Preconditions are not present."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization failed."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Session user has insufficient rights to perform this operation."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Ressources are not found."
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Duplicate Entity/Node conflict (Node with same name exists)"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Fatal error occured."
          }
        },
        "summary": "Test a mail template",
        "tags": [
          "ADMIN v1"
        ]
      }
    },
    "/admin/v1/nodes/preview/{node}": {
      "get": {
        "description": "create preview.",
        "operationId": "createPreview",
        "parameters": [
          {
            "description": "ID of node",
            "in": "path",
            "name": "node",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "OK."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Preconditions are not present."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization failed."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Session user has insufficient rights to perform this operation."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Ressources are not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Fatal error occured."
          }
        },
        "summary": "create preview.",
        "tags": [
          "ADMIN v1"
        ]
      }
    },
    "/admin/v1/plugins": {
      "get": {
        "operationId": "getEnabledPlugins",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/PluginStatus"
                  },
                  "type": "array"
                }
              }
            },
            "description": "OK."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Preconditions are not present."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization failed."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Session user has insufficient rights to perform this operation."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Ressources are not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Fatal error occured."
          }
        },
        "summary": "get enabled system plugins",
        "tags": [
          "ADMIN v1"
        ]
      }
    },
    "/admin/v1/propertyToMds": {
      "get": {
        "description": "Get a Mds Valuespace for all values of the given properties.",
        "operationId": "getPropertyToMds",
        "parameters": [
          {
            "description": "one or more properties",
            "in": "query",
            "name": "properties",
            "required": true,
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "OK."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Preconditions are not present."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization failed."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Session user has insufficient rights to perform this operation."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Ressources are not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Fatal error occured."
          }
        },
        "summary": "Get a Mds Valuespace for all values of the given properties",
        "tags": [
          "ADMIN v1"
        ]
      }
    },
    "/admin/v1/refreshAppInfo": {
      "post": {
        "description": "Refresh the application info.",
        "operationId": "refreshAppInfo",
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "OK."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Preconditions are not present."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization failed."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Session user has insufficient rights to perform this operation."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Ressources are not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Fatal error occured."
          }
        },
        "summary": "refresh app info",
        "tags": [
          "ADMIN v1"
        ]
      }
    },
    "/admin/v1/repositoryConfig": {
      "get": {
        "operationId": "getConfig",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RepositoryConfig"
                }
              }
            },
            "description": "OK."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Preconditions are not present."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization failed."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Session user has insufficient rights to perform this operation."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Ressources are not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Fatal error occured."
          }
        },
        "summary": "get the repository config object",
        "tags": [
          "ADMIN v1"
        ]
      },
      "put": {
        "operationId": "setConfig",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RepositoryConfig"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "OK."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Preconditions are not present."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization failed."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Session user has insufficient rights to perform this operation."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Ressources are not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Fatal error occured."
          }
        },
        "summary": "set/update the repository config object",
        "tags": [
          "ADMIN v1"
        ]
      }
    },
    "/admin/v1/repositoryConfig/enforceContext": {
      "delete": {
        "operationId": "clearEnforcedContext",
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "OK."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Preconditions are not present."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization failed."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Session user has insufficient rights to perform this operation."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Ressources are not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Fatal error occured."
          }
        },
        "summary": "set/update the repository config object",
        "tags": [
          "ADMIN v1"
        ]
      }
    },
    "/admin/v1/repositoryConfig/enforceContext/{contextId}": {
      "put": {
        "operationId": "enforceContext",
        "parameters": [
          {
            "in": "path",
            "name": "contextId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "OK."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Preconditions are not present."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization failed."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Session user has insufficient rights to perform this operation."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Ressources are not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Fatal error occured."
          }
        },
        "summary": "set/update the repository config object",
        "tags": [
          "ADMIN v1"
        ]
      }
    },
    "/admin/v1/serverUpdate/list": {
      "get": {
        "description": "list available update tasks",
        "operationId": "serverUpdateList",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/ServerUpdateInfo"
                  },
                  "type": "array"
                }
              }
            },
            "description": "OK."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Preconditions are not present."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization failed."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Session user has insufficient rights to perform this operation."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Ressources are not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Fatal error occured."
          }
        },
        "summary": "list available update tasks",
        "tags": [
          "ADMIN v1"
        ]
      }
    },
    "/admin/v1/serverUpdate/run/{id}": {
      "post": {
        "description": "Run a specific update task (test or full update).",
        "operationId": "serverUpdateList_1",
        "parameters": [
          {
            "description": "Id of the update task",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Actually execute (if false, just runs in test mode)",
            "in": "query",
            "name": "execute",
            "required": true,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/ServerUpdateInfo"
                  },
                  "type": "array"
                }
              }
            },
            "description": "OK."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Preconditions are not present."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization failed."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Session user has insufficient rights to perform this operation."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Ressources are not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Fatal error occured."
          }
        },
        "summary": "Run an update tasks",
        "tags": [
          "ADMIN v1"
        ]
      }
    },
    "/admin/v1/statistics": {
      "get": {
        "description": "get statistics.",
        "operationId": "getStatistics",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdminStatistics"
                }
              }
            },
            "description": "OK."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Preconditions are not present."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization failed."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Session user has insufficient rights to perform this operation."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Ressources are not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Fatal error occured."
          }
        },
        "summary": "get statistics",
        "tags": [
          "ADMIN v1"
        ]
      }
    },
    "/admin/v1/toolpermissions/add/{name}": {
      "post": {
        "operationId": "addToolpermission",
        "parameters": [
          {
            "description": "Name/ID of toolpermission",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Node"
                }
              }
            },
            "description": "OK."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Preconditions are not present."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization failed."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Session user has insufficient rights to perform this operation."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Ressources are not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Fatal error occured."
          }
        },
        "summary": "add a new toolpermissions",
        "tags": [
          "ADMIN v1"
        ]
      }
    },
    "/admin/v1/toolpermissions/{authority}": {
      "get": {
        "description": "Returns explicit (rights set for this authority) + effective (resulting rights for this authority) toolpermission",
        "operationId": "getAllToolpermissions",
        "parameters": [
          {
            "description": "Authority to load (user or group)",
            "in": "path",
            "name": "authority",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "OK."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Preconditions are not present."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization failed."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Session user has insufficient rights to perform this operation."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Ressources are not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Fatal error occured."
          }
        },
        "summary": "get all toolpermissions for an authority",
        "tags": [
          "ADMIN v1"
        ]
      },
      "put": {
        "description": "If a toolpermission has status UNDEFINED, it will remove explicit permissions for the authority",
        "operationId": "setToolpermissions",
        "parameters": [
          {
            "description": "Authority to set (user or group)",
            "in": "path",
            "name": "authority",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "additionalProperties": {
                  "enum": [
                    "ALLOWED",
                    "DENIED",
                    "UNDEFINED"
                  ],
                  "type": "string"
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "OK."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Preconditions are not present."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization failed."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Session user has insufficient rights to perform this operation."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Ressources are not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Fatal error occured."
          }
        },
        "summary": "set toolpermissions for an authority",
        "tags": [
          "ADMIN v1"
        ]
      }
    },
    "/admin/v1/upload/temp/{name}": {
      "put": {
        "description": "Upload a file to tomcat temp directory, to use it on the server (e.g. an update)",
        "operationId": "uploadTemp",
        "parameters": [
          {
            "description": "filename",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "properties": {
                  "file": {
                    "description": "file to upload",
                    "type": "object"
                  }
                },
                "required": [
                  "file"
                ],
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UploadResult"
                }
              }
            },
            "description": "OK."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Preconditions are not present."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization failed."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Session user has insufficient rights to perform this operation."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Ressources are not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Fatal error occured."
          }
        },
        "summary": "Upload a file",
        "tags": [
          "ADMIN v1"
        ]
      }
    },
    "/admin/v1/version": {
      "get": {
        "description": "detailed information about the running system version",
        "operationId": "getVersion",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "OK."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Preconditions are not present."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization failed."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Session user has insufficient rights to perform this operation."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Ressources are not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Fatal error occured."
          }
        },
        "summary": "get detailed version information",
        "tags": [
          "ADMIN v1"
        ]
      }
    },
    "/archive/v1/purge/{repository}": {
      "delete": {
        "description": "Searches for archive nodes.",
        "operationId": "purge",
        "parameters": [
          {
            "description": "ID of repository (or \"-home-\" for home repository)",
            "in": "path",
            "name": "repository",
            "required": true,
            "schema": {
              "default": "-home-",
              "type": "string"
            }
          },
          {
            "description": "archived node",
            "in": "query",
            "name": "archivedNodeIds",
            "required": true,
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "OK."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Preconditions are not present."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization failed."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Session user has insufficient rights to perform this operation."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Ressources are not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Fatal error occured."
          }
        },
        "summary": "Searches for archive nodes.",
        "tags": [
          "ARCHIVE v1"
        ]
      }
    },
    "/archive/v1/restore/{repository}": {
      "post": {
        "description": "restores archived nodes. restoreStatus can have the following values: FALLBACK_PARENT_NOT_EXISTS, FALLBACK_PARENT_NO_PERMISSION, DUPLICATENAME, FINE",
        "operationId": "restore",
        "parameters": [
          {
            "description": "ID of repository (or \"-home-\" for home repository)",
            "in": "path",
            "name": "repository",
            "required": true,
            "schema": {
              "default": "-home-",
              "type": "string"
            }
          },
          {
            "description": "archived nodes",
            "in": "query",
            "name": "archivedNodeIds",
            "required": true,
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "description": "to target",
            "in": "query",
            "name": "target",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestoreResults"
                }
              }
            },
            "description": "OK."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Preconditions are not present."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization failed."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Session user has insufficient rights to perform this operation."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Ressources are not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Fatal error occured."
          }
        },
        "summary": "restore archived nodes.",
        "tags": [
          "ARCHIVE v1"
        ]
      }
    },
    "/archive/v1/search/{repository}/{pattern}": {
      "get": {
        "description": "Searches for archive nodes.",
        "operationId": "searchArchive",
        "parameters": [
          {
            "description": "ID of repository (or \"-home-\" for home repository)",
            "in": "path",
            "name": "repository",
            "required": true,
            "schema": {
              "default": "-home-",
              "type": "string"
            }
          },
          {
            "description": "search pattern",
            "in": "path",
            "name": "pattern",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "maximum items per page",
            "in": "query",
            "name": "maxItems",
            "schema": {
              "default": 10,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "skip a number of items",
            "in": "query",
            "name": "skipCount",
            "schema": {
              "default": 0,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "sort properties",
            "in": "query",
            "name": "sortProperties",
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "description": "sort ascending",
            "in": "query",
            "name": "sortAscending",
            "schema": {
              "items": {
                "type": "boolean"
              },
              "type": "array"
            }
          },
          {
            "description": "property filter for result nodes (or \"-all-\" for all properties)",
            "in": "query",
            "name": "propertyFilter",
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchResult"
                }
              }
            },
            "description": "OK."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Preconditions are not present."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization failed."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Session user has insufficient rights to perform this operation."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Ressources are not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Fatal error occured."
          }
        },
        "summary": "Searches for archive nodes.",
        "tags": [
          "ARCHIVE v1"
        ]
      }
    },
    "/archive/v1/search/{repository}/{pattern}/{person}": {
      "get": {
        "description": "Searches for archive nodes.",
        "operationId": "searchArchivePerson",
        "parameters": [
          {
            "description": "ID of repository (or \"-home-\" for home repository)",
            "in": "path",
            "name": "repository",
            "required": true,
            "schema": {
              "default": "-home-",
              "type": "string"
            }
          },
          {
            "description": "search pattern",
            "in": "path",
            "name": "pattern",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "person",
            "in": "path",
            "name": "person",
            "required": true,
            "schema": {
              "default": "-me-",
              "type": "string"
            }
          },
          {
            "description": "maximum items per page",
            "in": "query",
            "name": "maxItems",
            "schema": {
              "default": 10,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "skip a number of items",
            "in": "query",
            "name": "skipCount",
            "schema": {
              "default": 0,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "sort properties",
            "in": "query",
            "name": "sortProperties",
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "description": "sort ascending",
            "in": "query",
            "name": "sortAscending",
            "schema": {
              "items": {
                "type": "boolean"
              },
              "type": "array"
            }
          },
          {
            "description": "property filter for result nodes (or \"-all-\" for all properties)",
            "in": "query",
            "name": "propertyFilter",
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchResult"
                }
              }
            },
            "description": "OK."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Preconditions are not present."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization failed."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Session user has insufficient rights to perform this operation."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Ressources are not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Fatal error occured."
          }
        },
        "summary": "Searches for archive nodes.",
        "tags": [
          "ARCHIVE v1"
        ]
      }
    },
    "/authentication/v1/appauth/{userId}": {
      "post": {
        "description": "headers must be set: X-Edu-App-Id, X-Edu-App-Sig, X-Edu-App-Signed, X-Edu-App-Ts",
        "operationId": "authenticate",
        "parameters": [
          {
            "description": "User Id",
            "in": "path",
            "name": "userId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserProfileAppAuth"
              }
            }
          },
          "description": "User Profile"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationToken"
                }
              }
            },
            "description": "OK."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Preconditions are not present."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization failed."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Session user has insufficient rights to perform this operation."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Ressources are not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Fatal error occured."
          }
        },
        "security": [],
        "summary": "authenticate user of an registered application.",
        "tags": [
          "AUTHENTICATION v1"
        ]
      }
    },
    "/authentication/v1/destroySession": {
      "get": {
        "operationId": "logout",
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "OK."
          },
          "500": {
            "content": {
              "application/json": {}
            },
            "description": "Fatal error occured."
          }
        },
        "security": [],
        "summary": "Destroys the current session and logout the user",
        "tags": [
          "AUTHENTICATION v1"
        ]
      }
    },
    "/authentication/v1/hasAccessToScope": {
      "get": {
        "operationId": "hasAccessToScope",
        "parameters": [
          {
            "description": "scope",
            "in": "query",
            "name": "scope",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "OK."
          },
          "500": {
            "content": {
              "application/json": {}
            },
            "description": "Fatal error occured."
          }
        },
        "security": [],
        "summary": "Returns true if the current user has access to the given scope",
        "tags": [
          "AUTHENTICATION v1"
        ]
      }
    },
    "/authentication/v1/loginToScope": {
      "post": {
        "description": "Use the Basic auth header field to transfer the credentials",
        "operationId": "loginToScope",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginCredentials"
              }
            }
          },
          "description": "credentials, example: test,test",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Login"
                }
              }
            },
            "description": "Successfully authenticated.\n The session ID is returned in a cookie named `JSESSIONID`. You need to include this cookie in subsequent requests.",
            "headers": {
              "Set-Cookie": {
                "schema": {
                  "example": "JSESSIONID=abcde12345; PATH=/; HttpOnly",
                  "type": "string"
                },
                "style": "simple"
              }
            }
          }
        },
        "security": [],
        "summary": "Validates the Basic Auth Credentials and check if the session is a logged in user",
        "tags": [
          "AUTHENTICATION v1"
        ]
      }
    },
    "/authentication/v1/validateSSOSession": {
      "get": {
        "description": "If no provider session exists an 401 with 'login required' message is delivered. If true the current Login Object is shown.",
        "operationId": "validateSSOSession",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Login"
                }
              }
            },
            "description": "Successfully authenticated.\n The session ID is returned in a cookie named `JSESSIONID`. You need to include this cookie in subsequent requests.",
            "headers": {
              "Set-Cookie": {
                "schema": {
                  "example": "JSESSIONID=abcde12345; PATH=/; HttpOnly",
                  "type": "string"
                },
                "style": "simple"
              }
            }
          }
        },
        "security": [],
        "summary": "Validates if an provider (idp) session exists.",
        "tags": [
          "AUTHENTICATION v1"
        ]
      }
    },
    "/authentication/v1/validateSession": {
      "get": {
        "description": "Use the Basic auth header field to transfer the credentials",
        "operationId": "login",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Login"
                }
              }
            },
            "description": "Successfully authenticated.\n The session ID is returned in a cookie named `JSESSIONID`. You need to include this cookie in subsequent requests.",
            "headers": {
              "Set-Cookie": {
                "schema": {
                  "example": "JSESSIONID=abcde12345; PATH=/; HttpOnly",
                  "type": "string"
                },
                "style": "simple"
              }
            }
          }
        },
        "security": [],
        "summary": "Validates the Basic Auth Credentials and check if the session is a logged in user",
        "tags": [
          "AUTHENTICATION v1"
        ]
      }
    },
    "/bulk/v1/find": {
      "post": {
        "description": "Get a given node based on the posted, multiple criteria. Make sure that they'll provide an unique result",
        "operationId": "find_1",
        "parameters": [
          {
            "description": "Return the full node. If you don't need the data, set to false to only return the id (will improve performance)",
            "in": "query",
            "name": "resolveNode",
            "schema": {
              "default": true,
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "additionalProperties": {
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                "type": "object"
              }
            }
          },
          "description": "properties that must match (with \"AND\" concatenated)",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NodeEntry"
                }
              }
            },
            "description": "OK."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Preconditions are not present."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization failed."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Session user has insufficient rights to perform this operation."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Ressources are not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Fatal error occured."
          }
        },
        "summary": "gets a given node",
        "tags": [
          "BULK v1"
        ]
      }
    },
    "/bulk/v1/list": {
      "post": {
        "description": "lists all currently synchronized nodes matching the posted, multiple criteria",
        "operationId": "list",
        "parameters": [
          {
            "description": "Return the full node. If you don't need the data, set to false to only return the id (will improve performance)",
            "in": "query",
            "name": "resolveNode",
            "schema": {
              "default": true,
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "additionalProperties": {
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                "type": "object"
              }
            }
          },
          "description": "properties that must match (with \"AND\" concatenated)",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Node"
                  },
                  "type": "array"
                }
              }
            },
            "description": "OK."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Preconditions are not present."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization failed."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Session user has insufficient rights to perform this operation."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Ressources are not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Fatal error occured."
          }
        },
        "summary": "lists given nodes",
        "tags": [
          "BULK v1"
        ]
      }
    },
    "/bulk/v1/runs": {
      "get": {
        "description": "Gets a list of runs from this crawler (by day) and info about the state of this run",
        "operationId": "find",
        "parameters": [
          {
            "description": "replicationsource as previously provided when syncing data",
            "in": "query",
            "name": "replicationsource",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "filter by state (optional)",
            "in": "query",
            "name": "filterBySate",
            "schema": {
              "enum": [
                "New",
                "Published"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/BulkRun"
                  },
                  "type": "array"
                }
              }
            },
            "description": "OK."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Preconditions are not present."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization failed."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Session user has insufficient rights to perform this operation."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Ressources are not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Fatal error occured."
          }
        },
        "summary": "get imports from new runs",
        "tags": [
          "BULK v1"
        ]
      }
    },
    "/bulk/v1/sync/{group}": {
      "put": {
        "description": "Depending on the given \"match\" properties either a new node will be created or the existing one will be updated",
        "operationId": "sync",
        "parameters": [
          {
            "description": "The group to which this node belongs to. Used for internal structuring. Please use simple names only",
            "in": "path",
            "name": "group",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The properties that must match to identify if this node exists. Multiple properties will be and combined and compared",
            "in": "query",
            "name": "match",
            "required": true,
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "description": "The properties on which the imported nodes should be grouped (for each value, a folder with the corresponding data is created)",
            "in": "query",
            "name": "groupBy",
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "description": "type of node. If the node already exists, this will not change the type afterwards",
            "in": "query",
            "name": "type",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "aspects of node",
            "in": "query",
            "name": "aspects",
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "description": "Return the generated or updated node. If you don't need the data, set to false to only return the id (will improve performance)",
            "in": "query",
            "name": "resolveNode",
            "schema": {
              "default": true,
              "type": "boolean"
            }
          },
          {
            "description": "reset all versions (like a complete reimport), all data inside edu-sharing will be lost",
            "in": "query",
            "name": "resetVersion",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "additionalProperties": {
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                "type": "object"
              }
            }
          },
          "description": "properties, they'll not get filtered via mds, so be careful what you add here",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NodeEntry"
                }
              }
            },
            "description": "OK."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Preconditions are not present."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization failed."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Session user has insufficient rights to perform this operation."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Ressources are not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Fatal error occured."
          }
        },
        "summary": "Create or update a given node",
        "tags": [
          "BULK v1"
        ]
      }
    },
    "/clientUtils/v1/getWebsiteInformation": {
      "get": {
        "operationId": "getWebsiteInformation",
        "parameters": [
          {
            "description": "full url with http or https",
            "in": "query",
            "name": "url",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebsiteInformation"
                }
              }
            },
            "description": "OK."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Preconditions are not present."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization failed."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Session user has insufficient rights to perform this operation."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Ressources are not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Fatal error occured."
          }
        },
        "summary": "Read generic information about a webpage",
        "tags": [
          "CLIENTUTILS v1"
        ]
      }
    },
    "/collection/v1/collections/{repository}/children/proposals/collections": {
      "get": {
        "operationId": "getCollectionsContainingProposals",
        "parameters": [
          {
            "description": "ID of repository (or \"-home-\" for home repository)",
            "in": "path",
            "name": "repository",
            "required": true,
            "schema": {
              "default": "-home-",
              "type": "string"
            }
          },
          {
            "description": "status of the proposals to search for",
            "in": "query",
            "name": "status",
            "schema": {
              "default": "PENDING",
              "enum": [
                "PENDING",
                "ACCEPTED",
                "DECLINED"
              ],
              "type": "string"
            }
          },
          {
            "description": "fetch counts of collections (materials and subcollections). This parameter will decrease performance so only enable if if you need this data",
            "in": "query",
            "name": "fetchCounts",
            "schema": {
              "default": true,
              "type": "boolean"
            }
          },
          {
            "description": "maximum items per page",
            "in": "query",
            "name": "maxItems",
            "schema": {
              "default": 50,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "skip a number of items",
            "in": "query",
            "name": "skipCount",
            "schema": {
              "default": 0,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "sort properties",
            "in": "query",
            "name": "sortProperties",
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "description": "sort ascending, true if not set. Use multiple values to change the direction according to the given property at the same index",
            "in": "query",
            "name": "sortAscending",
            "schema": {
              "items": {
                "type": "boolean"
              },
              "type": "array"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionProposalEntries"
                }
              }
            },
            "description": "OK."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Preconditions are not present."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization failed."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Session user has insufficient rights to perform this operation."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Ressources are not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Fatal error occured."
          }
        },
        "summary": "Get all collections containing proposals with a given state (via search index)",
        "tags": [
          "COLLECTION v1"
        ]
      }
    },
    "/collection/v1/collections/{repository}/pinning": {
      "post": {
        "description": "Remove all currently pinned collections and set them in the order send. Requires TOOLPERMISSION_COLLECTION_PINNING",
        "operationId": "setPinnedCollections",
        "parameters": [
          {
            "description": "ID of repository (or \"-home-\" for home repository)",
            "in": "path",
            "name": "repository",
            "required": true,
            "schema": {
              "default": "-home-",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "default": "-home-",
                  "type": "string"
                },
                "type": "array"
              }
            }
          },
          "description": "List of collections that should be pinned",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "OK."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Preconditions are not present."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization failed."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Session user has insufficient rights to perform this operation."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Ressources are not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Fatal error occured."
          }
        },
        "summary": "Set pinned collections.",
        "tags": [
          "COLLECTION v1"
        ]
      }
    },
    "/collection/v1/collections/{repository}/search": {
      "get": {
        "deprecated": true,
        "description": "Search collections.",
        "operationId": "searchCollections",
        "parameters": [
          {
            "description": "ID of repository (or \"-home-\" for home repository)",
            "in": "path",
            "name": "repository",
            "required": true,
            "schema": {
              "default": "-home-",
              "type": "string"
            }
          },
          {
            "description": "query string",
            "in": "query",
            "name": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "maximum items per page",
            "in": "query",
            "name": "maxItems",
            "schema": {
              "default": 500,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "skip a number of items",
            "in": "query",
            "name": "skipCount",
            "schema": {
              "default": 0,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "sort properties",
            "in": "query",
            "name": "sortProperties",
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "description": "sort ascending, true if not set. Use multiple values to change the direction according to the given property at the same index",
            "in": "query",
            "name": "sortAscending",
            "schema": {
              "items": {
                "type": "boolean"
              },
              "type": "array"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionEntries"
                }
              }
            },
            "description": "OK."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Preconditions are not present."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization failed."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Session user has insufficient rights to perform this operation."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Ressources are not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Fatal error occured."
          }
        },
        "summary": "Search collections.",
        "tags": [
          "COLLECTION v1"
        ]
      }
    },
    "/collection/v1/collections/{repository}/{collectionId}": {
      "get": {
        "description": "Get a collection.",
        "operationId": "getCollection",
        "parameters": [
          {
            "description": "ID of repository (or \"-home-\" for home repository)",
            "in": "path",
            "name": "repository",
            "required": true,
            "schema": {
              "default": "-home-",
              "type": "string"
            }
          },
          {
            "description": "ID of collection",
            "in": "path",
            "name": "collectionId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "track this as a view of the collection (default: true)",
            "in": "query",
            "name": "track",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionEntry"
                }
              }
            },
            "description": "OK."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Preconditions are not present."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization failed."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Session user has insufficient rights to perform this operation."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Ressources are not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Fatal error occured."
          }
        },
        "summary": "Get a collection.",
        "tags": [
          "COLLECTION v1"
        ]
      }
    },
    "/collection/v1/collections/{repository}/{collection}": {
      "delete": {
        "description": "Delete a collection.",
        "operationId": "deleteCollection",
        "parameters": [
          {
            "description": "ID of repository (or \"-home-\" for home repository)",
            "in": "path",
            "name": "repository",
            "required": true,
            "schema": {
              "default": "-home-",
              "type": "string"
            }
          },
          {
            "description": "ID of collection",
            "in": "path",
            "name": "collection",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "OK."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Preconditions are not present."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization failed."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Session user has insufficient rights to perform this operation."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Ressources are not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Fatal error occured."
          }
        },
        "summary": "Delete a collection.",
        "tags": [
          "COLLECTION v1"
        ]
      },
      "put": {
        "description": "Update a collection.",
        "operationId": "updateCollection",
        "parameters": [
          {
            "description": "ID of repository (or \"-home-\" for home repository)",
            "in": "path",
            "name": "repository",
            "required": true,
            "schema": {
              "default": "-home-",
              "type": "string"
            }
          },
          {
            "description": "ID of collection",
            "in": "path",
            "name": "collection",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Node"
              }
            }
          },
          "description": "collection node",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "OK."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Preconditions are not present."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization failed."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Session user has insufficient rights to perform this operation."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Ressources are not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Fatal error occured."
          }
        },
        "summary": "Update a collection.",
        "tags": [
          "COLLECTION v1"
        ]
      }
    },
    "/collection/v1/collections/{repository}/{collection}/children": {
      "post": {
        "description": "Create a new collection.",
        "operationId": "createCollection",
        "parameters": [
          {
            "description": "ID of repository (or \"-home-\" for home repository)",
            "in": "path",
            "name": "repository",
            "required": true,
            "schema": {
              "default": "-home-",
              "type": "string"
            }
          },
          {
            "description": "ID of parent collection (or \"-root-\" for level0 collections)",
            "in": "path",
            "name": "collection",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Node"
              }
            }
          },
          "description": "collection",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionEntry"
                }
              }
            },
            "description": "OK."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Preconditions are not present."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization failed."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Session user has insufficient rights to perform this operation."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Ressources are not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Fatal error occured."
          }
        },
        "summary": "Create a new collection.",
        "tags": [
          "COLLECTION v1"
        ]
      }
    },
    "/collection/v1/collections/{repository}/{collection}/children/collections": {
      "get": {
        "operationId": "getCollectionsSubcollections",
        "parameters": [
          {
            "description": "ID of repository (or \"-home-\" for home repository)",
            "in": "path",
            "name": "repository",
            "required": true,
            "schema": {
              "default": "-home-",
              "type": "string"
            }
          },
          {
            "description": "ID of parent collection (or \"-root-\" for level0 collections)",
            "in": "path",
            "name": "collection",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "scope (only relevant if parent == -root-)",
            "in": "query",
            "name": "scope",
            "required": true,
            "schema": {
              "default": "MY",
              "enum": [
                "EDU_ALL",
                "EDU_GROUPS",
                "TYPE_EDITORIAL",
                "TYPE_MEDIA_CENTER",
                "MY",
                "RECENT"
              ],
              "type": "string"
            }
          },
          {
            "description": "fetch counts of collections (materials and subcollections). This parameter will decrease performance so only enable if if you need this data",
            "in": "query",
            "name": "fetchCounts",
            "schema": {
              "default": true,
              "type": "boolean"
            }
          },
          {
            "description": "maximum items per page",
            "in": "query",
            "name": "maxItems",
            "schema": {
              "default": 500,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "skip a number of items",
            "in": "query",
            "name": "skipCount",
            "schema": {
              "default": 0,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "sort properties",
            "in": "query",
            "name": "sortProperties",
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "description": "sort ascending, true if not set. Use multiple values to change the direction according to the given property at the same index",
            "in": "query",
            "name": "sortAscending",
            "schema": {
              "items": {
                "type": "boolean"
              },
              "type": "array"
            }
          },
          {
            "description": "property filter for result nodes (or \"-all-\" for all properties)",
            "in": "query",
            "name": "propertyFilter",
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionEntries"
                }
              }
            },
            "description": "OK."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Preconditions are not present."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization failed."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Session user has insufficient rights to perform this operation."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Ressources are not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Fatal error occured."
          }
        },
        "summary": "Get child collections for collection (or root).",
        "tags": [
          "COLLECTION v1"
        ]
      }
    },
    "/collection/v1/collections/{repository}/{collection}/children/proposals": {
      "get": {
        "operationId": "getCollectionsProposals",
        "parameters": [
          {
            "description": "ID of repository (or \"-home-\" for home repository)",
            "in": "path",
            "name": "repository",
            "required": true,
            "schema": {
              "default": "-home-",
              "type": "string"
            }
          },
          {
            "description": "ID of parent collection",
            "in": "path",
            "name": "collection",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Only show elements with given status",
            "in": "query",
            "name": "status",
            "required": true,
            "schema": {
              "enum": [
                "PENDING",
                "ACCEPTED",
                "DECLINED"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AbstractEntries"
                }
              }
            },
            "description": "OK."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Preconditions are not present."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization failed."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Session user has insufficient rights to perform this operation."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Ressources are not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Fatal error occured."
          }
        },
        "summary": "Get proposed objects for collection (requires edit permissions on collection).",
        "tags": [
          "COLLECTION v1"
        ]
      }
    },
    "/collection/v1/collections/{repository}/{collection}/children/references": {
      "get": {
        "operationId": "getCollectionsReferences",
        "parameters": [
          {
            "description": "ID of repository (or \"-home-\" for home repository)",
            "in": "path",
            "name": "repository",
            "required": true,
            "schema": {
              "default": "-home-",
              "type": "string"
            }
          },
          {
            "description": "ID of parent collection",
            "in": "path",
            "name": "collection",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "maximum items per page",
            "in": "query",
            "name": "maxItems",
            "schema": {
              "default": 500,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "skip a number of items",
            "in": "query",
            "name": "skipCount",
            "schema": {
              "default": 0,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "sort properties",
            "in": "query",
            "name": "sortProperties",
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "description": "sort ascending, true if not set. Use multiple values to change the direction according to the given property at the same index",
            "in": "query",
            "name": "sortAscending",
            "schema": {
              "items": {
                "type": "boolean"
              },
              "type": "array"
            }
          },
          {
            "description": "property filter for result nodes (or \"-all-\" for all properties)",
            "in": "query",
            "name": "propertyFilter",
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReferenceEntries"
                }
              }
            },
            "description": "OK."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Preconditions are not present."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization failed."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Session user has insufficient rights to perform this operation."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Ressources are not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Fatal error occured."
          }
        },
        "summary": "Get references objects for collection.",
        "tags": [
          "COLLECTION v1"
        ]
      }
    },
    "/collection/v1/collections/{repository}/{collection}/icon": {
      "delete": {
        "description": "Deletes Preview Image of a collection.",
        "operationId": "removeIconOfCollection",
        "parameters": [
          {
            "description": "ID of repository (or \"-home-\" for home repository)",
            "in": "path",
            "name": "repository",
            "required": true,
            "schema": {
              "default": "-home-",
              "type": "string"
            }
          },
          {
            "description": "ID of collection",
            "in": "path",
            "name": "collection",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "OK."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Preconditions are not present."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization failed."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Session user has insufficient rights to perform this operation."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Ressources are not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Fatal error occured."
          }
        },
        "summary": "Deletes Preview Image of a collection.",
        "tags": [
          "COLLECTION v1"
        ]
      },
      "post": {
        "description": "Writes Preview Image of a collection.",
        "operationId": "changeIconOfCollection",
        "parameters": [
          {
            "description": "ID of repository (or \"-home-\" for home repository)",
            "in": "path",
            "name": "repository",
            "required": true,
            "schema": {
              "default": "-home-",
              "type": "string"
            }
          },
          {
            "description": "ID of collection",
            "in": "path",
            "name": "collection",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "MIME-Type",
            "in": "query",
            "name": "mimetype",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "properties": {
                  "file": {
                    "type": "object"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionEntry"
                }
              }
            },
            "description": "OK."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Preconditions are not present."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization failed."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Session user has insufficient rights to perform this operation."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Ressources are not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Fatal error occured."
          }
        },
        "summary": "Writes Preview Image of a collection.",
        "tags": [
          "COLLECTION v1"
        ]
      }
    },
    "/collection/v1/collections/{repository}/{collection}/order": {
      "post": {
        "description": "Current order will be overriden. Requires full permissions for the parent collection",
        "operationId": "setCollectionOrder",
        "parameters": [
          {
            "description": "ID of repository (or \"-home-\" for home repository)",
            "in": "path",
            "name": "repository",
            "required": true,
            "schema": {
              "default": "-home-",
              "type": "string"
            }
          },
          {
            "description": "ID of collection",
            "in": "path",
            "name": "collection",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          },
          "description": "List of nodes in the order to be saved. If empty, custom order of the collection will be disabled"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "OK."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Preconditions are not present."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization failed."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Session user has insufficient rights to perform this operation."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Ressources are not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Fatal error occured."
          }
        },
        "summary": "Set order of nodes in a collection. In order to work as expected, provide a list of all nodes in this collection",
        "tags": [
          "COLLECTION v1"
        ]
      }
    },
    "/collection/v1/collections/{repository}/{collection}/references/{node}": {
      "delete": {
        "description": "Delete a node from a collection.",
        "operationId": "deleteFromCollection",
        "parameters": [
          {
            "description": "ID of repository (or \"-home-\" for home repository)",
            "in": "path",
            "name": "repository",
            "required": true,
            "schema": {
              "default": "-home-",
              "type": "string"
            }
          },
          {
            "description": "ID of collection",
            "in": "path",
            "name": "collection",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "ID of node",
            "in": "path",
            "name": "node",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "OK."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Preconditions are not present."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization failed."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Session user has insufficient rights to perform this operation."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Ressources are not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Fatal error occured."
          }
        },
        "summary": "Delete a node from a collection.",
        "tags": [
          "COLLECTION v1"
        ]
      },
      "put": {
        "description": "Add a node to a collection.",
        "operationId": "addToCollection",
        "parameters": [
          {
            "description": "ID of repository (or \"-home-\" for home repository)",
            "in": "path",
            "name": "repository",
            "required": true,
            "schema": {
              "default": "-home-",
              "type": "string"
            }
          },
          {
            "description": "ID of collection",
            "in": "path",
            "name": "collection",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "ID of node",
            "in": "path",
            "name": "node",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "ID of source repository",
            "in": "query",
            "name": "sourceRepo",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Allow that a node that already is inside the collection can be added again",
            "in": "query",
            "name": "allowDuplicate",
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "description": "Mark this node only as a proposal (not really adding but just marking it). This can also be used for collections where you don't have permissions",
            "in": "query",
            "name": "asProposal",
            "schema": {
              "default": false,
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NodeEntry"
                }
              }
            },
            "description": "OK."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Preconditions are not present."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization failed."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Session user has insufficient rights to perform this operation."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Ressources are not found."
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Duplicate Entity/Node conflict (Node with same name exists)"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Fatal error occured."
          }
        },
        "summary": "Add a node to a collection.",
        "tags": [
          "COLLECTION v1"
        ]
      }
    },
    "/comment/v1/comments/{repository}/{comment}": {
      "delete": {
        "description": "Delete the comment with the given id",
        "operationId": "deleteComment",
        "parameters": [
          {
            "description": "ID of repository (or \"-home-\" for home repository)",
            "in": "path",
            "name": "repository",
            "required": true,
            "schema": {
              "default": "-home-",
              "type": "string"
            }
          },
          {
            "description": "id of the comment to delete",
            "in": "path",
            "name": "comment",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "OK."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Preconditions are not present."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization failed."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Session user has insufficient rights to perform this operation."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Ressources are not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Fatal error occured."
          }
        },
        "summary": "delete a comment",
        "tags": [
          "COMMENT v1"
        ]
      },
      "post": {
        "description": "Edit the comment with the given id",
        "operationId": "editComment",
        "parameters": [
          {
            "description": "ID of repository (or \"-home-\" for home repository)",
            "in": "path",
            "name": "repository",
            "required": true,
            "schema": {
              "default": "-home-",
              "type": "string"
            }
          },
          {
            "description": "id of the comment to edit",
            "in": "path",
            "name": "comment",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "string"
              }
            }
          },
          "description": "Text content of comment",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "OK."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Preconditions are not present."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization failed."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Session user has insufficient rights to perform this operation."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Ressources are not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Fatal error occured."
          }
        },
        "summary": "edit a comment",
        "tags": [
          "COMMENT v1"
        ]
      }
    },
    "/comment/v1/comments/{repository}/{node}": {
      "get": {
        "description": "List all comments",
        "operationId": "getComments",
        "parameters": [
          {
            "description": "ID of repository (or \"-home-\" for home repository)",
            "in": "path",
            "name": "repository",
            "required": true,
            "schema": {
              "default": "-home-",
              "type": "string"
            }
          },
          {
            "description": "ID of node",
            "in": "path",
            "name": "node",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Comments"
                }
              }
            },
            "description": "OK."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Preconditions are not present."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization failed."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Session user has insufficient rights to perform this operation."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Ressources are not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Fatal error occured."
          }
        },
        "summary": "list comments",
        "tags": [
          "COMMENT v1"
        ]
      },
      "put": {
        "description": "Adds a comment to the given node",
        "operationId": "addComment",
        "parameters": [
          {
            "description": "ID of repository (or \"-home-\" for home repository)",
            "in": "path",
            "name": "repository",
            "required": true,
            "schema": {
              "default": "-home-",
              "type": "string"
            }
          },
          {
            "description": "ID of node",
            "in": "path",
            "name": "node",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "In reply to an other comment, can be null",
            "in": "query",
            "name": "commentReference",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "string"
              }
            }
          },
          "description": "Text content of comment",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "OK."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Preconditions are not present."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization failed."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Session user has insufficient rights to perform this operation."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Ressources are not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Fatal error occured."
          }
        },
        "summary": "create a new comment",
        "tags": [
          "COMMENT v1"
        ]
      }
    },
    "/config/v1/context": {
      "get": {
        "description": "Retrieves all available context objects",
        "operationId": "getAvailableContext",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Context"
                  },
                  "type": "array"
                }
              }
            },
            "description": "OK."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Preconditions are not present."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization failed."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Session user has insufficient rights to perform this operation."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Ressources are not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Fatal error occured."
          }
        },
        "security": [],
        "summary": "get all available repository context objects",
        "tags": [
          "CONFIG v1"
        ]
      },
      "put": {
        "operationId": "createOrUpdateContext",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Context"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Context"
                }
              }
            },
            "description": "OK."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Preconditions are not present."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization failed."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Session user has insufficient rights to perform this operation."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Ressources are not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Fatal error occured."
          }
        },
        "security": [],
        "summary": "Set a context entry (admin rights required)",
        "tags": [
          "CONFIG v1"
        ]
      }
    },
    "/config/v1/context/{id}": {
      "delete": {
        "operationId": "deleteContext",
        "parameters": [
          {
            "description": "Id of the context that should be deleted",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Context"
                }
              }
            },
            "description": "OK."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Preconditions are not present."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization failed."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Session user has insufficient rights to perform this operation."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Ressources are not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Fatal error occured."
          }
        },
        "security": [],
        "summary": "Delete a context entry by id (admin rights required)",
        "tags": [
          "CONFIG v1"
        ]
      }
    },
    "/config/v1/dynamic/{key}": {
      "get": {
        "operationId": "getDynamicValue",
        "parameters": [
          {
            "description": "Key of the config value that should be fetched",
            "in": "path",
            "name": "key",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DynamicConfig"
                }
              }
            },
            "description": "OK."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Preconditions are not present."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization failed."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Session user has insufficient rights to perform this operation."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Ressources are not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Fatal error occured."
          }
        },
        "security": [],
        "summary": "Get a config entry (appropriate rights for the entry are required)",
        "tags": [
          "CONFIG v1"
        ]
      },
      "post": {
        "description": "the body must be a json encapsulated string",
        "operationId": "setDynamicValue",
        "parameters": [
          {
            "description": "Key of the config value that should be fetched",
            "in": "path",
            "name": "key",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Is everyone allowed to read the value",
            "in": "query",
            "name": "public",
            "required": true,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "string"
              }
            }
          },
          "description": "Must be a json-encapsulated string",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DynamicConfig"
                }
              }
            },
            "description": "OK."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Preconditions are not present."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization failed."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Session user has insufficient rights to perform this operation."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Ressources are not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Fatal error occured."
          }
        },
        "security": [],
        "summary": "Set a config entry (admin rights required)",
        "tags": [
          "CONFIG v1"
        ]
      }
    },
    "/config/v1/language": {
      "get": {
        "description": "Language strings",
        "operationId": "getLanguage",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Language"
                }
              }
            },
            "description": "OK."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Preconditions are not present."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization failed."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Session user has insufficient rights to perform this operation."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Ressources are not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Fatal error occured."
          }
        },
        "security": [],
        "summary": "get override strings for the current language",
        "tags": [
          "CONFIG v1"
        ]
      }
    },
    "/config/v1/language/defaults": {
      "get": {
        "operationId": "getLanguageDefaults",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "OK."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Preconditions are not present."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization failed."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Session user has insufficient rights to perform this operation."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Ressources are not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Fatal error occured."
          }
        },
        "security": [],
        "summary": "get all inital language strings for angular",
        "tags": [
          "CONFIG v1"
        ]
      }
    },
    "/config/v1/values": {
      "get": {
        "description": "Current is the actual (context-based) active config. Global is the default global config if no context is active (may be identical to the current)",
        "operationId": "getConfig_1",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Config"
                }
              }
            },
            "description": "OK."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Preconditions are not present."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization failed."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Session user has insufficient rights to perform this operation."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Ressources are not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Fatal error occured."
          }
        },
        "security": [],
        "summary": "get repository config values",
        "tags": [
          "CONFIG v1"
        ]
      }
    },
    "/config/v1/variables": {
      "get": {
        "description": "global config variables",
        "operationId": "getVariables",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Variables"
                }
              }
            },
            "description": "OK."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Preconditions are not present."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization failed."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Session user has insufficient rights to perform this operation."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Ressources are not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Fatal error occured."
          }
        },
        "security": [],
        "summary": "get global config variables",
        "tags": [
          "CONFIG v1"
        ]
      }
    },
    "/connector/v1/connectors/{repository}/list": {
      "get": {
        "operationId": "listConnectors",
        "parameters": [
          {
            "description": "ID of repository (or \"-home-\" for home repository)",
            "in": "path",
            "name": "repository",
            "required": true,
            "schema": {
              "default": "-home-",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConnectorList"
                }
              }
            },
            "description": "OK."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Preconditions are not present."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization failed."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Session user has insufficient rights to perform this operation."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Ressources are not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Fatal error occured."
          }
        },
        "summary": "List all available connectors",
        "tags": [
          "CONNECTOR v1"
        ]
      }
    },
    "/feedback/v1/feedback/{repository}/{node}/add": {
      "put": {
        "description": "Adds feedback to the given node. Depending on the internal config, the current user will be obscured to prevent back-tracing to the original id",
        "operationId": "addFeedback",
        "parameters": [
          {
            "description": "ID of repository (or \"-home-\" for home repository)",
            "in": "path",
            "name": "repository",
            "required": true,
            "schema": {
              "default": "-home-",
              "type": "string"
            }
          },
          {
            "description": "ID of node",
            "in": "path",
            "name": "node",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "additionalProperties": {
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                "type": "object"
              }
            }
          },
          "description": "feedback data, key/value pairs",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FeedbackResult"
                }
              }
            },
            "description": "OK."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Preconditions are not present."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization failed."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Session user has insufficient rights to perform this operation."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Ressources are not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Fatal error occured."
          }
        },
        "summary": "Give feedback on a node",
        "tags": [
          "FEEDBACK v1"
        ]
      }
    },
    "/feedback/v1/feedback/{repository}/{node}/list": {
      "get": {
        "description": "Get all given feedback for a node. Requires Coordinator permissions on node",
        "operationId": "getFeedbacks",
        "parameters": [
          {
            "description": "ID of repository (or \"-home-\" for home repository)",
            "in": "path",
            "name": "repository",
            "required": true,
            "schema": {
              "default": "-home-",
              "type": "string"
            }
          },
          {
            "description": "ID of node",
            "in": "path",
            "name": "node",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/FeedbackData"
                  },
                  "type": "array"
                }
              }
            },
            "description": "OK."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Preconditions are not present."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization failed."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Session user has insufficient rights to perform this operation."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Ressources are not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Fatal error occured."
          }
        },
        "summary": "Get given feedback on a node",
        "tags": [
          "FEEDBACK v1"
        ]
      }
    },
    "/iam/v1/authorities/{repository}": {
      "get": {
        "description": "Search authorities.",
        "operationId": "searchAuthorities",
        "parameters": [
          {
            "description": "ID of repository (or \"-home-\" for home repository)",
            "in": "path",
            "name": "repository",
            "required": true,
            "schema": {
              "default": "-home-",
              "type": "string"
            }
          },
          {
            "description": "pattern",
            "in": "query",
            "name": "pattern",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "global search context, defaults to true, otherwise just searches for users within the organizations",
            "in": "query",
            "name": "global",
            "schema": {
              "default": true,
              "type": "boolean"
            }
          },
          {
            "description": "find a specific groupType (does nothing for persons)",
            "in": "query",
            "name": "groupType",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "find a specific signupMethod for groups (or asterisk for all including one) (does nothing for persons)",
            "in": "query",
            "name": "signupMethod",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "maximum items per page",
            "in": "query",
            "name": "maxItems",
            "schema": {
              "default": 10,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "skip a number of items",
            "in": "query",
            "name": "skipCount",
            "schema": {
              "default": 0,
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorityEntries"
                }
              }
            },
            "description": "OK."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Preconditions are not present."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization failed."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Session user has insufficient rights to perform this operation."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Ressources are not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Fatal error occured."
          }
        },
        "summary": "Search authorities.",
        "tags": [
          "IAM v1"
        ]
      }
    },
    "/iam/v1/authorities/{repository}/recent": {
      "get": {
        "description": "Get the authorities the current user has recently invited.",
        "operationId": "getRecentlyInvited",
        "parameters": [
          {
            "description": "ID of repository (or \"-home-\" for home repository)",
            "in": "path",
            "name": "repository",
            "required": true,
            "schema": {
              "default": "-home-",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorityEntries"
                }
              }
            },
            "description": "OK."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Preconditions are not present."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization failed."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Session user has insufficient rights to perform this operation."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Ressources are not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Fatal error occured."
          }
        },
        "summary": "Get recently invited authorities.",
        "tags": [
          "IAM v1"
        ]
      }
    },
    "/iam/v1/groups/{repository}": {
      "get": {
        "description": "Search groups. (admin rights are required.)",
        "operationId": "searchGroups",
        "parameters": [
          {
            "description": "ID of repository (or \"-home-\" for home repository)",
            "in": "path",
            "name": "repository",
            "required": true,
            "schema": {
              "default": "-home-",
              "type": "string"
            }
          },
          {
            "description": "pattern",
            "in": "query",
            "name": "pattern",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "find a specific groupType",
            "in": "query",
            "name": "groupType",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "find a specific signupMethod for groups (or asterisk for all including one)",
            "in": "query",
            "name": "signupMethod",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "global search context, defaults to true, otherwise just searches for groups within the organizations",
            "in": "query",
            "name": "global",
            "schema": {
              "default": true,
              "type": "boolean"
            }
          },
          {
            "description": "maximum items per page",
            "in": "query",
            "name": "maxItems",
            "schema": {
              "default": 10,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "skip a number of items",
            "in": "query",
            "name": "skipCount",
            "schema": {
              "default": 0,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "sort properties",
            "in": "query",
            "name": "sortProperties",
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "description": "sort ascending, true if not set. Use multiple values to change the direction according to the given property at the same index",
            "in": "query",
            "name": "sortAscending",
            "schema": {
              "items": {
                "type": "boolean"
              },
              "type": "array"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupEntries"
                }
              }
            },
            "description": "OK."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Preconditions are not present."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization failed."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Session user has insufficient rights to perform this operation."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Ressources are not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Fatal error occured."
          }
        },
        "summary": "Search groups.",
        "tags": [
          "IAM v1"
        ]
      }
    },
    "/iam/v1/groups/{repository}/{group}": {
      "delete": {
        "description": "Delete the group. (admin rights are required.)",
        "operationId": "deleteGroup",
        "parameters": [
          {
            "description": "ID of repository (or \"-home-\" for home repository)",
            "in": "path",
            "name": "repository",
            "required": true,
            "schema": {
              "default": "-home-",
              "type": "string"
            }
          },
          {
            "description": "groupname",
            "in": "path",
            "name": "group",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "OK."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Preconditions are not present."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization failed."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Session user has insufficient rights to perform this operation."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Ressources are not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Fatal error occured."
          }
        },
        "summary": "Delete the group.",
        "tags": [
          "IAM v1"
        ]
      },
      "get": {
        "description": "Get the group. (To get foreign profiles, admin rights are required.)",
        "operationId": "getGroup",
        "parameters": [
          {
            "description": "ID of repository (or \"-home-\" for home repository)",
            "in": "path",
            "name": "repository",
            "required": true,
            "schema": {
              "default": "-home-",
              "type": "string"
            }
          },
          {
            "description": "groupname",
            "in": "path",
            "name": "group",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "resolve the organization(s) this group is part of? disabling will slightly improve performance and should considered for bulk calls",
            "in": "query",
            "name": "resolveOrganizations",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupEntry"
                }
              }
            },
            "description": "OK."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Preconditions are not present."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization failed."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Session user has insufficient rights to perform this operation."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Ressources are not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Fatal error occured."
          }
        },
        "summary": "Get the group.",
        "tags": [
          "IAM v1"
        ]
      },
      "post": {
        "description": "Create a new group. (admin rights are required.)",
        "operationId": "createGroup",
        "parameters": [
          {
            "description": "ID of repository (or \"-home-\" for home repository)",
            "in": "path",
            "name": "repository",
            "required": true,
            "schema": {
              "default": "-home-",
              "type": "string"
            }
          },
          {
            "description": "groupname",
            "in": "path",
            "name": "group",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "parent (will be added to this parent, also for name hashing), may be null",
            "in": "query",
            "name": "parent",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "returnResult, if true the created group object will be returned.",
            "in": "query",
            "name": "returnResult",
            "schema": {
              "default": true,
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GroupProfile"
              }
            }
          },
          "description": "properties",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Group"
                }
              }
            },
            "description": "OK."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Preconditions are not present."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization failed."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Session user has insufficient rights to perform this operation."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Ressources are not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Fatal error occured."
          }
        },
        "summary": "Create a new group.",
        "tags": [
          "IAM v1"
        ]
      }
    },
    "/iam/v1/groups/{repository}/{group}/members": {
      "get": {
        "description": "Get all members of the group. (admin rights are required.)",
        "operationId": "getMembership",
        "parameters": [
          {
            "description": "ID of repository (or \"-home-\" for home repository)",
            "in": "path",
            "name": "repository",
            "required": true,
            "schema": {
              "default": "-home-",
              "type": "string"
            }
          },
          {
            "description": "authority name (begins with GROUP_)",
            "in": "path",
            "name": "group",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "pattern",
            "in": "query",
            "name": "pattern",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "authorityType either GROUP or USER, empty to show all",
            "in": "query",
            "name": "authorityType",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "maximum items per page",
            "in": "query",
            "name": "maxItems",
            "schema": {
              "default": 10,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "skip a number of items",
            "in": "query",
            "name": "skipCount",
            "schema": {
              "default": 0,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "sort properties",
            "in": "query",
            "name": "sortProperties",
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "description": "sort ascending, true if not set. Use multiple values to change the direction according to the given property at the same index",
            "in": "query",
            "name": "sortAscending",
            "schema": {
              "items": {
                "type": "boolean"
              },
              "type": "array"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorityEntries"
                }
              }
            },
            "description": "OK."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Preconditions are not present."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization failed."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Session user has insufficient rights to perform this operation."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Ressources are not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Fatal error occured."
          }
        },
        "summary": "Get all members of the group.",
        "tags": [
          "IAM v1"
        ]
      }
    },
    "/iam/v1/groups/{repository}/{group}/members/{member}": {
      "delete": {
        "description": "Delete member from the group. (admin rights are required.)",
        "operationId": "deleteMembership",
        "parameters": [
          {
            "description": "ID of repository (or \"-home-\" for home repository)",
            "in": "path",
            "name": "repository",
            "required": true,
            "schema": {
              "default": "-home-",
              "type": "string"
            }
          },
          {
            "description": "groupname",
            "in": "path",
            "name": "group",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "authorityName of member",
            "in": "path",
            "name": "member",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "OK."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Preconditions are not present."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization failed."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Session user has insufficient rights to perform this operation."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Ressources are not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Fatal error occured."
          }
        },
        "summary": "Delete member from the group.",
        "tags": [
          "IAM v1"
        ]
      },
      "put": {
        "description": "Add member to the group. (admin rights are required.)",
        "operationId": "addMembership",
        "parameters": [
          {
            "description": "ID of repository (or \"-home-\" for home repository)",
            "in": "path",
            "name": "repository",
            "required": true,
            "schema": {
              "default": "-home-",
              "type": "string"
            }
          },
          {
            "description": "groupname",
            "in": "path",
            "name": "group",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "authorityName of member",
            "in": "path",
            "name": "member",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "OK."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Preconditions are not present."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization failed."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Session user has insufficient rights to perform this operation."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Ressources are not found."
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Duplicate Entity/Node conflict (Node with same name exists)"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Fatal error occured."
          }
        },
        "summary": "Add member to the group.",
        "tags": [
          "IAM v1"
        ]
      }
    },
    "/iam/v1/groups/{repository}/{group}/profile": {
      "put": {
        "description": "Set profile of the group. (admin rights are required.)",
        "operationId": "changeGroupProfile",
        "parameters": [
          {
            "description": "ID of repository (or \"-home-\" for home repository)",
            "in": "path",
            "name": "repository",
            "required": true,
            "schema": {
              "default": "-home-",
              "type": "string"
            }
          },
          {
            "description": "groupname",
            "in": "path",
            "name": "group",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GroupProfile"
              }
            }
          },
          "description": "properties",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "OK."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Preconditions are not present."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization failed."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Session user has insufficient rights to perform this operation."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Ressources are not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Fatal error occured."
          }
        },
        "summary": "Set profile of the group.",
        "tags": [
          "IAM v1"
        ]
      }
    },
    "/iam/v1/groups/{repository}/{group}/signup": {
      "post": {
        "operationId": "signupGroup",
        "parameters": [
          {
            "description": "ID of repository (or \"-home-\" for home repository)",
            "in": "path",
            "name": "repository",
            "required": true,
            "schema": {
              "default": "-home-",
              "type": "string"
            }
          },
          {
            "description": "ID of group",
            "in": "path",
            "name": "group",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Password for signup (only required if signupMethod == password)",
            "in": "query",
            "name": "password",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "enum": [
                    "InvalidPassword",
                    "AlreadyInList",
                    "AlreadyMember",
                    "Ok"
                  ],
                  "type": "string"
                }
              }
            },
            "description": "OK."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Preconditions are not present."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization failed."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Session user has insufficient rights to perform this operation."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Ressources are not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Fatal error occured."
          }
        },
        "summary": "let the current user signup to the given group",
        "tags": [
          "IAM v1"
        ]
      }
    },
    "/iam/v1/groups/{repository}/{group}/signup/config": {
      "post": {
        "description": "set group signup options",
        "operationId": "signupGroupDetails",
        "parameters": [
          {
            "description": "ID of repository (or \"-home-\" for home repository)",
            "in": "path",
            "name": "repository",
            "required": true,
            "schema": {
              "default": "-home-",
              "type": "string"
            }
          },
          {
            "description": "ID of group",
            "in": "path",
            "name": "group",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GroupSignupDetails"
              }
            }
          },
          "description": "Details to edit",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "OK."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Preconditions are not present."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization failed."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Session user has insufficient rights to perform this operation."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Ressources are not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Fatal error occured."
          }
        },
        "summary": " requires admin rights",
        "tags": [
          "IAM v1"
        ]
      }
    },
    "/iam/v1/groups/{repository}/{group}/signup/list": {
      "get": {
        "description": "Requires admin rights or org administrator on this group",
        "operationId": "signupGroupList",
        "parameters": [
          {
            "description": "ID of repository (or \"-home-\" for home repository)",
            "in": "path",
            "name": "repository",
            "required": true,
            "schema": {
              "default": "-home-",
              "type": "string"
            }
          },
          {
            "description": "ID of group",
            "in": "path",
            "name": "group",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/User"
                  },
                  "type": "array"
                }
              }
            },
            "description": "OK."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Preconditions are not present."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization failed."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Session user has insufficient rights to perform this operation."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Ressources are not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Fatal error occured."
          }
        },
        "summary": "list pending users that want to join this group",
        "tags": [
          "IAM v1"
        ]
      }
    },
    "/iam/v1/groups/{repository}/{group}/signup/list/{user}": {
      "delete": {
        "description": "Requires admin rights or org administrator on this group",
        "operationId": "rejectSignup",
        "parameters": [
          {
            "description": "ID of repository (or \"-home-\" for home repository)",
            "in": "path",
            "name": "repository",
            "required": true,
            "schema": {
              "default": "-home-",
              "type": "string"
            }
          },
          {
            "description": "ID of group",
            "in": "path",
            "name": "group",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "ID of user",
            "in": "path",
            "name": "user",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "OK."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Preconditions are not present."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization failed."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Session user has insufficient rights to perform this operation."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Ressources are not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Fatal error occured."
          }
        },
        "summary": "reject the pending user",
        "tags": [
          "IAM v1"
        ]
      },
      "put": {
        "description": "Requires admin rights or org administrator on this group",
        "operationId": "confirmSignup",
        "parameters": [
          {
            "description": "ID of repository (or \"-home-\" for home repository)",
            "in": "path",
            "name": "repository",
            "required": true,
            "schema": {
              "default": "-home-",
              "type": "string"
            }
          },
          {
            "description": "ID of group",
            "in": "path",
            "name": "group",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "ID of user",
            "in": "path",
            "name": "user",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "OK."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Preconditions are not present."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization failed."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Session user has insufficient rights to perform this operation."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Ressources are not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Fatal error occured."
          }
        },
        "summary": "put the pending user into the group",
        "tags": [
          "IAM v1"
        ]
      }
    },
    "/iam/v1/groups/{repository}/{group}/type/{type}": {
      "get": {
        "description": "Get a subgroup by the specified type",
        "operationId": "getSubgroupByType",
        "parameters": [
          {
            "description": "ID of repository (or \"-home-\" for home repository)",
            "in": "path",
            "name": "repository",
            "required": true,
            "schema": {
              "default": "-home-",
              "type": "string"
            }
          },
          {
            "description": "authority name of the parent/primary group (begins with GROUP_)",
            "in": "path",
            "name": "group",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "group type to filter for, e.g. ORG_ADMINISTRATORS",
            "in": "path",
            "name": "type",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorityEntries"
                }
              }
            },
            "description": "OK."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Preconditions are not present."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization failed."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Session user has insufficient rights to perform this operation."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Ressources are not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Fatal error occured."
          }
        },
        "summary": "Get a subgroup by the specified type",
        "tags": [
          "IAM v1"
        ]
      }
    },
    "/iam/v1/people/{repository}": {
      "get": {
        "description": "Search users. (admin rights are required.)",
        "operationId": "searchUser",
        "parameters": [
          {
            "description": "ID of repository (or \"-home-\" for home repository)",
            "in": "path",
            "name": "repository",
            "required": true,
            "schema": {
              "default": "-home-",
              "type": "string"
            }
          },
          {
            "description": "pattern",
            "in": "query",
            "name": "pattern",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "global search context, defaults to true, otherwise just searches for users within the organizations",
            "in": "query",
            "name": "global",
            "schema": {
              "default": true,
              "type": "boolean"
            }
          },
          {
            "description": "the user status (e.g. active), if not set, all users are returned",
            "in": "query",
            "name": "status",
            "schema": {
              "enum": [
                "active",
                "blocked",
                "todelete"
              ],
              "type": "string"
            }
          },
          {
            "description": "maximum items per page",
            "in": "query",
            "name": "maxItems",
            "schema": {
              "default": 10,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "skip a number of items",
            "in": "query",
            "name": "skipCount",
            "schema": {
              "default": 0,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "sort properties",
            "in": "query",
            "name": "sortProperties",
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "description": "sort ascending, true if not set. Use multiple values to change the direction according to the given property at the same index",
            "in": "query",
            "name": "sortAscending",
            "schema": {
              "items": {
                "type": "boolean"
              },
              "type": "array"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserEntries"
                }
              }
            },
            "description": "OK."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Preconditions are not present."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization failed."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Session user has insufficient rights to perform this operation."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Ressources are not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Fatal error occured."
          }
        },
        "summary": "Search users.",
        "tags": [
          "IAM v1"
        ]
      }
    },
    "/iam/v1/people/{repository}/{person}": {
      "delete": {
        "description": "Delete the user. (admin rights are required.)",
        "operationId": "deleteUser",
        "parameters": [
          {
            "description": "ID of repository (or \"-home-\" for home repository)",
            "in": "path",
            "name": "repository",
            "required": true,
            "schema": {
              "default": "-home-",
              "type": "string"
            }
          },
          {
            "description": "username",
            "in": "path",
            "name": "person",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "force the deletion (if false then only persons which are previously marked for deletion are getting deleted)",
            "in": "query",
            "name": "force",
            "schema": {
              "default": false,
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "OK."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Preconditions are not present."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization failed."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Session user has insufficient rights to perform this operation."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Ressources are not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Fatal error occured."
          }
        },
        "summary": "Delete the user.",
        "tags": [
          "IAM v1"
        ]
      },
      "get": {
        "description": "Get the user. (Not all information are feteched for foreign profiles if current user is not an admin)",
        "operationId": "getUser",
        "parameters": [
          {
            "description": "ID of repository (or \"-home-\" for home repository)",
            "in": "path",
            "name": "repository",
            "required": true,
            "schema": {
              "default": "-home-",
              "type": "string"
            }
          },
          {
            "description": "username (or \"-me-\" for current user)",
            "in": "path",
            "name": "person",
            "required": true,
            "schema": {
              "default": "-me-",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserEntry"
                }
              }
            },
            "description": "OK."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Preconditions are not present."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization failed."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Session user has insufficient rights to perform this operation."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Ressources are not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Fatal error occured."
          }
        },
        "summary": "Get the user.",
        "tags": [
          "IAM v1"
        ]
      },
      "post": {
        "description": "Create a new user. (admin rights are required.)",
        "operationId": "createUser",
        "parameters": [
          {
            "description": "ID of repository (or \"-home-\" for home repository)",
            "in": "path",
            "name": "repository",
            "required": true,
            "schema": {
              "default": "-home-",
              "type": "string"
            }
          },
          {
            "description": "username",
            "in": "path",
            "name": "person",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Password, leave empty if you don't want to set any",
            "in": "query",
            "name": "password",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "returnResult, if true the created person object will be returned.",
            "in": "query",
            "name": "returnResult",
            "schema": {
              "default": true,
              "type": "boolean"
            }
          },
          {
            "description": "setupHomeDir, if true the created persons homedir will be setup with the default folders.",
            "in": "query",
            "name": "setupHomeDir",
            "schema": {
              "default": true,
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserProfileEdit"
              }
            }
          },
          "description": "profile",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            },
            "description": "OK."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Preconditions are not present."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization failed."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Session user has insufficient rights to perform this operation."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Ressources are not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Fatal error occured."
          }
        },
        "summary": "Create a new user.",
        "tags": [
          "IAM v1"
        ]
      }
    },
    "/iam/v1/people/{repository}/{person}/avatar": {
      "delete": {
        "description": "Remove avatar of the user. (To Remove foreign avatars, admin rights are required.)",
        "operationId": "removeUserAvatar",
        "parameters": [
          {
            "description": "ID of repository (or \"-home-\" for home repository)",
            "in": "path",
            "name": "repository",
            "required": true,
            "schema": {
              "default": "-home-",
              "type": "string"
            }
          },
          {
            "description": "username (or \"-me-\" for current user)",
            "in": "path",
            "name": "person",
            "required": true,
            "schema": {
              "default": "-me-",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "OK."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Preconditions are not present."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization failed."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Session user has insufficient rights to perform this operation."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Ressources are not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Fatal error occured."
          }
        },
        "summary": "Remove avatar of the user.",
        "tags": [
          "IAM v1"
        ]
      },
      "put": {
        "description": "Set avatar of the user. (To set foreign avatars, admin rights are required.)",
        "operationId": "changeUserAvatar",
        "parameters": [
          {
            "description": "ID of repository (or \"-home-\" for home repository)",
            "in": "path",
            "name": "repository",
            "required": true,
            "schema": {
              "default": "-home-",
              "type": "string"
            }
          },
          {
            "description": "username (or \"-me-\" for current user)",
            "in": "path",
            "name": "person",
            "required": true,
            "schema": {
              "default": "-me-",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "properties": {
                  "avatar": {
                    "description": "avatar image",
                    "type": "object"
                  }
                },
                "required": [
                  "avatar"
                ],
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "OK."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Preconditions are not present."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization failed."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Session user has insufficient rights to perform this operation."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Ressources are not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Fatal error occured."
          }
        },
        "summary": "Set avatar of the user.",
        "tags": [
          "IAM v1"
        ]
      }
    },
    "/iam/v1/people/{repository}/{person}/credential": {
      "put": {
        "description": "Change/Set password of the user. (To change foreign passwords or set passwords, admin rights are required.)",
        "operationId": "changeUserPassword",
        "parameters": [
          {
            "description": "ID of repository (or \"-home-\" for home repository)",
            "in": "path",
            "name": "repository",
            "required": true,
            "schema": {
              "default": "-home-",
              "type": "string"
            }
          },
          {
            "description": "username (or \"-me-\" for current user)",
            "in": "path",
            "name": "person",
            "required": true,
            "schema": {
              "default": "-me-",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserCredential"
              }
            }
          },
          "description": "credential",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "OK."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Preconditions are not present."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization failed."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Session user has insufficient rights to perform this operation."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Ressources are not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Fatal error occured."
          }
        },
        "summary": "Change/Set password of the user.",
        "tags": [
          "IAM v1"
        ]
      }
    },
    "/iam/v1/people/{repository}/{person}/memberships": {
      "get": {
        "operationId": "getUserGroups",
        "parameters": [
          {
            "description": "ID of repository (or \"-home-\" for home repository)",
            "in": "path",
            "name": "repository",
            "required": true,
            "schema": {
              "default": "-home-",
              "type": "string"
            }
          },
          {
            "description": "authority name",
            "in": "path",
            "name": "person",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "pattern",
            "in": "query",
            "name": "pattern",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "maximum items per page",
            "in": "query",
            "name": "maxItems",
            "schema": {
              "default": 10,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "skip a number of items",
            "in": "query",
            "name": "skipCount",
            "schema": {
              "default": 0,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "sort properties",
            "in": "query",
            "name": "sortProperties",
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "description": "sort ascending, true if not set. Use multiple values to change the direction according to the given property at the same index",
            "in": "query",
            "name": "sortAscending",
            "schema": {
              "items": {
                "type": "boolean"
              },
              "type": "array"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupEntries"
                }
              }
            },
            "description": "OK."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Preconditions are not present."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization failed."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Session user has insufficient rights to perform this operation."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Ressources are not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Fatal error occured."
          }
        },
        "summary": "Get all groups the given user is member of.",
        "tags": [
          "IAM v1"
        ]
      }
    },
    "/iam/v1/people/{repository}/{person}/nodeList/{list}": {
      "get": {
        "description": "For guest users, the list will be temporary stored in the current session",
        "operationId": "getNodeList",
        "parameters": [
          {
            "description": "ID of repository (or \"-home-\" for home repository)",
            "in": "path",
            "name": "repository",
            "required": true,
            "schema": {
              "default": "-home-",
              "type": "string"
            }
          },
          {
            "description": "username (or \"-me-\" for current user)",
            "in": "path",
            "name": "person",
            "required": true,
            "schema": {
              "default": "-me-",
              "type": "string"
            }
          },
          {
            "description": "list name",
            "in": "path",
            "name": "list",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "property filter for result nodes (or \"-all-\" for all properties)",
            "in": "query",
            "name": "propertyFilter",
            "schema": {
              "items": {
                "default": "-all-",
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "description": "sort properties",
            "in": "query",
            "name": "sortProperties",
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "description": "sort ascending, true if not set. Use multiple values to change the direction according to the given property at the same index",
            "in": "query",
            "name": "sortAscending",
            "schema": {
              "items": {
                "type": "boolean"
              },
              "type": "array"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NodeEntries"
                }
              }
            },
            "description": "OK."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Preconditions are not present."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization failed."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Session user has insufficient rights to perform this operation."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Ressources are not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Fatal error occured."
          }
        },
        "summary": "Get a specific node list for a user",
        "tags": [
          "IAM v1"
        ]
      }
    },
    "/iam/v1/people/{repository}/{person}/nodeList/{list}/{node}": {
      "delete": {
        "description": "For guest users, the list will be temporary stored in the current session",
        "operationId": "removeNodeList",
        "parameters": [
          {
            "description": "ID of repository (or \"-home-\" for home repository)",
            "in": "path",
            "name": "repository",
            "required": true,
            "schema": {
              "default": "-home-",
              "type": "string"
            }
          },
          {
            "description": "username (or \"-me-\" for current user)",
            "in": "path",
            "name": "person",
            "required": true,
            "schema": {
              "default": "-me-",
              "type": "string"
            }
          },
          {
            "description": "list name",
            "in": "path",
            "name": "list",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "ID of node",
            "in": "path",
            "name": "node",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "OK."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Preconditions are not present."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization failed."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Session user has insufficient rights to perform this operation."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Ressources are not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Fatal error occured."
          }
        },
        "summary": "Delete a node of a node list of a user",
        "tags": [
          "IAM v1"
        ]
      },
      "put": {
        "description": "For guest users, the list will be temporary stored in the current session",
        "operationId": "addNodeList",
        "parameters": [
          {
            "description": "ID of repository (or \"-home-\" for home repository)",
            "in": "path",
            "name": "repository",
            "required": true,
            "schema": {
              "default": "-home-",
              "type": "string"
            }
          },
          {
            "description": "username (or \"-me-\" for current user)",
            "in": "path",
            "name": "person",
            "required": true,
            "schema": {
              "default": "-me-",
              "type": "string"
            }
          },
          {
            "description": "list name. If this list does not exist, it will be created",
            "in": "path",
            "name": "list",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "ID of node",
            "in": "path",
            "name": "node",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "OK."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Preconditions are not present."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization failed."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Session user has insufficient rights to perform this operation."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Ressources are not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Fatal error occured."
          }
        },
        "summary": "Add a node to node a list of a user",
        "tags": [
          "IAM v1"
        ]
      }
    },
    "/iam/v1/people/{repository}/{person}/preferences": {
      "get": {
        "description": "Will fail for guest",
        "operationId": "getPreferences",
        "parameters": [
          {
            "description": "ID of repository (or \"-home-\" for home repository)",
            "in": "path",
            "name": "repository",
            "required": true,
            "schema": {
              "default": "-home-",
              "type": "string"
            }
          },
          {
            "description": "username (or \"-me-\" for current user)",
            "in": "path",
            "name": "person",
            "required": true,
            "schema": {
              "default": "-me-",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Preferences"
                }
              }
            },
            "description": "OK."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Preconditions are not present."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization failed."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Session user has insufficient rights to perform this operation."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Ressources are not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Fatal error occured."
          }
        },
        "summary": "Get preferences stored for user",
        "tags": [
          "IAM v1"
        ]
      },
      "put": {
        "description": "Will fail for guest",
        "operationId": "setPreferences",
        "parameters": [
          {
            "description": "ID of repository (or \"-home-\" for home repository)",
            "in": "path",
            "name": "repository",
            "required": true,
            "schema": {
              "default": "-home-",
              "type": "string"
            }
          },
          {
            "description": "username (or \"-me-\" for current user)",
            "in": "path",
            "name": "person",
            "required": true,
            "schema": {
              "default": "-me-",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "default": "-me-",
                "type": "string"
              }
            }
          },
          "description": "preferences (json string)",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "OK."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Preconditions are not present."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization failed."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Session user has insufficient rights to perform this operation."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Ressources are not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Fatal error occured."
          }
        },
        "summary": "Set preferences for user",
        "tags": [
          "IAM v1"
        ]
      }
    },
    "/iam/v1/people/{repository}/{person}/profile": {
      "put": {
        "description": "Set profile of the user. (To set foreign profiles, admin rights are required.)",
        "operationId": "changeUserProfile",
        "parameters": [
          {
            "description": "ID of repository (or \"-home-\" for home repository)",
            "in": "path",
            "name": "repository",
            "required": true,
            "schema": {
              "default": "-home-",
              "type": "string"
            }
          },
          {
            "description": "username (or \"-me-\" for current user)",
            "in": "path",
            "name": "person",
            "required": true,
            "schema": {
              "default": "-me-",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserProfileEdit"
              }
            }
          },
          "description": "properties",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "OK."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Preconditions are not present."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization failed."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Session user has insufficient rights to perform this operation."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Ressources are not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Fatal error occured."
          }
        },
        "summary": "Set profile of the user.",
        "tags": [
          "IAM v1"
        ]
      }
    },
    "/iam/v1/people/{repository}/{person}/profileSettings": {
      "get": {
        "description": "Will fail for guest",
        "operationId": "getProfileSettings",
        "parameters": [
          {
            "description": "ID of repository (or \"-home-\" for home repository)",
            "in": "path",
            "name": "repository",
            "required": true,
            "schema": {
              "default": "-home-",
              "type": "string"
            }
          },
          {
            "description": "username (or \"-me-\" for current user)",
            "in": "path",
            "name": "person",
            "required": true,
            "schema": {
              "default": "-me-",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProfileSettings"
                }
              }
            },
            "description": "OK."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Preconditions are not present."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization failed."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Session user has insufficient rights to perform this operation."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Ressources are not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Fatal error occured."
          }
        },
        "summary": "Get profileSettings configuration",
        "tags": [
          "IAM v1"
        ]
      },
      "put": {
        "description": "Will fail for guest",
        "operationId": "setProfileSettings",
        "parameters": [
          {
            "description": "ID of repository (or \"-home-\" for home repository)",
            "in": "path",
            "name": "repository",
            "required": true,
            "schema": {
              "default": "-home-",
              "type": "string"
            }
          },
          {
            "description": "username (or \"-me-\" for current user)",
            "in": "path",
            "name": "person",
            "required": true,
            "schema": {
              "default": "-me-",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProfileSettings"
              }
            }
          },
          "description": "ProfileSetting Object",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "OK."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Preconditions are not present."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization failed."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Session user has insufficient rights to perform this operation."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Ressources are not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Fatal error occured."
          }
        },
        "summary": "Set profileSettings Configuration",
        "tags": [
          "IAM v1"
        ]
      }
    },
    "/iam/v1/people/{repository}/{person}/stats": {
      "get": {
        "description": "Get the user stats (e.g. publicly created material count)",
        "operationId": "getUserStats",
        "parameters": [
          {
            "description": "ID of repository (or \"-home-\" for home repository)",
            "in": "path",
            "name": "repository",
            "required": true,
            "schema": {
              "default": "-home-",
              "type": "string"
            }
          },
          {
            "description": "username (or \"-me-\" for current user)",
            "in": "path",
            "name": "person",
            "required": true,
            "schema": {
              "default": "-me-",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserStats"
                }
              }
            },
            "description": "OK."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Preconditions are not present."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization failed."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Session user has insufficient rights to perform this operation."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Ressources are not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Fatal error occured."
          }
        },
        "summary": "Get the user stats.",
        "tags": [
          "IAM v1"
        ]
      }
    },
    "/iam/v1/people/{repository}/{person}/status/{status}": {
      "put": {
        "description": "update the user status. (admin rights are required.)",
        "operationId": "updateUserStatus",
        "parameters": [
          {
            "description": "ID of repository (or \"-home-\" for home repository)",
            "in": "path",
            "name": "repository",
            "required": true,
            "schema": {
              "default": "-home-",
              "type": "string"
            }
          },
          {
            "description": "username",
            "in": "path",
            "name": "person",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "the new status to set",
            "in": "path",
            "name": "status",
            "required": true,
            "schema": {
              "enum": [
                "active",
                "blocked",
                "todelete"
              ],
              "type": "string"
            }
          },
          {
            "description": "notify the user via mail",
            "in": "query",
            "name": "notify",
            "required": true,
            "schema": {
              "default": true,
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "OK."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Preconditions are not present."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization failed."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Session user has insufficient rights to perform this operation."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Ressources are not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Fatal error occured."
          }
        },
        "summary": "update the user status.",
        "tags": [
          "IAM v1"
        ]
      }
    },
    "/knowledge/v1/analyze/jobs": {
      "post": {
        "description": "Run analyzing job for a node.",
        "operationId": "runAnalyzingJob",
        "parameters": [
          {
            "description": "ID of repository (or \"-home-\" for home repository)",
            "in": "query",
            "name": "repository",
            "required": true,
            "schema": {
              "default": "-home-",
              "type": "string"
            }
          },
          {
            "description": "ID of node",
            "in": "query",
            "name": "node",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JobEntry"
                }
              }
            },
            "description": "Accepted."
          },
          "401": {
            "content": {
              "application/json": {}
            },
            "description": "Authorization failed."
          },
          "403": {
            "content": {
              "application/json": {}
            },
            "description": "The current user has insufficient rights to read the node or to perform an analyzing job."
          },
          "404": {
            "content": {
              "application/json": {}
            },
            "description": "Repository or node not found."
          }
        },
        "summary": "Run analyzing job.",
        "tags": [
          "KNOWLEDGE v1"
        ]
      }
    },
    "/knowledge/v1/analyze/jobs/{job}": {
      "get": {
        "description": "Get analyzing job status.",
        "operationId": "getAnalyzingJobStatus",
        "parameters": [
          {
            "description": "ID of job ticket",
            "in": "path",
            "name": "job",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JobEntry"
                }
              }
            },
            "description": "OK."
          },
          "401": {
            "content": {
              "application/json": {}
            },
            "description": "Authorization failed."
          },
          "403": {
            "content": {
              "application/json": {}
            },
            "description": "The current user has insufficient rights to access the ticket."
          },
          "404": {
            "content": {
              "application/json": {}
            },
            "description": "Job not found."
          }
        },
        "summary": "Get analyzing job status.",
        "tags": [
          "KNOWLEDGE v1"
        ]
      }
    },
    "/lti/v13/details/{repository}/{node}": {
      "get": {
        "description": "get rendered html snippet for a node.",
        "operationId": "getDetailsSnippet",
        "parameters": [
          {
            "description": "ID of repository (or \"-home-\" for home repository)",
            "in": "path",
            "name": "repository",
            "required": true,
            "schema": {
              "default": "-home-",
              "type": "string"
            }
          },
          {
            "description": "ID of node",
            "in": "path",
            "name": "node",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "version of node",
            "in": "query",
            "name": "version",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Rendering displayMode",
            "in": "query",
            "name": "displayMode",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "jwt containing the claims aud (clientId of platform), deploymentId and a token. must be signed by platform",
            "in": "query",
            "name": "jwt",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RenderingDetailsEntry"
                }
              }
            },
            "description": "OK."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Preconditions are not present."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization failed."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Session user has insufficient rights to perform this operation."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Ressources are not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Fatal error occured."
          }
        },
        "summary": "get a html snippet containing a rendered version of a node. this method can be called from a platform as a xhr request instead of doing the resource link flow",
        "tags": [
          "LTI v13"
        ]
      }
    },
    "/lti/v13/generateDeepLinkingResponse": {
      "get": {
        "operationId": "generateDeepLinkingResponse",
        "parameters": [
          {
            "description": "selected node id's",
            "in": "query",
            "name": "nodeIds",
            "required": true,
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NodeLTIDeepLink"
                }
              }
            },
            "description": "OK."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Preconditions are not present."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization failed."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Session user has insufficient rights to perform this operation."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Ressources are not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Fatal error occured."
          }
        },
        "summary": "generate DeepLinkingResponse",
        "tags": [
          "LTI v13"
        ]
      }
    },
    "/lti/v13/jwks": {
      "get": {
        "operationId": "jwksUri",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RegistrationUrl"
                }
              }
            },
            "description": "OK."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Preconditions are not present."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Authorization failed."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Session user has insufficient rights to perform this operation."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Ressources are not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Fatal error occured."
          }
        },
        "security": [],
        "summary": "LTI - returns repository JSON Web Key Sets",
        "tags": [
          "LTI v13"
        ]
      }
    },
    "/lti/v13/lti13": {
      "post": {
        "description": "lti tool redirect",
        "operationId": "lti",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "properties": {
                  "id_token": {
                    "description": "Issuer of the request, will be validated",
                    "type": "string"
                  },
                  "state": {
                    "description": "Issuer of the request, will be validated",
                    "type": "string"
                  }
                },
                "required": [
                  "id_token",
                  "state"
                ],
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "text/html": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "OK."
          },
          "400": {
            "content": {
              "text/html": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Preconditions are not present."
          },
          "401": {
            "content": {
              "text/html": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Authorization failed."
          },
          "403": {
            "content": {
              "text/html": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Session user has insufficient rights to perform this operation."
          },
          "404": {
            "content": {
              "text/html": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Ressources are not found."
          },
          "500": {
            "content": {
              "text/html": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Fatal error occured."
          }
        },
        "security": [],
        "summary": "lti tool redirect.",
        "tags": [
          "LTI v13"
        ]
      }
    },
    "/lti/v13/lti13/{nodeId}": {
      "post": {
        "description": "used by some platforms for direct (without oidc login_init) launch requests",
        "operationId": "ltiTarget",
        "parameters": [
          {
            "description": "edu-sharing node id",
            "in": "path",
            "name": "nodeId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "properties": {
                  "id_token": {
                    "description": "Issuer of the request, will be validated",
                    "type": "string"
                  },
                  "state": {
                    "description": "Issuer of the request, will be validated",
                    "type": "string"
                  }
                },
                "required": [
                  "id_token",
                  "state"
                ],
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "text/html": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "OK."
          },
          "400": {
            "content": {
              "text/html": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Preconditions are not present."
          },
          "401": {
            "content": {
              "text/html": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Authorization failed."
          },
          "403": {
            "content": {
              "text/html": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Session user has insufficient rights to perform this operation."
          },
          "404": {
            "content": {
              "text/html": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Ressources are not found."
          },
          "500": {
            "content": {
              "text/html": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Fatal error occured."
          }
        },
        "security": [],
        "summary": "lti tool resource link target.",
        "tags": [
          "LTI v13"
        ]
      }
    },
    "/lti/v13/oidc/login_initiations": {
      "get": {
        "description": "preflight phase. prepares lti authentication process. checks it issuer is valid",
        "operationId": "loginInitiationsGet",
        "parameters": [
          {
            "description": "Issuer of the request, will be validated",
            "in": "query",
            "name": "iss",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "target url of platform at the end of the flow",
            "in": "query",
            "name": "target_link_uri",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Id of the issuer",
            "in": "query",
            "name": "client_id",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "context information of the platform",
            "in": "query",
            "name": "login_hint",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "additional context information of the platform",
            "in": "query",
            "name": "lti_message_hint",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "A can have multiple deployments in a platform",
            "in": "query",
            "name": "lti_deployment_id",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "text/html": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "OK."
          },
          "400": {
            "content": {
              "text/html": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Preconditions are not present."
          },
          "401": {
            "content": {
              "text/html": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Authorization failed."
          },
          "403": {
            "content": {
              "text/html": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Session user has insufficient rights to perform this operation."
          },
          "404": {
            "content": {
              "text/html": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Ressources are not found."
          },
          "500": {
            "content": {
              "text/html": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Fatal error occured."
          }
        },
        "security": [],
        "summary": "lti authentication process preparation.",
        "tags": [
          "LTI v13"
        ]
      },
      "post": {
        "description": "preflight phase. prepares lti authentication process. checks it issuer is valid",
        "operationId": "loginInitiations",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "properties": {
                  "client_id": {
                    "description": "Id of the issuer",
                    "type": "string"
                  },
                  "iss": {
                    "description": "Issuer of the request, will be validated",
                    "type": "string"
                  },
                  "login_hint": {
                    "description": "context information of the platform",
                    "type": "string"
                  },
                  "lti_deployment_id": {
                    "description": "A can have multiple deployments in a platform",
                    "type": "string"
                  },
                  "lti_message_hint": {
                    "description": "additional context information of the platform",
                    "type": "string"
                  },
                  "target_link_uri": {
                    "description": "target url of platform at the end of the flow",
                    "type": "string"
                  }
                },
                "required": [
                  "iss",
                  "target_link_uri"
                ],
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "text/html": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "OK."
          },
          "400": {
            "content": {
              "text/html": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Preconditions are not present."
          },
          "401": {
            "content": {
              "text/html": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Authorization failed."
          },
          "403": {
            "content": {
              "text/html": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Session user has insufficient rights to perform this operation."
          },
          "404": {
            "content": {
              "text/html": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Ressources are not found."
          },
          "500": {
            "content": {
              "text/html": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Fatal error occured."
          }
        },
        "security": [],
        "summary": "lti authentication process preparation.",
        "tags": [
          "LTI v13"
        ]
      }
    },
    "/lti/v13/registration/dynamic/{token}": {
      "get": {
        "operationId": "ltiRegistrationDynamic",
        "parameters": [
          {
            "description": "the endpoint to the open id configuration to be used for this registration",
            "in": "query",
            "name": "openid_configuration",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "the registration access token. If present, it must be used as the access token by the tool when making the registration request to the registration endpoint exposed in the openid configuration.",
            "in": "query",
            "name": "registration_token",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "one time usage token which is autogenerated with the url in edu-sharing admin gui.",
            "in": "path",
            "name": "token",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "text/html": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "OK."
          },
          "400": {
            "content": {
              "text/html": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Preconditions are not present."
          },
          "401": {
            "content": {
              "text/html": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Authorization failed."
          },
          "403": {
            "content": {
              "text/html": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Session user has insufficient rights to perform this operation."
          },
          "404": {
            "content": {
              "text/html": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Ressources are not found."
          },
          "500": {
            "content": {
              "text/html": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Fatal error occured."
          }
        },
        "security": [],
        "summary": "LTI Dynamic Registration - Initiate registration",
        "tags": [
          "LTI v13"
        ]
      }
    },
    "/lti/v13/registration/static": {
      "post": {
        "operationId": "registerTest",
        "parameters": [
          {
            "description": "the issuer",
            "in": "query",
            "name": "platformId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "client id",
            "in": "query",
            "name": "client_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "deployment id",
            "in": "query",
            "name": "deployment_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "oidc endpoint, authentication request url",
            "in": "query",
            "name": "authentication_request_url",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "jwks endpoint, keyset url",
            "in": "query",
            "name": "keyset_url",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "jwks key id",
            "in": "query",
            "name": "key_id",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "auth token url",
            "in": "query",
            "name": "auth_token_url",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "OK."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Preconditions are not present."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization failed."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Session user has insufficient rights to perform this operation."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Ressources are not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Fatal error occured."
          }
        },
        "summary": "register LTI platform",
        "tags": [
          "LTI v13"
        ]
      }
    },
    "/lti/v13/registration/url": {
      "get": {
        "operationId": "ltiRegistrationUrl",
        "parameters": [
          {
            "description": "if to add a ne url to the list",
            "in": "query",
            "name": "generate",
            "required": true,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DynamicRegistrationTokens"
                }
              }
            },
            "description": "OK."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Preconditions are not present."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Authorization failed."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Session user has insufficient rights to perform this operation."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Ressources are not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Fatal error occured."
          }
        },
        "summary": "LTI Dynamic Registration - generates url for platform",
        "tags": [
          "LTI v13"
        ]
      }
    },
    "/lti/v13/registration/url/{token}": {
      "delete": {
        "operationId": "removeLtiRegistrationUrl",
        "parameters": [
          {
            "description": "the token of the link you have to remove",
            "in": "path",
            "name": "token",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DynamicRegistrationTokens"
                }
              }
            },
            "description": "OK."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Preconditions are not present."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Authorization failed."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Session user has insufficient rights to perform this operation."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Ressources are not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Fatal error occured."
          }
        },
        "summary": "LTI Dynamic Regitration - delete url",
        "tags": [
          "LTI v13"
        ]
      }
    },
    "/lti/v13/registration/{type}": {
      "post": {
        "operationId": "registerByType",
        "parameters": [
          {
            "description": "lti platform typ i.e. moodle",
            "in": "path",
            "name": "type",
            "required": true,
            "schema": {
              "enum": [
                "moodle"
              ],
              "type": "string"
            }
          },
          {
            "description": "base url i.e. http://localhost/moodle used as platformId",
            "in": "query",
            "name": "baseUrl",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "client id",
            "in": "query",
            "name": "client_id",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "deployment id",
            "in": "query",
            "name": "deployment_id",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "OK."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Preconditions are not present."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization failed."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Session user has insufficient rights to perform this operation."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Ressources are not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Fatal error occured."
          }
        },
        "summary": "register LTI platform",
        "tags": [
          "LTI v13"
        ]
      }
    },
    "/ltiplatform/v13/auth": {
      "get": {
        "operationId": "auth",
        "parameters": [
          {
            "description": "scope",
            "in": "query",
            "name": "scope",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "response_type",
            "in": "query",
            "name": "response_type",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "optional parameter client_id specifies the client id for the authorization server that should be used to authorize the subsequent LTI message request",
            "in": "query",
            "name": "client_id",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "login_hint",
            "in": "query",
            "name": "login_hint",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "state",
            "in": "query",
            "name": "state",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "response_mode",
            "in": "query",
            "name": "response_mode",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "nonce",
            "in": "query",
            "name": "nonce",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "prompt",
            "in": "query",
            "name": "prompt",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Similarly to the login_hint parameter, lti_message_hint value is opaque to the tool. If present in the login initiation request, the tool MUST include it back in the authentication request unaltered",
            "in": "query",
            "name": "lti_message_hint",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "redirect_uri",
            "in": "query",
            "name": "redirect_uri",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "text/html": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "OK."
          },
          "400": {
            "content": {
              "text/html": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Preconditions are not present."
          },
          "401": {
            "content": {
              "text/html": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Authorization failed."
          },
          "403": {
            "content": {
              "text/html": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Session user has insufficient rights to perform this operation."
          },
          "404": {
            "content": {
              "text/html": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Ressources are not found."
          },
          "500": {
            "content": {
              "text/html": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Fatal error occured."
          }
        },
        "summary": "LTI Platform oidc endpoint. responds to a login authentication request",
        "tags": [
          "LTI Platform v13"
        ]
      }
    },
    "/ltiplatform/v13/content": {
      "get": {
        "description": "Get content of node.",
        "operationId": "getContent",
        "parameters": [
          {
            "description": "jwt containing the claims appId, nodeId, user previously send with ResourceLinkRequest or DeeplinkRequest. Must be signed by tool",
            "in": "query",
            "name": "jwt",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "format": "byte",
                  "type": "string"
                }
              }
            },
            "description": "OK."
          },
          "400": {
            "content": {
              "text/html": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Preconditions are not present."
          },
          "401": {
            "content": {
              "text/html": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Authorization failed."
          },
          "403": {
            "content": {
              "text/html": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Session user has insufficient rights to perform this operation."
          },
          "404": {
            "content": {
              "text/html": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Ressources are not found."
          },
          "500": {
            "content": {
              "text/html": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Fatal error occured."
          }
        },
        "summary": "Custom edu-sharing endpoint to get content of node.",
        "tags": [
          "LTI Platform v13"
        ]
      },
      "post": {
        "description": "Change content of node.",
        "operationId": "changeContent",
        "parameters": [
          {
            "description": "jwt containing the claims appId, nodeId, user previously send with ResourceLinkRequest or DeeplinkRequest. Must be signed by tool",
            "in": "query",
            "name": "jwt",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "comment, leave empty = no new version, otherwise new version is generated",
            "in": "query",
            "name": "versionComment",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "MIME-Type",
            "in": "query",
            "name": "mimetype",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "properties": {
                  "file": {
                    "description": "file upload",
                    "format": "binary",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NodeEntry"
                }
              }
            },
            "description": "OK."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Preconditions are not present."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization failed."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Session user has insufficient rights to perform this operation."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Ressources are not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Fatal error occured."
          }
        },
        "summary": "Custom edu-sharing endpoint to change content of node.",
        "tags": [
          "LTI Platform v13"
        ]
      }
    },
    "/ltiplatform/v13/convert2resourcelink": {
      "post": {
        "description": "io conversion to resourcelink",
        "operationId": "convertToResourcelink",
        "parameters": [
          {
            "description": "nodeId",
            "in": "query",
            "name": "nodeId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "appId of a lti tool",
            "in": "query",
            "name": "appId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "OK."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Preconditions are not present."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization failed."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Session user has insufficient rights to perform this operation."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Ressources are not found."
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Duplicate Entity/Node conflict (Node with same name exists)"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Fatal error occured."
          }
        },
        "summary": "manual convertion of an io to an resource link without deeplinking",
        "tags": [
          "LTI Platform v13"
        ]
      }
    },
    "/ltiplatform/v13/deeplinking-response": {
      "post": {
        "description": "deeplink response",
        "operationId": "deepLinkingResponse",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "properties": {
                  "JWT": {
                    "description": "JWT",
                    "type": "string"
                  }
                },
                "required": [
                  "JWT"
                ],
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "text/html": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "OK."
          },
          "400": {
            "content": {
              "text/html": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Preconditions are not present."
          },
          "401": {
            "content": {
              "text/html": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Authorization failed."
          },
          "403": {
            "content": {
              "text/html": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Session user has insufficient rights to perform this operation."
          },
          "404": {
            "content": {
              "text/html": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Ressources are not found."
          },
          "409": {
            "content": {
              "text/html": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Duplicate Entity/Node conflict (Node with same name exists)"
          },
          "500": {
            "content": {
              "text/html": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Fatal error occured."
          }
        },
        "summary": "receiving deeplink response messages.",
        "tags": [
          "LTI Platform v13"
        ]
      }
    },
    "/ltiplatform/v13/generateLoginInitiationForm": {
      "get": {
        "operationId": "generateLoginInitiationForm",
        "parameters": [
          {
            "description": "appId of the tool",
            "in": "query",
            "name": "appId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "the folder id the lti node will be created in. is required for lti deeplink.",
            "in": "query",
            "name": "parentId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "the nodeId when tool has custom content option.",
            "in": "query",
            "name": "nodeId",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "text/html": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "OK."
          },
          "400": {
            "content": {
              "text/html": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Preconditions are not present."
          },
          "401": {
            "content": {
              "text/html": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Authorization failed."
          },
          "403": {
            "content": {
              "text/html": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Session user has insufficient rights to perform this operation."
          },
          "404": {
            "content": {
              "text/html": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Ressources are not found."
          },
          "500": {
            "content": {
              "text/html": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Fatal error occured."
          }
        },
        "summary": "generate a form used for Initiating Login from a Third Party. Use thes endpoint when starting a lti deeplink flow.",
        "tags": [
          "LTI Platform v13"
        ]
      }
    },
    "/ltiplatform/v13/generateLoginInitiationFormResourceLink": {
      "get": {
        "operationId": "generateLoginInitiationFormResourceLink",
        "parameters": [
          {
            "description": "the nodeid of a node that contains a lti resourcelink. is required for lti resourcelink",
            "in": "query",
            "name": "nodeId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "for tools with content option, this param sends changeContentUrl (true) else contentUrl will be excluded",
            "in": "query",
            "name": "editMode",
            "schema": {
              "default": true,
              "type": "boolean"
            }
          },
          {
            "description": "the version. for tools with contentoption.",
            "in": "query",
            "name": "version",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "launchPresentation. how the resourcelink will be embedded. valid values: window,iframe",
            "in": "query",
            "name": "launchPresentation",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "jwt for checking access in lms context",
            "in": "query",
            "name": "jwt",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "text/html": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "OK."
          },
          "400": {
            "content": {
              "text/html": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Preconditions are not present."
          },
          "401": {
            "content": {
              "text/html": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Authorization failed."
          },
          "403": {
            "content": {
              "text/html": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Session user has insufficient rights to perform this operation."
          },
          "404": {
            "content": {
              "text/html": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Ressources are not found."
          },
          "500": {
            "content": {
              "text/html": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Fatal error occured."
          }
        },
        "summary": "generate a form used for Initiating Login from a Third Party. Use thes endpoint when starting a lti resourcelink flow.",
        "tags": [
          "LTI Platform v13"
        ]
      }
    },
    "/ltiplatform/v13/manual-registration": {
      "post": {
        "description": "tool registration",
        "operationId": "manualRegistration",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ManualRegistrationData"
              }
            }
          },
          "description": "registrationData",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenIdRegistrationResult"
                }
              }
            },
            "description": "OK."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Preconditions are not present."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization failed."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Session user has insufficient rights to perform this operation."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Ressources are not found."
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Duplicate Entity/Node conflict (Node with same name exists)"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Fatal error occured."
          }
        },
        "summary": "manual registration endpoint for registration of tools.",
        "tags": [
          "LTI Platform v13"
        ]
      }
    },
    "/ltiplatform/v13/openid-configuration": {
      "get": {
        "operationId": "openidConfiguration",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenIdConfiguration"
                }
              }
            },
            "description": "OK."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Preconditions are not present."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Authorization failed."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Session user has insufficient rights to perform this operation."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Ressources are not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Fatal error occured."
          }
        },
        "summary": "LTIPlatform openid configuration",
        "tags": [
          "LTI Platform v13"
        ]
      }
    },
    "/ltiplatform/v13/openid-registration": {
      "post": {
        "description": "tool registration",
        "operationId": "openIdRegistration",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "string"
              }
            }
          },
          "description": "registrationpayload",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenIdRegistrationResult"
                }
              }
            },
            "description": "OK."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Preconditions are not present."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization failed."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Session user has insufficient rights to perform this operation."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Ressources are not found."
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Duplicate Entity/Node conflict (Node with same name exists)"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Fatal error occured."
          }
        },
        "summary": "registration endpoint the tool uses to register at platform.",
        "tags": [
          "LTI Platform v13"
        ]
      }
    },
    "/ltiplatform/v13/start-dynamic-registration": {
      "get": {
        "description": "start dynmic registration",
        "operationId": "startDynamicRegistrationGet",
        "parameters": [
          {
            "description": "url",
            "in": "query",
            "name": "url",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "text/html": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "OK."
          },
          "400": {
            "content": {
              "text/html": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Preconditions are not present."
          },
          "401": {
            "content": {
              "text/html": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Authorization failed."
          },
          "403": {
            "content": {
              "text/html": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Session user has insufficient rights to perform this operation."
          },
          "404": {
            "content": {
              "text/html": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Ressources are not found."
          },
          "500": {
            "content": {
              "text/html": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Fatal error occured."
          }
        },
        "summary": "starts lti dynamic registration.",
        "tags": [
          "LTI Platform v13"
        ]
      },
      "post": {
        "description": "start dynmic registration",
        "operationId": "startDynamicRegistration",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "properties": {
                  "url": {
                    "description": "url",
                    "type": "string"
                  }
                },
                "required": [
                  "url"
                ],
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "text/html": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "OK."
          },
          "400": {
            "content": {
              "text/html": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Preconditions are not present."
          },
          "401": {
            "content": {
              "text/html": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Authorization failed."
          },
          "403": {
            "content": {
              "text/html": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Session user has insufficient rights to perform this operation."
          },
          "404": {
            "content": {
              "text/html": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Ressources are not found."
          },
          "500": {
            "content": {
              "text/html": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Fatal error occured."
          }
        },
        "summary": "starts lti dynamic registration.",
        "tags": [
          "LTI Platform v13"
        ]
      }
    },
    "/ltiplatform/v13/testToken": {
      "put": {
        "description": "test token.",
        "operationId": "testToken",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "additionalProperties": {
                  "type": "string"
                },
                "type": "object"
              }
            }
          },
          "description": "properties",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "OK."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Preconditions are not present."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization failed."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Session user has insufficient rights to perform this operation."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Ressources are not found."
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Duplicate Entity/Node conflict (Node with same name exists)"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Fatal error occured."
          }
        },
        "summary": "test creates a token signed with homeapp.",
        "tags": [
          "LTI Platform v13"
        ]
      }
    },
    "/ltiplatform/v13/token": {
      "get": {
        "operationId": "authTokenEndpoint",
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "OK."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Preconditions are not present."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Authorization failed."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Session user has insufficient rights to perform this operation."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Ressources are not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Fatal error occured."
          }
        },
        "summary": "LTIPlatform auth token endpoint",
        "tags": [
          "LTI Platform v13"
        ]
      }
    },
    "/ltiplatform/v13/tools": {
      "get": {
        "operationId": "tools",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Tools"
                }
              }
            },
            "description": "OK."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Preconditions are not present."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Authorization failed."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Session user has insufficient rights to perform this operation."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Ressources are not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Fatal error occured."
          }
        },
        "summary": "List of tools registered",
        "tags": [
          "LTI Platform v13"
        ]
      }
    },
    "/mds/v1/metadatasets/{repository}": {
      "get": {
        "description": "Get metadata sets V2 of repository.",
        "operationId": "getMetadataSets",
        "parameters": [
          {
            "description": "ID of repository (or \"-home-\" for home repository)",
            "in": "path",
            "name": "repository",
            "required": true,
            "schema": {
              "default": "-home-",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MdsEntries"
                }
              }
            },
            "description": "OK."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Preconditions are not present."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization failed."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Session user has insufficient rights to perform this operation."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Ressources are not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Fatal error occured."
          }
        },
        "summary": "Get metadata sets V2 of repository.",
        "tags": [
          "MDS v1"
        ]
      }
    },
    "/mds/v1/metadatasets/{repository}/{metadataset}": {
      "get": {
        "description": "Get metadata set new.",
        "operationId": "getMetadataSet",
        "parameters": [
          {
            "description": "ID of repository (or \"-home-\" for home repository)",
            "in": "path",
            "name": "repository",
            "required": true,
            "schema": {
              "default": "-home-",
              "type": "string"
            }
          },
          {
            "description": "ID of metadataset (or \"-default-\" for default metadata set)",
            "in": "path",
            "name": "metadataset",
            "required": true,
            "schema": {
              "default": "-default-",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mds"
                }
              }
            },
            "description": "OK."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Preconditions are not present."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization failed."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Session user has insufficient rights to perform this operation."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Ressources are not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Fatal error occured."
          }
        },
        "summary": "Get metadata set new.",
        "tags": [
          "MDS v1"
        ]
      }
    },
    "/mds/v1/metadatasets/{repository}/{metadataset}/values": {
      "post": {
        "description": "Get values.",
        "operationId": "getValues",
        "parameters": [
          {
            "description": "ID of repository (or \"-home-\" for home repository)",
            "in": "path",
            "name": "repository",
            "required": true,
            "schema": {
              "default": "-home-",
              "type": "string"
            }
          },
          {
            "description": "ID of metadataset (or \"-default-\" for default metadata set)",
            "in": "path",
            "name": "metadataset",
            "required": true,
            "schema": {
              "default": "-default-",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SuggestionParam"
              }
            }
          },
          "description": "suggestionParam"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Suggestions"
                }
              }
            },
            "description": "OK."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Preconditions are not present."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization failed."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Session user has insufficient rights to perform this operation."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Ressources are not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Fatal error occured."
          }
        },
        "summary": "Get values.",
        "tags": [
          "MDS v1"
        ]
      }
    },
    "/mds/v1/metadatasets/{repository}/{metadataset}/values/{widget}/suggest": {
      "post": {
        "description": "Suggest a new value for a given metadataset and widget. The suggestion will be forwarded to the corresponding person in the metadataset file",
        "operationId": "suggestValue",
        "parameters": [
          {
            "description": "ID of repository (or \"-home-\" for home repository)",
            "in": "path",
            "name": "repository",
            "required": true,
            "schema": {
              "default": "-home-",
              "type": "string"
            }
          },
          {
            "description": "ID of metadataset (or \"-default-\" for default metadata set)",
            "in": "path",
            "name": "metadataset",
            "required": true,
            "schema": {
              "default": "-default-",
              "type": "string"
            }
          },
          {
            "description": "widget id, e.g. cm:name",
            "in": "path",
            "name": "widget",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "caption of the new entry (id will be auto-generated)",
            "in": "query",
            "name": "caption",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "parent id of the new entry (might be null)",
            "in": "query",
            "name": "parent",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "One or more nodes this suggestion relates to (optional, only for extended mail data)",
            "in": "query",
            "name": "nodeId",
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MdsValue"
                }
              }
            },
            "description": "OK."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Preconditions are not present."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization failed."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Session user has insufficient rights to perform this operation."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Ressources are not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Fatal error occured."
          }
        },
        "summary": "Suggest a value.",
        "tags": [
          "MDS v1"
        ]
      }
    },
    "/mds/v1/metadatasets/{repository}/{metadataset}/values_for_keys": {
      "post": {
        "description": "Get values for keys.",
        "operationId": "getValues4Keys",
        "parameters": [
          {
            "description": "ID of repository (or \"-home-\" for home repository)",
            "in": "path",
            "name": "repository",
            "required": true,
            "schema": {
              "default": "-home-",
              "type": "string"
            }
          },
          {
            "description": "ID of metadataset (or \"-default-\" for default metadata set)",
            "in": "path",
            "name": "metadataset",
            "required": true,
            "schema": {
              "default": "-default-",
              "type": "string"
            }
          },
          {
            "description": "query",
            "in": "query",
            "name": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "property",
            "in": "query",
            "name": "property",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          },
          "description": "keys"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Suggestions"
                }
              }
            },
            "description": "OK."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Preconditions are not present."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization failed."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Session user has insufficient rights to perform this operation."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Ressources are not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Fatal error occured."
          }
        },
        "summary": "Get values for keys.",
        "tags": [
          "MDS v1"
        ]
      }
    },
    "/mediacenter/v1/import/mc_org": {
      "post": {
        "description": "Import Mediacenter Organisation Connection.",
        "operationId": "importMcOrgConnections",
        "parameters": [
          {
            "description": "removeSchoolsFromMC",
            "in": "query",
            "name": "removeSchoolsFromMC",
            "schema": {
              "default": false,
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "properties": {
                  "mcOrgs": {
                    "description": "Mediacenter Organisation Connection csv to import",
                    "type": "object"
                  }
                },
                "required": [
                  "mcOrgs"
                ],
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/McOrgConnectResult"
                }
              }
            },
            "description": "OK."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Preconditions are not present."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization failed."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Session user has insufficient rights to perform this operation."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Ressources are not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Fatal error occured."
          }
        },
        "summary": "Import Mediacenter Organisation Connection",
        "tags": [
          "MEDIACENTER v1"
        ]
      }
    },
    "/mediacenter/v1/import/mediacenters": {
      "post": {
        "description": "Import mediacenters.",
        "operationId": "importMediacenters",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "properties": {
                  "mediacenters": {
                    "description": "Mediacenters csv to import",
                    "type": "object"
                  }
                },
                "required": [
                  "mediacenters"
                ],
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MediacentersImportResult"
                }
              }
            },
            "description": "OK."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Preconditions are not present."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization failed."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Session user has insufficient rights to perform this operation."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Ressources are not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Fatal error occured."
          }
        },
        "summary": "Import mediacenters",
        "tags": [
          "MEDIACENTER v1"
        ]
      }
    },
    "/mediacenter/v1/import/organisations": {
      "post": {
        "description": "Import Organisations.",
        "operationId": "importOrganisations",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "properties": {
                  "organisations": {
                    "description": "Organisations csv to import",
                    "type": "object"
                  }
                },
                "required": [
                  "organisations"
                ],
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganisationsImportResult"
                }
              }
            },
            "description": "OK."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Preconditions are not present."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization failed."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Session user has insufficient rights to perform this operation."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Ressources are not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Fatal error occured."
          }
        },
        "summary": "Import Organisations",
        "tags": [
          "MEDIACENTER v1"
        ]
      }
    },
    "/mediacenter/v1/mediacenter/{repository}": {
      "get": {
        "description": "Only shows the one available/managing the current user (only admin can access all)",
        "operationId": "getMediacenters",
        "parameters": [
          {
            "description": "ID of repository (or \"-home-\" for home repository)",
            "in": "path",
            "name": "repository",
            "required": true,
            "schema": {
              "default": "-home-",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Mediacenter"
                  },
                  "type": "array"
                }
              }
            },
            "description": "OK."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Preconditions are not present."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization failed."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Session user has insufficient rights to perform this operation."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Ressources are not found."
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Duplicate Entity/Node conflict (Node with same name exists)"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Fatal error occured."
          }
        },
        "summary": "get mediacenters in the repository.",
        "tags": [
          "MEDIACENTER v1"
        ]
      }
    },
    "/mediacenter/v1/mediacenter/{repository}/{mediacenter}": {
      "delete": {
        "description": "admin rights are required.",
        "operationId": "deleteMediacenter",
        "parameters": [
          {
            "description": "ID of repository (or \"-home-\" for home repository)",
            "in": "path",
            "name": "repository",
            "required": true,
            "schema": {
              "default": "-home-",
              "type": "string"
            }
          },
          {
            "description": "authorityName of the mediacenter that should manage the group",
            "in": "path",
            "name": "mediacenter",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "OK."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Preconditions are not present."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization failed."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Session user has insufficient rights to perform this operation."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Ressources are not found."
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Duplicate Entity/Node conflict (Node with same name exists)"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Fatal error occured."
          }
        },
        "summary": "delete a mediacenter group and it's admin group and proxy group",
        "tags": [
          "MEDIACENTER v1"
        ]
      },
      "post": {
        "description": "admin rights are required.",
        "operationId": "createMediacenter",
        "parameters": [
          {
            "description": "ID of repository (or \"-home-\" for home repository)",
            "in": "path",
            "name": "repository",
            "required": true,
            "schema": {
              "default": "-home-",
              "type": "string"
            }
          },
          {
            "description": "mediacenter name",
            "in": "path",
            "name": "mediacenter",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Profile"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mediacenter"
                }
              }
            },
            "description": "OK."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Preconditions are not present."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization failed."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Session user has insufficient rights to perform this operation."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Ressources are not found."
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Duplicate Entity/Node conflict (Node with same name exists)"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Fatal error occured."
          }
        },
        "summary": "create new mediacenter in repository.",
        "tags": [
          "MEDIACENTER v1"
        ]
      },
      "put": {
        "operationId": "editMediacenter",
        "parameters": [
          {
            "description": "ID of repository (or \"-home-\" for home repository)",
            "in": "path",
            "name": "repository",
            "required": true,
            "schema": {
              "default": "-home-",
              "type": "string"
            }
          },
          {
            "description": "mediacenter name",
            "in": "path",
            "name": "mediacenter",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Profile"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mediacenter"
                }
              }
            },
            "description": "OK."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Preconditions are not present."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization failed."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Session user has insufficient rights to perform this operation."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Ressources are not found."
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Duplicate Entity/Node conflict (Node with same name exists)"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Fatal error occured."
          }
        },
        "summary": "edit a mediacenter in repository.",
        "tags": [
          "MEDIACENTER v1"
        ]
      }
    },
    "/mediacenter/v1/mediacenter/{repository}/{mediacenter}/licenses": {
      "post": {
        "operationId": "getMediacenterLicensedNodes",
        "parameters": [
          {
            "description": "ID of repository (or \"-home-\" for home repository)",
            "in": "path",
            "name": "repository",
            "required": true,
            "schema": {
              "default": "-home-",
              "type": "string"
            }
          },
          {
            "description": "maximum items per page",
            "in": "query",
            "name": "maxItems",
            "schema": {
              "default": 10,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "skip a number of items",
            "in": "query",
            "name": "skipCount",
            "schema": {
              "default": 0,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "sort properties",
            "in": "query",
            "name": "sortProperties",
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "description": "sort ascending, true if not set. Use multiple values to change the direction according to the given property at the same index",
            "in": "query",
            "name": "sortAscending",
            "schema": {
              "items": {
                "type": "boolean"
              },
              "type": "array"
            }
          },
          {
            "description": "property filter for result nodes (or \"-all-\" for all properties)",
            "in": "query",
            "name": "propertyFilter",
            "schema": {
              "items": {
                "default": "-all-",
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "description": "authorityName of the mediacenter that licenses nodes",
            "in": "path",
            "name": "mediacenter",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "searchword of licensed nodes",
            "in": "query",
            "name": "searchword",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchParameters"
              }
            }
          },
          "description": "search parameters",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Group"
                  },
                  "type": "array"
                }
              }
            },
            "description": "OK."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Preconditions are not present."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization failed."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Session user has insufficient rights to perform this operation."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Ressources are not found."
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Duplicate Entity/Node conflict (Node with same name exists)"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Fatal error occured."
          }
        },
        "summary": "get nodes that are licensed by the given mediacenter",
        "tags": [
          "MEDIACENTER v1"
        ]
      }
    },
    "/mediacenter/v1/mediacenter/{repository}/{mediacenter}/licenses/export": {
      "post": {
        "description": "e.g. cm:name",
        "operationId": "exportMediacenterLicensedNodes",
        "parameters": [
          {
            "description": "ID of repository (or \"-home-\" for home repository)",
            "in": "path",
            "name": "repository",
            "required": true,
            "schema": {
              "default": "-home-",
              "type": "string"
            }
          },
          {
            "description": "sort properties",
            "in": "query",
            "name": "sortProperties",
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "description": "sort ascending, true if not set. Use multiple values to change the direction according to the given property at the same index",
            "in": "query",
            "name": "sortAscending",
            "schema": {
              "items": {
                "type": "boolean"
              },
              "type": "array"
            }
          },
          {
            "description": "properties to fetch, use parent::<property> to include parent property values",
            "in": "query",
            "name": "properties",
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "description": "authorityName of the mediacenter that licenses nodes",
            "in": "path",
            "name": "mediacenter",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchParameters"
              }
            }
          },
          "description": "search parameters",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "OK."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Preconditions are not present."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization failed."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Session user has insufficient rights to perform this operation."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Ressources are not found."
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Duplicate Entity/Node conflict (Node with same name exists)"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Fatal error occured."
          }
        },
        "summary": "get nodes that are licensed by the given mediacenter",
        "tags": [
          "MEDIACENTER v1"
        ]
      }
    },
    "/mediacenter/v1/mediacenter/{repository}/{mediacenter}/manages": {
      "get": {
        "operationId": "getMediacenterGroups",
        "parameters": [
          {
            "description": "ID of repository (or \"-home-\" for home repository)",
            "in": "path",
            "name": "repository",
            "required": true,
            "schema": {
              "default": "-home-",
              "type": "string"
            }
          },
          {
            "description": "authorityName of the mediacenter that should manage the group",
            "in": "path",
            "name": "mediacenter",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Group"
                  },
                  "type": "array"
                }
              }
            },
            "description": "OK."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Preconditions are not present."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization failed."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Session user has insufficient rights to perform this operation."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Ressources are not found."
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Duplicate Entity/Node conflict (Node with same name exists)"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Fatal error occured."
          }
        },
        "summary": "get groups that are managed by the given mediacenter",
        "tags": [
          "MEDIACENTER v1"
        ]
      }
    },
    "/mediacenter/v1/mediacenter/{repository}/{mediacenter}/manages/{group}": {
      "delete": {
        "description": "admin rights are required.",
        "operationId": "removeMediacenterGroup",
        "parameters": [
          {
            "description": "ID of repository (or \"-home-\" for home repository)",
            "in": "path",
            "name": "repository",
            "required": true,
            "schema": {
              "default": "-home-",
              "type": "string"
            }
          },
          {
            "description": "authorityName of the mediacenter that should manage the group",
            "in": "path",
            "name": "mediacenter",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "authorityName of the group that should not longer be managed by that mediacenter",
            "in": "path",
            "name": "group",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Group"
                  },
                  "type": "array"
                }
              }
            },
            "description": "OK."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Preconditions are not present."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization failed."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Session user has insufficient rights to perform this operation."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Ressources are not found."
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Duplicate Entity/Node conflict (Node with same name exists)"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Fatal error occured."
          }
        },
        "summary": "delete a group that is managed by the given mediacenter",
        "tags": [
          "MEDIACENTER v1"
        ]
      },
      "put": {
        "description": "although not restricted, it is recommended that the group is an edu-sharing organization (admin rights are required)",
        "operationId": "addMediacenterGroup",
        "parameters": [
          {
            "description": "ID of repository (or \"-home-\" for home repository)",
            "in": "path",
            "name": "repository",
            "required": true,
            "schema": {
              "default": "-home-",
              "type": "string"
            }
          },
          {
            "description": "authorityName of the mediacenter that should manage the group",
            "in": "path",
            "name": "mediacenter",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "authorityName of the group that should be managed by that mediacenter",
            "in": "path",
            "name": "group",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Group"
                  },
                  "type": "array"
                }
              }
            },
            "description": "OK."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Preconditions are not present."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization failed."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Session user has insufficient rights to perform this operation."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Ressources are not found."
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Duplicate Entity/Node conflict (Node with same name exists)"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Fatal error occured."
          }
        },
        "summary": "add a group that is managed by the given mediacenter",
        "tags": [
          "MEDIACENTER v1"
        ]
      }
    },
    "/network/v1/repositories": {
      "get": {
        "description": "Get repositories.",
        "operationId": "getRepositories",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RepoEntries"
                }
              }
            },
            "description": "OK."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Preconditions are not present."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization failed."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Session user has insufficient rights to perform this operation."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Ressources are not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Fatal error occured."
          }
        },
        "summary": "Get repositories.",
        "tags": [
          "NETWORK v1"
        ]
      }
    },
    "/network/v1/service": {
      "get": {
        "description": "Get the servic entry from the current repository.",
        "operationId": "getService",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StoredService"
                }
              }
            },
            "description": "OK."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Preconditions are not present."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization failed."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Session user has insufficient rights to perform this operation."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Ressources are not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Fatal error occured."
          }
        },
        "summary": "Get own service.",
        "tags": [
          "NETWORK v1"
        ]
      }
    },
    "/network/v1/services": {
      "get": {
        "description": "Get registerted services.",
        "operationId": "getServices",
        "parameters": [
          {
            "description": "search or filter for services",
            "in": "query",
            "name": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/StoredService"
                  },
                  "type": "array"
                }
              }
            },
            "description": "OK."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Preconditions are not present."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization failed."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Session user has insufficient rights to perform this operation."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Ressources are not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Fatal error occured."
          }
        },
        "summary": "Get services.",
        "tags": [
          "NETWORK v1"
        ]
      },
      "post": {
        "description": "Register a new service.",
        "operationId": "addService",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Service"
              }
            }
          },
          "description": "Service data object"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StoredService"
                }
              }
            },
            "description": "OK."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Preconditions are not present."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization failed."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Session user has insufficient rights to perform this operation."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Ressources are not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Fatal error occured."
          }
        },
        "summary": "Register service.",
        "tags": [
          "NETWORK v1"
        ]
      }
    },
    "/network/v1/services/{id}": {
      "put": {
        "description": "Update an existing service.",
        "operationId": "updateService",
        "parameters": [
          {
            "description": "Service id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Service"
              }
            }
          },
          "description": "Service data object"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StoredService"
                }
              }
            },
            "description": "OK."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Preconditions are not present."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization failed."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Session user has insufficient rights to perform this operation."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Ressources are not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Fatal error occured."
          }
        },
        "summary": "Update a service.",
        "tags": [
          "NETWORK v1"
        ]
      }
    },
    "/node/v1/nodes/{repository}": {
      "post": {
        "description": "Searching nodes.",
        "operationId": "getNodes",
        "parameters": [
          {
            "description": "ID of repository (or \"-home-\" for home repository)",
            "in": "path",
            "name": "repository",
            "required": true,
            "schema": {
              "default": "-home-",
              "type": "string"
            }
          },
          {
            "description": "lucene query",
            "in": "query",
            "name": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "facets",
            "in": "query",
            "name": "facets",
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "description": "maximum items per page",
            "in": "query",
            "name": "maxItems",
            "schema": {
              "default": 10,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "skip a number of items",
            "in": "query",
            "name": "skipCount",
            "schema": {
              "default": 0,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "sort properties",
            "in": "query",
            "name": "sortProperties",
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "description": "sort ascending, true if not set. Use multiple values to change the direction according to the given property at the same index",
            "in": "query",
            "name": "sortAscending",
            "schema": {
              "items": {
                "type": "boolean"
              },
              "type": "array"
            }
          },
          {
            "description": "property filter for result nodes (or \"-all-\" for all properties)",
            "in": "query",
            "name": "propertyFilter",
            "schema": {
              "items": {
                "default": "-all-",
                "type": "string"
              },
              "type": "array"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchResult"
                }
              }
            },
            "description": "OK."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Preconditions are not present."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization failed."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Session user has insufficient rights to perform this operation."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Ressources are not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Fatal error occured."
          }
        },
        "summary": "Searching nodes.",
        "tags": [
          "NODE v1"
        ]
      }
    },
    "/node/v1/nodes/{repository}/{node}": {
      "delete": {
        "description": "Delete node.",
        "operationId": "delete",
        "parameters": [
          {
            "description": "ID of repository (or \"-home-\" for home repository)",
            "in": "path",
            "name": "repository",
            "required": true,
            "schema": {
              "default": "-home-",
              "type": "string"
            }
          },
          {
            "description": "ID of node",
            "in": "path",
            "name": "node",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "move the node to recycle",
            "in": "query",
            "name": "recycle",
            "schema": {
              "default": true,
              "type": "boolean"
            }
          },
          {
            "description": "protocol",
            "in": "query",
            "name": "protocol",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "store",
            "in": "query",
            "name": "store",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "OK."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Preconditions are not present."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization failed."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Session user has insufficient rights to perform this operation."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Ressources are not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Fatal error occured."
          }
        },
        "summary": "Delete node.",
        "tags": [
          "NODE v1"
        ]
      }
    },
    "/node/v1/nodes/{repository}/{node}/aspects": {
      "put": {
        "description": "Add aspect to node.",
        "operationId": "addAspects",
        "parameters": [
          {
            "description": "ID of repository (or \"-home-\" for home repository)",
            "in": "path",
            "name": "repository",
            "required": true,
            "schema": {
              "default": "-home-",
              "type": "string"
            }
          },
          {
            "description": "ID of node",
            "in": "path",
            "name": "node",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          },
          "description": "aspect name, e.g. ccm:lomreplication",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NodeEntry"
                }
              }
            },
            "description": "OK."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Preconditions are not present."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization failed."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Session user has insufficient rights to perform this operation."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Ressources are not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Fatal error occured."
          }
        },
        "summary": "Add aspect to node.",
        "tags": [
          "NODE v1"
        ]
      }
    },
    "/node/v1/nodes/{repository}/{node}/assocs": {
      "get": {
        "description": "Get nodes related based on an assoc.",
        "operationId": "getAssocs",
        "parameters": [
          {
            "description": "ID of repository (or \"-home-\" for home repository)",
            "in": "path",
            "name": "repository",
            "required": true,
            "schema": {
              "default": "-home-",
              "type": "string"
            }
          },
          {
            "description": "ID of node",
            "in": "path",
            "name": "node",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "maximum items per page",
            "in": "query",
            "name": "maxItems",
            "schema": {
              "default": 500,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "skip a number of items",
            "in": "query",
            "name": "skipCount",
            "schema": {
              "default": 0,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "sort properties",
            "in": "query",
            "name": "sortProperties",
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "description": "sort ascending, true if not set. Use multiple values to change the direction according to the given property at the same index",
            "in": "query",
            "name": "sortAscending",
            "schema": {
              "items": {
                "type": "boolean"
              },
              "type": "array"
            }
          },
          {
            "description": "Either where the given node should be the \"SOURCE\" or the \"TARGET\"",
            "in": "query",
            "name": "direction",
            "required": true,
            "schema": {
              "enum": [
                "SOURCE",
                "TARGET"
              ],
              "type": "string"
            }
          },
          {
            "description": "Association name (e.g. ccm:forkio).",
            "in": "query",
            "name": "assocName",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "property filter for result nodes (or \"-all-\" for all properties)",
            "in": "query",
            "name": "propertyFilter",
            "schema": {
              "items": {
                "default": "-all-",
                "type": "string"
              },
              "type": "array"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NodeEntries"
                }
              }
            },
            "description": "OK."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Preconditions are not present."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization failed."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Session user has insufficient rights to perform this operation."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Ressources are not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Fatal error occured."
          }
        },
        "summary": "Get related nodes.",
        "tags": [
          "NODE v1"
        ]
      }
    },
    "/node/v1/nodes/{repository}/{node}/children": {
      "get": {
        "description": "Get children of node.",
        "operationId": "getChildren",
        "parameters": [
          {
            "description": "ID of repository (or \"-home-\" for home repository)",
            "in": "path",
            "name": "repository",
            "required": true,
            "schema": {
              "default": "-home-",
              "type": "string"
            }
          },
          {
            "description": "ID of parent node (or \"-userhome-\" for home directory of current user, \"-shared_files-\" for shared folders, \"-to_me_shared_files\" for shared files for the user,\"-my_shared_files-\" for files shared by the user, \"-inbox-\" for the inbox, \"-workflow_receive-\" for files assigned by workflow, \"-saved_search-\" for saved searches of the user)",
            "in": "path",
            "name": "node",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "maximum items per page",
            "in": "query",
            "name": "maxItems",
            "schema": {
              "default": 500,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "skip a number of items",
            "in": "query",
            "name": "skipCount",
            "schema": {
              "default": 0,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "filter by type files,folders",
            "in": "query",
            "name": "filter",
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "description": "sort properties",
            "in": "query",
            "name": "sortProperties",
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "description": "sort ascending, true if not set. Use multiple values to change the direction according to the given property at the same index",
            "in": "query",
            "name": "sortAscending",
            "schema": {
              "items": {
                "type": "boolean"
              },
              "type": "array"
            }
          },
          {
            "description": "Filter for a specific association. May be empty",
            "in": "query",
            "name": "assocName",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "property filter for result nodes (or \"-all-\" for all properties)",
            "in": "query",
            "name": "propertyFilter",
            "schema": {
              "items": {
                "default": "-all-",
                "type": "string"
              },
              "type": "array"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NodeEntries"
                }
              }
            },
            "description": "OK."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Preconditions are not present."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization failed."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Session user has insufficient rights to perform this operation."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Ressources are not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Fatal error occured."
          }
        },
        "summary": "Get children of node.",
        "tags": [
          "NODE v1"
        ]
      },
      "post": {
        "description": "Create a new child.",
        "operationId": "createChild",
        "parameters": [
          {
            "description": "ID of repository (or \"-home-\" for home repository)",
            "in": "path",
            "name": "repository",
            "required": true,
            "schema": {
              "default": "-home-",
              "type": "string"
            }
          },
          {
            "description": "ID of parent node use -userhome- for userhome or -inbox- for inbox node",
            "in": "path",
            "name": "node",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "type of node",
            "in": "query",
            "name": "type",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "aspects of node",
            "in": "query",
            "name": "aspects",
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "description": "rename if the same node name exists",
            "in": "query",
            "name": "renameIfExists",
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "description": "comment, leave empty = no inital version",
            "in": "query",
            "name": "versionComment",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Association type, can be empty",
            "in": "query",
            "name": "assocType",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "additionalProperties": {
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                "type": "object"
              }
            }
          },
          "description": "properties, example: {\"{http://www.alfresco.org/model/content/1.0}name\": [\"test\"]}",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NodeEntry"
                }
              }
            },
            "description": "OK."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Preconditions are not present."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization failed."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Session user has insufficient rights to perform this operation."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Ressources are not found."
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Duplicate Entity/Node conflict (Node with same name exists)"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Fatal error occured."
          }
        },
        "summary": "Create a new child.",
        "tags": [
          "NODE v1"
        ]
      }
    },
    "/node/v1/nodes/{repository}/{node}/children/_copy": {
      "post": {
        "description": "Create a new child by copying.",
        "operationId": "createChildByCopying",
        "parameters": [
          {
            "description": "ID of repository (or \"-home-\" for home repository)",
            "in": "path",
            "name": "repository",
            "required": true,
            "schema": {
              "default": "-home-",
              "type": "string"
            }
          },
          {
            "description": "ID of parent node",
            "in": "path",
            "name": "node",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "ID of source node",
            "in": "query",
            "name": "source",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "flag for children",
            "in": "query",
            "name": "withChildren",
            "required": true,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NodeEntry"
                }
              }
            },
            "description": "OK."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Preconditions are not present."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization failed."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Session user has insufficient rights to perform this operation."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Ressources are not found."
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Duplicate Entity/Node conflict (Node with same name exists)"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Fatal error occured."
          }
        },
        "summary": "Create a new child by copying.",
        "tags": [
          "NODE v1"
        ]
      }
    },
    "/node/v1/nodes/{repository}/{node}/children/_fork": {
      "post": {
        "operationId": "createForkOfNode",
        "parameters": [
          {
            "description": "ID of repository (or \"-home-\" for home repository)",
            "in": "path",
            "name": "repository",
            "required": true,
            "schema": {
              "default": "-home-",
              "type": "string"
            }
          },
          {
            "description": "ID of parent node",
            "in": "path",
            "name": "node",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "ID of source node",
            "in": "query",
            "name": "source",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "flag for children",
            "in": "query",
            "name": "withChildren",
            "required": true,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NodeEntry"
                }
              }
            },
            "description": "OK."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Preconditions are not present."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization failed."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Session user has insufficient rights to perform this operation."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Ressources are not found."
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Duplicate Entity/Node conflict (Node with same name exists)"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Fatal error occured."
          }
        },
        "summary": "Create a copy of a node by creating a forked version (variant).",
        "tags": [
          "NODE v1"
        ]
      }
    },
    "/node/v1/nodes/{repository}/{node}/children/_move": {
      "post": {
        "description": "Create a new child by moving.",
        "operationId": "createChildByMoving",
        "parameters": [
          {
            "description": "ID of repository (or \"-home-\" for home repository)",
            "in": "path",
            "name": "repository",
            "required": true,
            "schema": {
              "default": "-home-",
              "type": "string"
            }
          },
          {
            "description": "ID of parent node",
            "in": "path",
            "name": "node",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "ID of source node",
            "in": "query",
            "name": "source",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NodeEntry"
                }
              }
            },
            "description": "OK."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Preconditions are not present."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization failed."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Session user has insufficient rights to perform this operation."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Ressources are not found."
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Duplicate Entity/Node conflict (Node with same name exists)"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Fatal error occured."
          }
        },
        "summary": "Create a new child by moving.",
        "tags": [
          "NODE v1"
        ]
      }
    },
    "/node/v1/nodes/{repository}/{node}/content": {
      "post": {
        "description": "Change content of node.",
        "operationId": "changeContent_1",
        "parameters": [
          {
            "description": "ID of repository (or \"-home-\" for home repository)",
            "in": "path",
            "name": "repository",
            "required": true,
            "schema": {
              "default": "-home-",
              "type": "string"
            }
          },
          {
            "description": "ID of node",
            "in": "path",
            "name": "node",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "comment, leave empty = no new version, otherwise new version is generated",
            "in": "query",
            "name": "versionComment",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "MIME-Type",
            "in": "query",
            "name": "mimetype",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "properties": {
                  "file": {
                    "description": "file upload",
                    "format": "binary",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NodeEntry"
                }
              }
            },
            "description": "OK."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Preconditions are not present."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization failed."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Session user has insufficient rights to perform this operation."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Ressources are not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Fatal error occured."
          }
        },
        "summary": "Change content of node.",
        "tags": [
          "NODE v1"
        ]
      }
    },
    "/node/v1/nodes/{repository}/{node}/import": {
      "post": {
        "description": "Import a node from a foreign repository to the local repository.",
        "operationId": "importNode",
        "parameters": [
          {
            "description": "The id of the foreign repository",
            "in": "path",
            "name": "repository",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "ID of node",
            "in": "path",
            "name": "node",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Parent node where to store it locally, may also use -userhome- or -inbox-",
            "in": "query",
            "name": "parent",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NodeEntry"
                }
              }
            },
            "description": "OK."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Preconditions are not present."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization failed."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Session user has insufficient rights to perform this operation."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Ressources are not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Fatal error occured."
          }
        },
        "summary": "Import node",
        "tags": [
          "NODE v1"
        ]
      }
    },
    "/node/v1/nodes/{repository}/{node}/lock/status": {
      "get": {
        "description": "locked status of a node.",
        "operationId": "islocked",
        "parameters": [
          {
            "description": "ID of repository (or \"-home-\" for home repository)",
            "in": "path",
            "name": "repository",
            "required": true,
            "schema": {
              "default": "-home-",
              "type": "string"
            }
          },
          {
            "description": "ID of node",
            "in": "path",
            "name": "node",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NodeLocked"
                }
              }
            },
            "description": "OK."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Preconditions are not present."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization failed."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Session user has insufficient rights to perform this operation."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Ressources are not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Fatal error occured."
          }
        },
        "summary": "locked status of a node.",
        "tags": [
          "NODE v1"
        ]
      }
    },
    "/node/v1/nodes/{repository}/{node}/lock/unlock": {
      "get": {
        "description": "unlock node.",
        "operationId": "unlock",
        "parameters": [
          {
            "description": "ID of repository (or \"-home-\" for home repository)",
            "in": "path",
            "name": "repository",
            "required": true,
            "schema": {
              "default": "-home-",
              "type": "string"
            }
          },
          {
            "description": "ID of node",
            "in": "path",
            "name": "node",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "OK."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Preconditions are not present."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization failed."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Session user has insufficient rights to perform this operation."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Ressources are not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Fatal error occured."
          }
        },
        "summary": "unlock node.",
        "tags": [
          "NODE v1"
        ]
      }
    },
    "/node/v1/nodes/{repository}/{node}/lrmi": {
      "get": {
        "description": "Get lrmi data of node.",
        "operationId": "getLrmiData",
        "parameters": [
          {
            "description": "ID of repository (or \"-home-\" for home repository)",
            "in": "path",
            "name": "repository",
            "required": true,
            "schema": {
              "default": "-home-",
              "type": "string"
            }
          },
          {
            "description": "ID of node",
            "in": "path",
            "name": "node",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Version of the node",
            "in": "query",
            "name": "version",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JSONObject"
                }
              }
            },
            "description": "OK."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Preconditions are not present."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization failed."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Session user has insufficient rights to perform this operation."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Ressources are not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Fatal error occured."
          }
        },
        "summary": "Get lrmi data.",
        "tags": [
          "NODE v1"
        ]
      }
    },
    "/node/v1/nodes/{repository}/{node}/metadata": {
      "get": {
        "description": "Get metadata of node.",
        "operationId": "getMetadata",
        "parameters": [
          {
            "description": "ID of repository (or \"-home-\" for home repository)",
            "in": "path",
            "name": "repository",
            "required": true,
            "schema": {
              "default": "-home-",
              "type": "string"
            }
          },
          {
            "description": "ID of node",
            "in": "path",
            "name": "node",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "property filter for result nodes (or \"-all-\" for all properties)",
            "in": "query",
            "name": "propertyFilter",
            "schema": {
              "items": {
                "default": "-all-",
                "type": "string"
              },
              "type": "array"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NodeEntry"
                }
              }
            },
            "description": "OK."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Preconditions are not present."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization failed."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Session user has insufficient rights to perform this operation."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Ressources are not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Fatal error occured."
          }
        },
        "summary": "Get metadata of node.",
        "tags": [
          "NODE v1"
        ]
      },
      "post": {
        "description": "Change metadata of node (new version).",
        "operationId": "changeMetadataWithVersioning",
        "parameters": [
          {
            "description": "ID of repository (or \"-home-\" for home repository)",
            "in": "path",
            "name": "repository",
            "required": true,
            "schema": {
              "default": "-home-",
              "type": "string"
            }
          },
          {
            "description": "ID of node",
            "in": "path",
            "name": "node",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "comment",
            "in": "query",
            "name": "versionComment",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "additionalProperties": {
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                "type": "object"
              }
            }
          },
          "description": "properties",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NodeEntry"
                }
              }
            },
            "description": "OK."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Preconditions are not present."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization failed."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Session user has insufficient rights to perform this operation."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Ressources are not found."
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Duplicate Entity/Node conflict (Node with same name exists)"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Fatal error occured."
          }
        },
        "summary": "Change metadata of node (new version).",
        "tags": [
          "NODE v1"
        ]
      },
      "put": {
        "description": "Change metadata of node.",
        "operationId": "changeMetadata",
        "parameters": [
          {
            "description": "ID of repository (or \"-home-\" for home repository)",
            "in": "path",
            "name": "repository",
            "required": true,
            "schema": {
              "default": "-home-",
              "type": "string"
            }
          },
          {
            "description": "ID of node",
            "in": "path",
            "name": "node",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "additionalProperties": {
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                "type": "object"
              }
            }
          },
          "description": "properties",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NodeEntry"
                }
              }
            },
            "description": "OK."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Preconditions are not present."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization failed."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Session user has insufficient rights to perform this operation."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Ressources are not found."
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Duplicate Entity/Node conflict (Node with same name exists)"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Fatal error occured."
          }
        },
        "summary": "Change metadata of node.",
        "tags": [
          "NODE v1"
        ]
      }
    },
    "/node/v1/nodes/{repository}/{node}/metadata/copy/{from}": {
      "put": {
        "description": "Copies all common metadata from one note to another. Current user needs write access to the target node and read access to the source node.",
        "operationId": "copyMetadata",
        "parameters": [
          {
            "description": "ID of repository (or \"-home-\" for home repository)",
            "in": "path",
            "name": "repository",
            "required": true,
            "schema": {
              "default": "-home-",
              "type": "string"
            }
          },
          {
            "description": "ID of node",
            "in": "path",
            "name": "node",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The node where to copy the metadata from",
            "in": "path",
            "name": "from",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NodeEntry"
                }
              }
            },
            "description": "OK."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Preconditions are not present."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization failed."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Session user has insufficient rights to perform this operation."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Ressources are not found."
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Duplicate Entity/Node conflict (Node with same name exists)"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Fatal error occured."
          }
        },
        "summary": "Copy metadata from another node.",
        "tags": [
          "NODE v1"
        ]
      }
    },
    "/node/v1/nodes/{repository}/{node}/metadata/template": {
      "get": {
        "description": "All the given metadata will be inherited to child nodes.",
        "operationId": "getTemplateMetadata",
        "parameters": [
          {
            "description": "ID of repository (or \"-home-\" for home repository)",
            "in": "path",
            "name": "repository",
            "required": true,
            "schema": {
              "default": "-home-",
              "type": "string"
            }
          },
          {
            "description": "ID of node",
            "in": "path",
            "name": "node",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NodeEntry"
                }
              }
            },
            "description": "OK."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Preconditions are not present."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization failed."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Session user has insufficient rights to perform this operation."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Ressources are not found."
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Duplicate Entity/Node conflict (Node with same name exists)"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Fatal error occured."
          }
        },
        "summary": "Get the metadata template + status for this folder.",
        "tags": [
          "NODE v1"
        ]
      },
      "put": {
        "description": "All the given metadata will be inherited to child nodes.",
        "operationId": "changeTemplateMetadata",
        "parameters": [
          {
            "description": "ID of repository (or \"-home-\" for home repository)",
            "in": "path",
            "name": "repository",
            "required": true,
            "schema": {
              "default": "-home-",
              "type": "string"
            }
          },
          {
            "description": "ID of node",
            "in": "path",
            "name": "node",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Is the inherition currently enabled",
            "in": "query",
            "name": "enable",
            "required": true,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "additionalProperties": {
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                "type": "object"
              }
            }
          },
          "description": "properties",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NodeEntry"
                }
              }
            },
            "description": "OK."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Preconditions are not present."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization failed."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Session user has insufficient rights to perform this operation."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Ressources are not found."
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Duplicate Entity/Node conflict (Node with same name exists)"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Fatal error occured."
          }
        },
        "summary": "Set the metadata template for this folder.",
        "tags": [
          "NODE v1"
        ]
      }
    },
    "/node/v1/nodes/{repository}/{node}/notifys": {
      "get": {
        "description": "Ordered by the time of each notify",
        "operationId": "getNotifyList",
        "parameters": [
          {
            "description": "ID of repository (or \"-home-\" for home repository)",
            "in": "path",
            "name": "repository",
            "required": true,
            "schema": {
              "default": "-home-",
              "type": "string"
            }
          },
          {
            "description": "ID of node",
            "in": "path",
            "name": "node",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/NotifyEntry"
                  },
                  "type": "array"
                }
              }
            },
            "description": "OK."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Preconditions are not present."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization failed."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Session user has insufficient rights to perform this operation."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Ressources are not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Fatal error occured."
          }
        },
        "summary": "Get notifys (sharing history) of the node.",
        "tags": [
          "NODE v1"
        ]
      }
    },
    "/node/v1/nodes/{repository}/{node}/owner": {
      "post": {
        "description": "Set owner of node.",
        "operationId": "setOwner",
        "parameters": [
          {
            "description": "ID of repository (or \"-home-\" for home repository)",
            "in": "path",
            "name": "repository",
            "required": true,
            "schema": {
              "default": "-home-",
              "type": "string"
            }
          },
          {
            "description": "ID of node",
            "in": "path",
            "name": "node",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "username",
            "in": "query",
            "name": "username",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "OK."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Preconditions are not present."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization failed."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Session user has insufficient rights to perform this operation."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Ressources are not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Fatal error occured."
          }
        },
        "summary": "Set owner of node.",
        "tags": [
          "NODE v1"
        ]
      }
    },
    "/node/v1/nodes/{repository}/{node}/parents": {
      "get": {
        "description": "Get all parents metadata + own metadata of node. Index 0 is always the current node",
        "operationId": "getParents",
        "parameters": [
          {
            "description": "ID of repository (or \"-home-\" for home repository)",
            "in": "path",
            "name": "repository",
            "required": true,
            "schema": {
              "default": "-home-",
              "type": "string"
            }
          },
          {
            "description": "ID of node",
            "in": "path",
            "name": "node",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "property filter for result nodes (or \"-all-\" for all properties)",
            "in": "query",
            "name": "propertyFilter",
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "description": "activate to return the full alfresco path, otherwise the path for the user home is resolved",
            "in": "query",
            "name": "fullPath",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ParentEntries"
                }
              }
            },
            "description": "OK."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Preconditions are not present."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization failed."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Session user has insufficient rights to perform this operation."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Ressources are not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Fatal error occured."
          }
        },
        "summary": "Get parents of node.",
        "tags": [
          "NODE v1"
        ]
      }
    },
    "/node/v1/nodes/{repository}/{node}/permissions": {
      "get": {
        "description": "Get all permission of node.",
        "operationId": "getPermission",
        "parameters": [
          {
            "description": "ID of repository (or \"-home-\" for home repository)",
            "in": "path",
            "name": "repository",
            "required": true,
            "schema": {
              "default": "-home-",
              "type": "string"
            }
          },
          {
            "description": "ID of node",
            "in": "path",
            "name": "node",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NodePermissionEntry"
                }
              }
            },
            "description": "OK."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Preconditions are not present."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization failed."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Session user has insufficient rights to perform this operation."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Ressources are not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Fatal error occured."
          }
        },
        "summary": "Get all permission of node.",
        "tags": [
          "NODE v1"
        ]
      },
      "post": {
        "description": "Set local permissions of node.",
        "operationId": "setPermission",
        "parameters": [
          {
            "description": "ID of repository (or \"-home-\" for home repository)",
            "in": "path",
            "name": "repository",
            "required": true,
            "schema": {
              "default": "-home-",
              "type": "string"
            }
          },
          {
            "description": "ID of node",
            "in": "path",
            "name": "node",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "mailtext",
            "in": "query",
            "name": "mailtext",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "sendMail",
            "in": "query",
            "name": "sendMail",
            "required": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "sendCopy",
            "in": "query",
            "name": "sendCopy",
            "required": true,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ACL"
              }
            }
          },
          "description": "permissions",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "OK."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Preconditions are not present."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization failed."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Session user has insufficient rights to perform this operation."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Ressources are not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Fatal error occured."
          }
        },
        "summary": "Set local permissions of node.",
        "tags": [
          "NODE v1"
        ]
      }
    },
    "/node/v1/nodes/{repository}/{node}/permissions/jwt": {
      "get": {
        "description": "Generate a jwt access token of the node",
        "operationId": "getJWT",
        "parameters": [
          {
            "description": "ID of repository (or \"-home-\" for home repository)",
            "in": "path",
            "name": "repository",
            "required": true,
            "schema": {
              "default": "-home-",
              "type": "string"
            }
          },
          {
            "description": "ID of node",
            "in": "path",
            "name": "node",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/text": {
                "schema": {
                  "format": "byte",
                  "type": "string"
                }
              }
            },
            "description": "OK."
          },
          "400": {
            "content": {
              "application/text": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Preconditions are not present."
          },
          "401": {
            "content": {
              "application/text": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization failed."
          },
          "403": {
            "content": {
              "application/text": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Session user has insufficient rights to perform this operation."
          },
          "404": {
            "content": {
              "application/text": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Ressources are not found."
          },
          "500": {
            "content": {
              "application/text": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Fatal error occured."
          }
        },
        "summary": "Generate a jwt access token of the node.",
        "tags": [
          "NODE v1"
        ]
      }
    },
    "/node/v1/nodes/{repository}/{node}/permissions/raw": {
      "get": {
        "description": "Get all permission of node (not grouped, requires admin).",
        "operationId": "getRawPermission",
        "parameters": [
          {
            "description": "ID of repository (or \"-home-\" for home repository)",
            "in": "path",
            "name": "repository",
            "required": true,
            "schema": {
              "default": "-home-",
              "type": "string"
            }
          },
          {
            "description": "ID of node",
            "in": "path",
            "name": "node",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ACL"
                }
              }
            },
            "description": "OK."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Preconditions are not present."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization failed."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Session user has insufficient rights to perform this operation."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Ressources are not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Fatal error occured."
          }
        },
        "summary": "Get all permission of node (not grouped, requires admin).",
        "tags": [
          "NODE v1"
        ]
      }
    },
    "/node/v1/nodes/{repository}/{node}/permissions/{user}": {
      "get": {
        "description": "Check for actual permissions (also when user is in groups) for a specific node",
        "operationId": "hasPermission",
        "parameters": [
          {
            "description": "ID of repository (or \"-home-\" for home repository)",
            "in": "path",
            "name": "repository",
            "required": true,
            "schema": {
              "default": "-home-",
              "type": "string"
            }
          },
          {
            "description": "ID of node",
            "in": "path",
            "name": "node",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Authority (user/group) to check (use \"-me-\" for current user",
            "in": "path",
            "name": "user",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                }
              }
            },
            "description": "OK."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Preconditions are not present."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization failed."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Session user has insufficient rights to perform this operation."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Ressources are not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Fatal error occured."
          }
        },
        "summary": "Which permissions has user/group for node.",
        "tags": [
          "NODE v1"
        ]
      }
    },
    "/node/v1/nodes/{repository}/{node}/prepareUsage": {
      "post": {
        "description": "create remote object and get properties.",
        "operationId": "prepareUsage",
        "parameters": [
          {
            "description": "ID of repository (or \"-home-\" for home repository)",
            "in": "path",
            "name": "repository",
            "required": true,
            "schema": {
              "default": "-home-",
              "type": "string"
            }
          },
          {
            "description": "ID of node",
            "in": "path",
            "name": "node",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NodeRemote"
                }
              }
            },
            "description": "OK."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Preconditions are not present."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization failed."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Session user has insufficient rights to perform this operation."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Ressources are not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Fatal error occured."
          }
        },
        "summary": "create remote object and get properties.",
        "tags": [
          "NODE v1"
        ]
      }
    },
    "/node/v1/nodes/{repository}/{node}/preview": {
      "delete": {
        "operationId": "deletePreview",
        "parameters": [
          {
            "description": "ID of repository (or \"-home-\" for home repository)",
            "in": "path",
            "name": "repository",
            "required": true,
            "schema": {
              "default": "-home-",
              "type": "string"
            }
          },
          {
            "description": "ID of node",
            "in": "path",
            "name": "node",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NodeEntry"
                }
              }
            },
            "description": "OK."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Preconditions are not present."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization failed."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Session user has insufficient rights to perform this operation."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Ressources are not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Fatal error occured."
          }
        },
        "summary": "Delete preview of node.",
        "tags": [
          "NODE v1"
        ]
      },
      "post": {
        "description": "Change preview of node.",
        "operationId": "changePreview",
        "parameters": [
          {
            "description": "ID of repository (or \"-home-\" for home repository)",
            "in": "path",
            "name": "repository",
            "required": true,
            "schema": {
              "default": "-home-",
              "type": "string"
            }
          },
          {
            "description": "ID of node",
            "in": "path",
            "name": "node",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "MIME-Type",
            "in": "query",
            "name": "mimetype",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "create a node version",
            "in": "query",
            "name": "createVersion",
            "schema": {
              "default": true,
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "properties": {
                  "image": {
                    "type": "object"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NodeEntry"
                }
              }
            },
            "description": "OK."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Preconditions are not present."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization failed."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Session user has insufficient rights to perform this operation."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Ressources are not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Fatal error occured."
          }
        },
        "summary": "Change preview of node.",
        "tags": [
          "NODE v1"
        ]
      }
    },
    "/node/v1/nodes/{repository}/{node}/property": {
      "post": {
        "description": "When the property is unset (null), it will be removed",
        "operationId": "setProperty",
        "parameters": [
          {
            "description": "ID of repository (or \"-home-\" for home repository)",
            "in": "path",
            "name": "repository",
            "required": true,
            "schema": {
              "default": "-home-",
              "type": "string"
            }
          },
          {
            "description": "ID of node",
            "in": "path",
            "name": "node",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "property",
            "in": "query",
            "name": "property",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "keepModifiedDate",
            "in": "query",
            "name": "keepModifiedDate",
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "description": "value",
            "in": "query",
            "name": "value",
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "OK."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Preconditions are not present."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization failed."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Session user has insufficient rights to perform this operation."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Ressources are not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Fatal error occured."
          }
        },
        "summary": "Set single property of node.",
        "tags": [
          "NODE v1"
        ]
      }
    },
    "/node/v1/nodes/{repository}/{node}/publish": {
      "get": {
        "description": "Get all published copies of the current node",
        "operationId": "getPublishedCopies",
        "parameters": [
          {
            "description": "ID of repository (or \"-home-\" for home repository)",
            "in": "path",
            "name": "repository",
            "required": true,
            "schema": {
              "default": "-home-",
              "type": "string"
            }
          },
          {
            "description": "ID of node",
            "in": "path",
            "name": "node",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NodeEntries"
                }
              }
            },
            "description": "OK."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Preconditions are not present."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization failed."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Session user has insufficient rights to perform this operation."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Ressources are not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Fatal error occured."
          }
        },
        "summary": "Publish",
        "tags": [
          "NODE v1"
        ]
      },
      "post": {
        "description": "Create a published copy of the current node ",
        "operationId": "publishCopy",
        "parameters": [
          {
            "description": "ID of repository (or \"-home-\" for home repository)",
            "in": "path",
            "name": "repository",
            "required": true,
            "schema": {
              "default": "-home-",
              "type": "string"
            }
          },
          {
            "description": "ID of node",
            "in": "path",
            "name": "node",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "handle mode, if a handle should be created. Skip this parameter if you don't want an handle",
            "in": "query",
            "name": "handleMode",
            "schema": {
              "enum": [
                "distinct",
                "update"
              ],
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/HandleParam"
              }
            }
          },
          "description": "handle parameter, if a handle and/or doi should be created. Skip this parameter if you don't want a handle or doi,"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NodeEntry"
                }
              }
            },
            "description": "OK."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Preconditions are not present."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization failed."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Session user has insufficient rights to perform this operation."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Ressources are not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Fatal error occured."
          }
        },
        "summary": "Publish",
        "tags": [
          "NODE v1"
        ]
      }
    },
    "/node/v1/nodes/{repository}/{node}/publish/revoke": {
      "delete": {
        "description": "Revoke a previously published copy. The content of this copy will be irrevocable removed, only the metadata will remain",
        "operationId": "revokeCopy",
        "parameters": [
          {
            "description": "ID of repository (or \"-home-\" for home repository)",
            "in": "path",
            "name": "repository",
            "required": true,
            "schema": {
              "default": "-home-",
              "type": "string"
            }
          },
          {
            "description": "ID of node",
            "in": "path",
            "name": "node",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RevokeDetails"
              }
            }
          },
          "description": "ID of node",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Node"
                }
              }
            },
            "description": "OK."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Preconditions are not present."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization failed."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Session user has insufficient rights to perform this operation."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Ressources are not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Fatal error occured."
          }
        },
        "summary": "Revoke published copy",
        "tags": [
          "NODE v1"
        ]
      }
    },
    "/node/v1/nodes/{repository}/{node}/report": {
      "post": {
        "description": "Report a node to notify the admin about an issue)",
        "operationId": "reportNode",
        "parameters": [
          {
            "description": "ID of repository (or \"-home-\" for home repository)",
            "in": "path",
            "name": "repository",
            "required": true,
            "schema": {
              "default": "-home-",
              "type": "string"
            }
          },
          {
            "description": "ID of node",
            "in": "path",
            "name": "node",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "the mode of reporting (reporting or feedback)",
            "in": "query",
            "name": "mode",
            "schema": {
              "enum": [
                "ReportProblem",
                "Feedback"
              ],
              "type": "string"
            }
          },
          {
            "description": "the reason for the report",
            "in": "query",
            "name": "reason",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "mail of reporting user",
            "in": "query",
            "name": "userEmail",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "additional user comment",
            "in": "query",
            "name": "userComment",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "OK."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Preconditions are not present."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization failed."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Session user has insufficient rights to perform this operation."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Ressources are not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Fatal error occured."
          }
        },
        "summary": "Report the node.",
        "tags": [
          "NODE v1"
        ]
      }
    },
    "/node/v1/nodes/{repository}/{node}/shares": {
      "get": {
        "description": "Get list of shares (via mail/token) for a node.",
        "operationId": "getShares",
        "parameters": [
          {
            "description": "ID of repository (or \"-home-\" for home repository)",
            "in": "path",
            "name": "repository",
            "required": true,
            "schema": {
              "default": "-home-",
              "type": "string"
            }
          },
          {
            "description": "ID of node",
            "in": "path",
            "name": "node",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Filter for a specific email or use LINK for link shares (Optional)",
            "in": "query",
            "name": "email",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/NodeShare"
                  },
                  "type": "array"
                }
              }
            },
            "description": "OK."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Preconditions are not present."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization failed."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Session user has insufficient rights to perform this operation."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Ressources are not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Fatal error occured."
          }
        },
        "summary": "Get shares of node.",
        "tags": [
          "NODE v1"
        ]
      },
      "put": {
        "description": "Create a new share for a node",
        "operationId": "createShare",
        "parameters": [
          {
            "description": "ID of repository (or \"-home-\" for home repository)",
            "in": "path",
            "name": "repository",
            "required": true,
            "schema": {
              "default": "-home-",
              "type": "string"
            }
          },
          {
            "description": "ID of node",
            "in": "path",
            "name": "node",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "expiry date for this share, leave empty or -1 for unlimited",
            "in": "query",
            "name": "expiryDate",
            "schema": {
              "default": -1,
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "password for this share, use none to not use a password",
            "in": "query",
            "name": "password",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NodeShare"
                }
              }
            },
            "description": "OK."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Preconditions are not present."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization failed."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Session user has insufficient rights to perform this operation."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Ressources are not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Fatal error occured."
          }
        },
        "summary": "Create a share for a node.",
        "tags": [
          "NODE v1"
        ]
      }
    },
    "/node/v1/nodes/{repository}/{node}/shares/{shareId}": {
      "delete": {
        "description": "Remove the specified share id",
        "operationId": "removeShare",
        "parameters": [
          {
            "description": "ID of repository (or \"-home-\" for home repository)",
            "in": "path",
            "name": "repository",
            "required": true,
            "schema": {
              "default": "-home-",
              "type": "string"
            }
          },
          {
            "description": "ID of node",
            "in": "path",
            "name": "node",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "share id",
            "in": "path",
            "name": "shareId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "OK."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Preconditions are not present."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization failed."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Session user has insufficient rights to perform this operation."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Ressources are not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Fatal error occured."
          }
        },
        "summary": "Remove share of a node.",
        "tags": [
          "NODE v1"
        ]
      },
      "post": {
        "description": "update the specified share id",
        "operationId": "updateShare",
        "parameters": [
          {
            "description": "ID of repository (or \"-home-\" for home repository)",
            "in": "path",
            "name": "repository",
            "required": true,
            "schema": {
              "default": "-home-",
              "type": "string"
            }
          },
          {
            "description": "ID of node",
            "in": "path",
            "name": "node",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "share id",
            "in": "path",
            "name": "shareId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "expiry date for this share, leave empty or -1 for unlimited",
            "in": "query",
            "name": "expiryDate",
            "schema": {
              "default": -1,
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "new password for share, leave empty if you don't want to change it",
            "in": "query",
            "name": "password",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NodeShare"
                }
              }
            },
            "description": "OK."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Preconditions are not present."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization failed."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Session user has insufficient rights to perform this operation."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Ressources are not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Fatal error occured."
          }
        },
        "summary": "update share of a node.",
        "tags": [
          "NODE v1"
        ]
      }
    },
    "/node/v1/nodes/{repository}/{node}/stats": {
      "get": {
        "description": "Get statistics (views, downloads) of node. Requires ChangePermissions permission on node",
        "operationId": "getStats",
        "parameters": [
          {
            "description": "ID of repository (or \"-home-\" for home repository)",
            "in": "path",
            "name": "repository",
            "required": true,
            "schema": {
              "default": "-home-",
              "type": "string"
            }
          },
          {
            "description": "ID of node",
            "in": "path",
            "name": "node",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NodeStats"
                }
              }
            },
            "description": "OK."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Preconditions are not present."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization failed."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Session user has insufficient rights to perform this operation."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Ressources are not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Fatal error occured."
          }
        },
        "summary": "Get statistics of node.",
        "tags": [
          "NODE v1"
        ]
      }
    },
    "/node/v1/nodes/{repository}/{node}/textContent": {
      "get": {
        "description": "May fails with 500 if the node can not be read.",
        "operationId": "getTextContent",
        "parameters": [
          {
            "description": "ID of repository (or \"-home-\" for home repository)",
            "in": "path",
            "name": "repository",
            "required": true,
            "schema": {
              "default": "-home-",
              "type": "string"
            }
          },
          {
            "description": "ID of node",
            "in": "path",
            "name": "node",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NodeText"
                }
              }
            },
            "description": "OK."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Preconditions are not present."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization failed."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Session user has insufficient rights to perform this operation."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Ressources are not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Fatal error occured."
          }
        },
        "summary": "Get the text content of a document.",
        "tags": [
          "NODE v1"
        ]
      },
      "post": {
        "description": "Change content of node as text.",
        "operationId": "changeContentAsText",
        "parameters": [
          {
            "description": "ID of repository (or \"-home-\" for home repository)",
            "in": "path",
            "name": "repository",
            "required": true,
            "schema": {
              "default": "-home-",
              "type": "string"
            }
          },
          {
            "description": "ID of node",
            "in": "path",
            "name": "node",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "comment, leave empty = no new version, otherwise new version is generated",
            "in": "query",
            "name": "versionComment",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "MIME-Type",
            "in": "query",
            "name": "mimetype",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "string"
              }
            }
          },
          "description": "The content data to write (text)",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NodeEntry"
                }
              }
            },
            "description": "OK."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Preconditions are not present."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization failed."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Session user has insufficient rights to perform this operation."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Ressources are not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Fatal error occured."
          }
        },
        "summary": "Change content of node as text.",
        "tags": [
          "NODE v1"
        ]
      }
    },
    "/node/v1/nodes/{repository}/{node}/versions": {
      "get": {
        "description": "Get all versions of node.",
        "operationId": "getVersions",
        "parameters": [
          {
            "description": "ID of repository (or \"-home-\" for home repository)",
            "in": "path",
            "name": "repository",
            "required": true,
            "schema": {
              "default": "-home-",
              "type": "string"
            }
          },
          {
            "description": "ID of node",
            "in": "path",
            "name": "node",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NodeVersionRefEntries"
                }
              }
            },
            "description": "OK."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Preconditions are not present."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization failed."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Session user has insufficient rights to perform this operation."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Ressources are not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Fatal error occured."
          }
        },
        "summary": "Get all versions of node.",
        "tags": [
          "NODE v1"
        ]
      }
    },
    "/node/v1/nodes/{repository}/{node}/versions/metadata": {
      "get": {
        "description": "Get all versions of node, including it's metadata.",
        "operationId": "getVersions_1",
        "parameters": [
          {
            "description": "ID of repository (or \"-home-\" for home repository)",
            "in": "path",
            "name": "repository",
            "required": true,
            "schema": {
              "default": "-home-",
              "type": "string"
            }
          },
          {
            "description": "ID of node",
            "in": "path",
            "name": "node",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "property filter for result nodes (or \"-all-\" for all properties)",
            "in": "query",
            "name": "propertyFilter",
            "schema": {
              "items": {
                "default": "-all-",
                "type": "string"
              },
              "type": "array"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NodeVersionEntries"
                }
              }
            },
            "description": "OK."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Preconditions are not present."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization failed."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Session user has insufficient rights to perform this operation."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Ressources are not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Fatal error occured."
          }
        },
        "summary": "Get all versions of node, including it's metadata.",
        "tags": [
          "NODE v1"
        ]
      }
    },
    "/node/v1/nodes/{repository}/{node}/versions/{major}/{minor}/_revert": {
      "put": {
        "description": "Revert to node version.",
        "operationId": "revertVersion",
        "parameters": [
          {
            "description": "ID of repository (or \"-home-\" for home repository)",
            "in": "path",
            "name": "repository",
            "required": true,
            "schema": {
              "default": "-home-",
              "type": "string"
            }
          },
          {
            "description": "ID of node",
            "in": "path",
            "name": "node",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "major version",
            "in": "path",
            "name": "major",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "minor version",
            "in": "path",
            "name": "minor",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NodeEntry"
                }
              }
            },
            "description": "OK."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Preconditions are not present."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization failed."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Session user has insufficient rights to perform this operation."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Ressources are not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Fatal error occured."
          }
        },
        "summary": "Revert to node version.",
        "tags": [
          "NODE v1"
        ]
      }
    },
    "/node/v1/nodes/{repository}/{node}/versions/{major}/{minor}/metadata": {
      "get": {
        "description": "Get metadata of node version.",
        "operationId": "getVersionMetadata",
        "parameters": [
          {
            "description": "ID of repository (or \"-home-\" for home repository)",
            "in": "path",
            "name": "repository",
            "required": true,
            "schema": {
              "default": "-home-",
              "type": "string"
            }
          },
          {
            "description": "ID of node",
            "in": "path",
            "name": "node",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "major version",
            "in": "path",
            "name": "major",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "minor version",
            "in": "path",
            "name": "minor",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "property filter for result nodes (or \"-all-\" for all properties)",
            "in": "query",
            "name": "propertyFilter",
            "schema": {
              "items": {
                "default": "-all-",
                "type": "string"
              },
              "type": "array"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NodeVersionEntry"
                }
              }
            },
            "description": "OK."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Preconditions are not present."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization failed."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Session user has insufficient rights to perform this operation."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Ressources are not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Fatal error occured."
          }
        },
        "summary": "Get metadata of node version.",
        "tags": [
          "NODE v1"
        ]
      }
    },
    "/node/v1/nodes/{repository}/{node}/workflow": {
      "get": {
        "description": "Get workflow history of node.",
        "operationId": "getWorkflowHistory",
        "parameters": [
          {
            "description": "ID of repository (or \"-home-\" for home repository)",
            "in": "path",
            "name": "repository",
            "required": true,
            "schema": {
              "default": "-home-",
              "type": "string"
            }
          },
          {
            "description": "ID of node",
            "in": "path",
            "name": "node",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/WorkflowHistory"
                  },
                  "type": "array"
                }
              }
            },
            "description": "OK."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Preconditions are not present."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization failed."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Session user has insufficient rights to perform this operation."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Ressources are not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Fatal error occured."
          }
        },
        "summary": "Get workflow history.",
        "tags": [
          "NODE v1"
        ]
      },
      "put": {
        "description": "Add workflow entry to node.",
        "operationId": "addWorkflowHistory",
        "parameters": [
          {
            "description": "ID of repository (or \"-home-\" for home repository)",
            "in": "path",
            "name": "repository",
            "required": true,
            "schema": {
              "default": "-home-",
              "type": "string"
            }
          },
          {
            "description": "ID of node",
            "in": "path",
            "name": "node",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WorkflowHistory"
              }
            }
          },
          "description": "The history entry to put (editor and time can be null and will be filled automatically)",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "OK."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Preconditions are not present."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization failed."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Session user has insufficient rights to perform this operation."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Ressources are not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Fatal error occured."
          }
        },
        "summary": "Add workflow.",
        "tags": [
          "NODE v1"
        ]
      }
    },
    "/node/v1/nodes/{repository}/{node}/xapi": {
      "post": {
        "operationId": "storeXApiData",
        "parameters": [
          {
            "description": "ID of repository (or \"-home-\" for home repository)",
            "in": "path",
            "name": "repository",
            "required": true,
            "schema": {
              "default": "-home-",
              "type": "string"
            }
          },
          {
            "description": "ID of node",
            "in": "path",
            "name": "node",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "string"
              }
            }
          },
          "description": "xApi conform json data",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "OK."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Preconditions are not present."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization failed."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Session user has insufficient rights to perform this operation."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Ressources are not found."
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Duplicate Entity/Node conflict (Node with same name exists)"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Fatal error occured."
          }
        },
        "summary": "Store xApi-Conform data for a given node",
        "tags": [
          "NODE v1"
        ]
      }
    },
    "/notification/v1/config": {
      "get": {
        "operationId": "getConfig_2",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotificationConfig"
                }
              }
            },
            "description": "OK."
          }
        },
        "summary": "get the config for notifications of the current user",
        "tags": [
          "NOTIFICATION v1"
        ]
      },
      "put": {
        "operationId": "setConfig_1",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NotificationConfig"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "OK."
          }
        },
        "summary": "Update the config for notifications of the current user",
        "tags": [
          "NOTIFICATION v1"
        ]
      }
    },
    "/notification/v1/notifications": {
      "delete": {
        "operationId": "deleteNotification",
        "parameters": [
          {
            "in": "query",
            "name": "id",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "deleted notification"
          }
        },
        "summary": "Endpoint to delete notification by id",
        "tags": [
          "NOTIFICATION v1"
        ]
      },
      "get": {
        "operationId": "getNotifications",
        "parameters": [
          {
            "in": "query",
            "name": "receiverId",
            "schema": {
              "default": "-me-",
              "type": "string"
            }
          },
          {
            "description": "status (or conjunction)",
            "in": "query",
            "name": "status",
            "schema": {
              "items": {
                "enum": [
                  "PENDING",
                  "SENT",
                  "READ",
                  "IGNORED"
                ],
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "description": "page number",
            "in": "query",
            "name": "page",
            "schema": {
              "default": 0,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "page size",
            "in": "query",
            "name": "size",
            "schema": {
              "default": 25,
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "Sorting criteria in the format: property(,asc|desc)(,ignoreCase). Default sort order is ascending. Multiple sort criteria are supported.",
            "in": "query",
            "name": "sort",
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotificationResponsePage"
                }
              }
            },
            "description": "get the received notifications"
          }
        },
        "summary": "Retrieve stored notification, filtered by receiver and status",
        "tags": [
          "NOTIFICATION v1"
        ]
      }
    },
    "/notification/v1/notifications/receiver/status": {
      "put": {
        "operationId": "updateNotificationStatusByReceiverId",
        "parameters": [
          {
            "in": "query",
            "name": "receiverId",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The old status (or conjunction)",
            "in": "query",
            "name": "oldStatus",
            "schema": {
              "items": {
                "enum": [
                  "PENDING",
                  "SENT",
                  "READ",
                  "IGNORED"
                ],
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "in": "query",
            "name": "newStatus",
            "schema": {
              "default": "READ",
              "enum": [
                "PENDING",
                "SENT",
                "READ",
                "IGNORED"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "set notification status"
          }
        },
        "summary": "Endpoint to update the notification status",
        "tags": [
          "NOTIFICATION v1"
        ]
      }
    },
    "/notification/v1/notifications/status": {
      "put": {
        "operationId": "updateNotificationStatus",
        "parameters": [
          {
            "in": "query",
            "name": "id",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "status",
            "schema": {
              "default": "READ",
              "enum": [
                "PENDING",
                "SENT",
                "READ",
                "IGNORED"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotificationEventDTO"
                }
              }
            },
            "description": "set notification status"
          }
        },
        "summary": "Endpoint to update the notification status",
        "tags": [
          "NOTIFICATION v1"
        ]
      }
    },
    "/organization/v1/organizations/{repository}": {
      "get": {
        "description": "Get organizations of repository the current user is member. May returns an empty list.",
        "operationId": "getOrganizations",
        "parameters": [
          {
            "description": "ID of repository (or \"-home-\" for home repository)",
            "in": "path",
            "name": "repository",
            "required": true,
            "schema": {
              "default": "-home-",
              "type": "string"
            }
          },
          {
            "description": "pattern",
            "in": "query",
            "name": "pattern",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "maximum items per page",
            "in": "query",
            "name": "maxItems",
            "schema": {
              "default": 10,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "skip a number of items",
            "in": "query",
            "name": "skipCount",
            "schema": {
              "default": 0,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "sort properties",
            "in": "query",
            "name": "sortProperties",
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "description": "sort ascending, true if not set. Use multiple values to change the direction according to the given property at the same index",
            "in": "query",
            "name": "sortAscending",
            "schema": {
              "items": {
                "type": "boolean"
              },
              "type": "array"
            }
          },
          {
            "description": "search only in memberships, false can only be done by admin",
            "in": "query",
            "name": "onlyMemberships",
            "schema": {
              "default": true,
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationEntries"
                }
              }
            },
            "description": "OK."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Preconditions are not present."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization failed."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Session user has insufficient rights to perform this operation."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Ressources are not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Fatal error occured."
          }
        },
        "summary": "Get organizations of repository.",
        "tags": [
          "ORGANIZATION v1"
        ]
      }
    },
    "/organization/v1/organizations/{repository}/{organization}": {
      "delete": {
        "description": "Delete organization of repository.",
        "operationId": "deleteOrganizations",
        "parameters": [
          {
            "description": "ID of repository (or \"-home-\" for home repository)",
            "in": "path",
            "name": "repository",
            "required": true,
            "schema": {
              "default": "-home-",
              "type": "string"
            }
          },
          {
            "description": "groupname",
            "in": "path",
            "name": "organization",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "OK."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Preconditions are not present."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization failed."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Session user has insufficient rights to perform this operation."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Ressources are not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Fatal error occured."
          }
        },
        "summary": "Delete organization of repository.",
        "tags": [
          "ORGANIZATION v1"
        ]
      },
      "get": {
        "description": "Get organization by id.",
        "operationId": "getOrganization",
        "parameters": [
          {
            "description": "ID of repository (or \"-home-\" for home repository)",
            "in": "path",
            "name": "repository",
            "required": true,
            "schema": {
              "default": "-home-",
              "type": "string"
            }
          },
          {
            "description": "ID of organization",
            "in": "path",
            "name": "organization",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Organization"
                }
              }
            },
            "description": "OK."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Preconditions are not present."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization failed."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Session user has insufficient rights to perform this operation."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Ressources are not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Fatal error occured."
          }
        },
        "summary": "Get organization by id.",
        "tags": [
          "ORGANIZATION v1"
        ]
      },
      "put": {
        "description": "create organization in repository.",
        "operationId": "createOrganizations",
        "parameters": [
          {
            "description": "ID of repository (or \"-home-\" for home repository)",
            "in": "path",
            "name": "repository",
            "required": true,
            "schema": {
              "default": "-home-",
              "type": "string"
            }
          },
          {
            "description": "organization name",
            "in": "path",
            "name": "organization",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "eduscope (may be null)",
            "in": "query",
            "name": "eduscope",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Organization"
                }
              }
            },
            "description": "OK."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Preconditions are not present."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization failed."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Session user has insufficient rights to perform this operation."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Ressources are not found."
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Duplicate Entity/Node conflict (Node with same name exists)"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Fatal error occured."
          }
        },
        "summary": "create organization in repository.",
        "tags": [
          "ORGANIZATION v1"
        ]
      }
    },
    "/organization/v1/organizations/{repository}/{organization}/member/{member}": {
      "delete": {
        "description": "Remove member from organization.",
        "operationId": "removeFromOrganization",
        "parameters": [
          {
            "description": "ID of repository (or \"-home-\" for home repository)",
            "in": "path",
            "name": "repository",
            "required": true,
            "schema": {
              "default": "-home-",
              "type": "string"
            }
          },
          {
            "description": "groupname",
            "in": "path",
            "name": "organization",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "authorityName of member",
            "in": "path",
            "name": "member",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "OK."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Preconditions are not present."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization failed."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Session user has insufficient rights to perform this operation."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Ressources are not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Fatal error occured."
          }
        },
        "summary": "Remove member from organization.",
        "tags": [
          "ORGANIZATION v1"
        ]
      }
    },
    "/rating/v1/ratings/{repository}/nodes/altered": {
      "get": {
        "description": "requires admin",
        "operationId": "getNodesAlteredInRange",
        "parameters": [
          {
            "description": "ID of repository (or \"-home-\" for home repository)",
            "in": "path",
            "name": "repository",
            "required": true,
            "schema": {
              "default": "-home-",
              "type": "string"
            }
          },
          {
            "description": "date range from",
            "in": "query",
            "name": "dateFrom",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                }
              }
            },
            "description": "OK."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Preconditions are not present."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization failed."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Session user has insufficient rights to perform this operation."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Ressources are not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Fatal error occured."
          }
        },
        "summary": "get the range of nodes which had tracked actions since a given timestamp",
        "tags": [
          "RATING v1"
        ]
      }
    },
    "/rating/v1/ratings/{repository}/{node}": {
      "delete": {
        "description": "Delete the comment with the given id",
        "operationId": "deleteRating",
        "parameters": [
          {
            "description": "ID of repository (or \"-home-\" for home repository)",
            "in": "path",
            "name": "repository",
            "required": true,
            "schema": {
              "default": "-home-",
              "type": "string"
            }
          },
          {
            "description": "ID of node",
            "in": "path",
            "name": "node",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "OK."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Preconditions are not present."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization failed."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Session user has insufficient rights to perform this operation."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Ressources are not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Fatal error occured."
          }
        },
        "summary": "delete a comment",
        "tags": [
          "RATING v1"
        ]
      },
      "put": {
        "description": "Adds the rating. If the current user already rated that element, the rating will be altered",
        "operationId": "addOrUpdateRating",
        "parameters": [
          {
            "description": "ID of repository (or \"-home-\" for home repository)",
            "in": "path",
            "name": "repository",
            "required": true,
            "schema": {
              "default": "-home-",
              "type": "string"
            }
          },
          {
            "description": "ID of node",
            "in": "path",
            "name": "node",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The rating (usually in range 1-5)",
            "in": "query",
            "name": "rating",
            "required": true,
            "schema": {
              "format": "double",
              "type": "number"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "string"
              }
            }
          },
          "description": "Text content of rating",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "OK."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Preconditions are not present."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization failed."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Session user has insufficient rights to perform this operation."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Ressources are not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Fatal error occured."
          }
        },
        "summary": "create or update a rating",
        "tags": [
          "RATING v1"
        ]
      }
    },
    "/rating/v1/ratings/{repository}/{node}/history": {
      "get": {
        "description": "requires admin",
        "operationId": "getAccumulatedRatings",
        "parameters": [
          {
            "description": "ID of repository (or \"-home-\" for home repository)",
            "in": "path",
            "name": "repository",
            "required": true,
            "schema": {
              "default": "-home-",
              "type": "string"
            }
          },
          {
            "description": "ID of node",
            "in": "path",
            "name": "node",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "date range from",
            "in": "query",
            "name": "dateFrom",
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/RatingHistory"
                  },
                  "type": "array"
                }
              }
            },
            "description": "OK."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Preconditions are not present."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization failed."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Session user has insufficient rights to perform this operation."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Ressources are not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Fatal error occured."
          }
        },
        "summary": "get the range of nodes which had tracked actions since a given timestamp",
        "tags": [
          "RATING v1"
        ]
      }
    },
    "/register/v1/activate/{key}": {
      "post": {
        "operationId": "activate",
        "parameters": [
          {
            "description": "The key for the user to activate",
            "in": "path",
            "name": "key",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "OK."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Fatal error occured."
          }
        },
        "security": [],
        "summary": "Activate a new user (by using a supplied key)",
        "tags": [
          "REGISTER v1"
        ]
      }
    },
    "/register/v1/exists/{mail}": {
      "get": {
        "operationId": "mailExists",
        "parameters": [
          {
            "description": "The mail (authority) of the user to check",
            "in": "path",
            "name": "mail",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RegisterExists"
                }
              }
            },
            "description": "OK."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Fatal error occured."
          }
        },
        "security": [],
        "summary": "Check if the given mail is already successfully registered",
        "tags": [
          "REGISTER v1"
        ]
      }
    },
    "/register/v1/recover/{mail}": {
      "post": {
        "operationId": "recoverPassword",
        "parameters": [
          {
            "description": "The mail (authority) of the user to recover",
            "in": "path",
            "name": "mail",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "OK."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Fatal error occured."
          }
        },
        "security": [],
        "summary": "Send a mail to recover/reset password",
        "tags": [
          "REGISTER v1"
        ]
      }
    },
    "/register/v1/register": {
      "post": {
        "operationId": "register",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegisterInformation"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "OK."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Fatal error occured."
          }
        },
        "security": [],
        "summary": "Register a new user",
        "tags": [
          "REGISTER v1"
        ]
      }
    },
    "/register/v1/resend/{mail}": {
      "post": {
        "description": "The method will return false if there is no pending registration for the given mail",
        "operationId": "resendMail",
        "parameters": [
          {
            "description": "The mail a registration is pending for and should be resend to",
            "in": "path",
            "name": "mail",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "OK."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Fatal error occured."
          }
        },
        "security": [],
        "summary": "Resend a registration mail for a given mail address",
        "tags": [
          "REGISTER v1"
        ]
      }
    },
    "/register/v1/reset/{key}/{password}": {
      "post": {
        "operationId": "resetPassword",
        "parameters": [
          {
            "description": "The key for the password reset request",
            "in": "path",
            "name": "key",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The new password for the user",
            "in": "path",
            "name": "password",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "OK."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Fatal error occured."
          }
        },
        "security": [],
        "summary": "Send a mail to recover/reset password",
        "tags": [
          "REGISTER v1"
        ]
      }
    },
    "/relation/v1/relation/{repository}/{node}": {
      "get": {
        "description": "Returns all relations of the node.",
        "operationId": "getRelations",
        "parameters": [
          {
            "description": "ID of repository (or \"-home-\" for home repository)",
            "in": "path",
            "name": "repository",
            "required": true,
            "schema": {
              "default": "-home-",
              "type": "string"
            }
          },
          {
            "description": "ID of node",
            "in": "path",
            "name": "node",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NodeRelation"
                }
              }
            },
            "description": "OK."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Preconditions are not present."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization failed."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Session user has insufficient rights to perform this operation."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Ressources are not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Fatal error occured."
          }
        },
        "summary": "get all relation of the node",
        "tags": [
          "RELATION v1"
        ]
      }
    },
    "/relation/v1/relation/{repository}/{source}/{type}/{target}": {
      "delete": {
        "description": "Delete a relation between two nodes of the given type.",
        "operationId": "deleteRelation",
        "parameters": [
          {
            "description": "ID of repository (or \"-home-\" for home repository)",
            "in": "path",
            "name": "repository",
            "required": true,
            "schema": {
              "default": "-home-",
              "type": "string"
            }
          },
          {
            "description": "ID of node",
            "in": "path",
            "name": "source",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "ID of node",
            "in": "path",
            "name": "type",
            "required": true,
            "schema": {
              "enum": [
                "isPartOf",
                "isBasedOn",
                "references"
              ],
              "type": "string"
            }
          },
          {
            "description": "ID of node",
            "in": "path",
            "name": "target",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "OK."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Preconditions are not present."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization failed."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Session user has insufficient rights to perform this operation."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Ressources are not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Fatal error occured."
          }
        },
        "summary": "delete a relation between nodes",
        "tags": [
          "RELATION v1"
        ]
      },
      "put": {
        "description": "Creates a relation between two nodes of the given type.",
        "operationId": "createRelation",
        "parameters": [
          {
            "description": "ID of repository (or \"-home-\" for home repository)",
            "in": "path",
            "name": "repository",
            "required": true,
            "schema": {
              "default": "-home-",
              "type": "string"
            }
          },
          {
            "description": "ID of node",
            "in": "path",
            "name": "source",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "ID of node",
            "in": "path",
            "name": "type",
            "required": true,
            "schema": {
              "enum": [
                "isPartOf",
                "isBasedOn",
                "references"
              ],
              "type": "string"
            }
          },
          {
            "description": "ID of node",
            "in": "path",
            "name": "target",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "OK."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Preconditions are not present."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization failed."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Session user has insufficient rights to perform this operation."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Ressources are not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Fatal error occured."
          }
        },
        "summary": "create a relation between nodes",
        "tags": [
          "RELATION v1"
        ]
      }
    },
    "/rendering/v1/details/{repository}/{node}": {
      "get": {
        "description": "Get metadata of node.",
        "operationId": "getDetailsSnippet_1",
        "parameters": [
          {
            "description": "ID of repository (or \"-home-\" for home repository)",
            "in": "path",
            "name": "repository",
            "required": true,
            "schema": {
              "default": "-home-",
              "type": "string"
            }
          },
          {
            "description": "ID of node",
            "in": "path",
            "name": "node",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "version of node",
            "in": "query",
            "name": "version",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Rendering displayMode",
            "in": "query",
            "name": "displayMode",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RenderingDetailsEntry"
                }
              }
            },
            "description": "OK."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Preconditions are not present."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization failed."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Session user has insufficient rights to perform this operation."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Ressources are not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Fatal error occured."
          }
        },
        "summary": "Get metadata of node.",
        "tags": [
          "RENDERING v1"
        ]
      },
      "post": {
        "description": "Get metadata of node.",
        "operationId": "getDetailsSnippetWithParameters",
        "parameters": [
          {
            "description": "ID of repository (or \"-home-\" for home repository)",
            "in": "path",
            "name": "repository",
            "required": true,
            "schema": {
              "default": "-home-",
              "type": "string"
            }
          },
          {
            "description": "ID of node",
            "in": "path",
            "name": "node",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "version of node",
            "in": "query",
            "name": "version",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Rendering displayMode",
            "in": "query",
            "name": "displayMode",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "additionalProperties": {
                  "type": "string"
                },
                "type": "object"
              }
            }
          },
          "description": "additional parameters to send to the rendering service"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RenderingDetailsEntry"
                }
              }
            },
            "description": "OK."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Preconditions are not present."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization failed."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Session user has insufficient rights to perform this operation."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Ressources are not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Fatal error occured."
          }
        },
        "summary": "Get metadata of node.",
        "tags": [
          "RENDERING v1"
        ]
      }
    },
    "/search/v1/custom/{repository}": {
      "get": {
        "description": "e.g. property=cm:name, value:*Test*",
        "operationId": "searchByProperty",
        "parameters": [
          {
            "description": "ID of repository (or \"-home-\" for home repository)",
            "in": "path",
            "name": "repository",
            "required": true,
            "schema": {
              "default": "-home-",
              "type": "string"
            }
          },
          {
            "description": "Type of element",
            "in": "query",
            "name": "contentType",
            "schema": {
              "enum": [
                "FILES",
                "FOLDERS",
                "FILES_AND_FOLDERS",
                "COLLECTIONS",
                "TOOLPERMISSIONS",
                "COLLECTION_PROPOSALS",
                "ALL"
              ],
              "type": "string"
            }
          },
          {
            "description": "Combine mode, AND or OR, defaults to AND",
            "in": "query",
            "name": "combineMode",
            "schema": {
              "enum": [
                "AND",
                "OR"
              ],
              "type": "string"
            }
          },
          {
            "description": "One (or more) properties to search for, will be combined by specified combine mode",
            "in": "query",
            "name": "property",
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "description": "One (or more) values to search for, matching the properties defined before",
            "in": "query",
            "name": "value",
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "description": "(Optional) comparator, only relevant for date or numerical fields, currently allowed =, <=, >=",
            "in": "query",
            "name": "comparator",
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "description": "maximum items per page",
            "in": "query",
            "name": "maxItems",
            "schema": {
              "default": 10,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "skip a number of items",
            "in": "query",
            "name": "skipCount",
            "schema": {
              "default": 0,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "sort properties",
            "in": "query",
            "name": "sortProperties",
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "description": "sort ascending, true if not set. Use multiple values to change the direction according to the given property at the same index",
            "in": "query",
            "name": "sortAscending",
            "schema": {
              "items": {
                "type": "boolean"
              },
              "type": "array"
            }
          },
          {
            "description": "property filter for result nodes (or \"-all-\" for all properties)",
            "in": "query",
            "name": "propertyFilter",
            "schema": {
              "items": {
                "default": "-all-",
                "type": "string"
              },
              "type": "array"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchResultNode"
                }
              }
            },
            "description": "OK."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Preconditions are not present."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization failed."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Session user has insufficient rights to perform this operation."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Ressources are not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Fatal error occured."
          }
        },
        "summary": "Search for custom properties with custom values",
        "tags": [
          "SEARCH v1"
        ]
      }
    },
    "/search/v1/metadata/{repository}": {
      "get": {
        "operationId": "getMetdata",
        "parameters": [
          {
            "description": "ID of repository (or \"-home-\" for home repository)",
            "in": "path",
            "name": "repository",
            "required": true,
            "schema": {
              "default": "-home-",
              "type": "string"
            }
          },
          {
            "description": "nodeIds",
            "in": "query",
            "name": "nodeIds",
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "description": "property filter for result nodes (or \"-all-\" for all properties)",
            "in": "query",
            "name": "propertyFilter",
            "schema": {
              "items": {
                "default": "-all-",
                "type": "string"
              },
              "type": "array"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NodeEntries"
                }
              }
            },
            "description": "OK."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Preconditions are not present."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization failed."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Session user has insufficient rights to perform this operation."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Ressources are not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Fatal error occured."
          }
        },
        "summary": "get nodes with metadata and collections",
        "tags": [
          "SEARCH v1"
        ]
      }
    },
    "/search/v1/queries/load/{nodeId}": {
      "get": {
        "description": "Load a saved search query.",
        "operationId": "loadSaveSearch",
        "parameters": [
          {
            "description": "Node id of the search item",
            "in": "path",
            "name": "nodeId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Type of element",
            "in": "query",
            "name": "contentType",
            "schema": {
              "enum": [
                "FILES",
                "FOLDERS",
                "FILES_AND_FOLDERS",
                "COLLECTIONS",
                "TOOLPERMISSIONS",
                "COLLECTION_PROPOSALS",
                "ALL"
              ],
              "type": "string"
            }
          },
          {
            "description": "maximum items per page",
            "in": "query",
            "name": "maxItems",
            "schema": {
              "default": 10,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "skip a number of items",
            "in": "query",
            "name": "skipCount",
            "schema": {
              "default": 0,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "sort properties",
            "in": "query",
            "name": "sortProperties",
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "description": "sort ascending, true if not set. Use multiple values to change the direction according to the given property at the same index",
            "in": "query",
            "name": "sortAscending",
            "schema": {
              "items": {
                "type": "boolean"
              },
              "type": "array"
            }
          },
          {
            "description": "property filter for result nodes (or \"-all-\" for all properties)",
            "in": "query",
            "name": "propertyFilter",
            "schema": {
              "items": {
                "default": "-all-",
                "type": "string"
              },
              "type": "array"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          },
          "description": "facets"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Node"
                }
              }
            },
            "description": "OK."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Preconditions are not present."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization failed."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Session user has insufficient rights to perform this operation."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Ressources are not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Fatal error occured."
          }
        },
        "summary": "Load a saved search query.",
        "tags": [
          "SEARCH v1"
        ]
      }
    },
    "/search/v1/queries/{repository}/contributor": {
      "get": {
        "operationId": "searchContributor",
        "parameters": [
          {
            "description": "ID of repository (or \"-home-\" for home repository)",
            "in": "path",
            "name": "repository",
            "required": true,
            "schema": {
              "default": "-home-",
              "type": "string"
            }
          },
          {
            "description": "search word",
            "in": "query",
            "name": "searchWord",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "contributor kind",
            "in": "query",
            "name": "contributorKind",
            "required": true,
            "schema": {
              "default": "PERSON",
              "enum": [
                "PERSON",
                "ORGANIZATION"
              ],
              "type": "string"
            }
          },
          {
            "description": "define which authority fields should be searched: ['firstname', 'lastname', 'email', 'uuid', 'url']",
            "in": "query",
            "name": "fields",
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "description": "define which contributor props should be searched: ['ccm:lifecyclecontributer_author', 'ccm:lifecyclecontributer_publisher', ..., 'ccm:metadatacontributer_creator', 'ccm:metadatacontributer_validator']",
            "in": "query",
            "name": "contributorProperties",
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/SearchVCard"
                  },
                  "type": "array"
                }
              }
            },
            "description": "OK."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Preconditions are not present."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization failed."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Session user has insufficient rights to perform this operation."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Ressources are not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Fatal error occured."
          }
        },
        "summary": "Search for contributors",
        "tags": [
          "SEARCH v1"
        ]
      }
    },
    "/search/v1/queries/{repository}/fingerprint/{nodeid}": {
      "post": {
        "description": "Perform queries based on metadata sets.",
        "operationId": "searchFingerprint",
        "parameters": [
          {
            "description": "ID of repository (or \"-home-\" for home repository)",
            "in": "path",
            "name": "repository",
            "required": true,
            "schema": {
              "default": "-home-",
              "type": "string"
            }
          },
          {
            "description": "nodeid",
            "in": "path",
            "name": "nodeid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "maximum items per page",
            "in": "query",
            "name": "maxItems",
            "schema": {
              "default": 10,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "skip a number of items",
            "in": "query",
            "name": "skipCount",
            "schema": {
              "default": 0,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "sort properties",
            "in": "query",
            "name": "sortProperties",
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "description": "sort ascending, true if not set. Use multiple values to change the direction according to the given property at the same index",
            "in": "query",
            "name": "sortAscending",
            "schema": {
              "items": {
                "type": "boolean"
              },
              "type": "array"
            }
          },
          {
            "description": "property filter for result nodes (or \"-all-\" for all properties)",
            "in": "query",
            "name": "propertyFilter",
            "schema": {
              "items": {
                "default": "-all-",
                "type": "string"
              },
              "type": "array"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchResultNode"
                }
              }
            },
            "description": "OK."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Preconditions are not present."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization failed."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Session user has insufficient rights to perform this operation."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Ressources are not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Fatal error occured."
          }
        },
        "summary": "Perform queries based on metadata sets.",
        "tags": [
          "SEARCH v1"
        ]
      }
    },
    "/search/v1/queries/{repository}/{metadataset}/{query}": {
      "post": {
        "description": "Perform queries based on metadata sets.",
        "operationId": "search",
        "parameters": [
          {
            "description": "ID of repository (or \"-home-\" for home repository)",
            "in": "path",
            "name": "repository",
            "required": true,
            "schema": {
              "default": "-home-",
              "type": "string"
            }
          },
          {
            "description": "ID of metadataset (or \"-default-\" for default metadata set)",
            "in": "path",
            "name": "metadataset",
            "required": true,
            "schema": {
              "default": "-default-",
              "type": "string"
            }
          },
          {
            "description": "ID of query",
            "in": "path",
            "name": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Type of element",
            "in": "query",
            "name": "contentType",
            "schema": {
              "enum": [
                "FILES",
                "FOLDERS",
                "FILES_AND_FOLDERS",
                "COLLECTIONS",
                "TOOLPERMISSIONS",
                "COLLECTION_PROPOSALS",
                "ALL"
              ],
              "type": "string"
            }
          },
          {
            "description": "maximum items per page",
            "in": "query",
            "name": "maxItems",
            "schema": {
              "default": 10,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "skip a number of items",
            "in": "query",
            "name": "skipCount",
            "schema": {
              "default": 0,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "sort properties",
            "in": "query",
            "name": "sortProperties",
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "description": "sort ascending, true if not set. Use multiple values to change the direction according to the given property at the same index",
            "in": "query",
            "name": "sortAscending",
            "schema": {
              "items": {
                "type": "boolean"
              },
              "type": "array"
            }
          },
          {
            "description": "property filter for result nodes (or \"-all-\" for all properties)",
            "in": "query",
            "name": "propertyFilter",
            "schema": {
              "items": {
                "default": "-all-",
                "type": "string"
              },
              "type": "array"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchParameters"
              }
            }
          },
          "description": "search parameters",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchResultNode"
                }
              }
            },
            "description": "OK."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Preconditions are not present."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization failed."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Session user has insufficient rights to perform this operation."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Ressources are not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Fatal error occured."
          }
        },
        "summary": "Perform queries based on metadata sets.",
        "tags": [
          "SEARCH v1"
        ]
      }
    },
    "/search/v1/queries/{repository}/{metadataset}/{query}/facets": {
      "post": {
        "description": "Perform queries based on metadata sets.",
        "operationId": "searchFacets",
        "parameters": [
          {
            "description": "ID of repository (or \"-home-\" for home repository)",
            "in": "path",
            "name": "repository",
            "required": true,
            "schema": {
              "default": "-home-",
              "type": "string"
            }
          },
          {
            "description": "ID of metadataset (or \"-default-\" for default metadata set)",
            "in": "path",
            "name": "metadataset",
            "required": true,
            "schema": {
              "default": "-default-",
              "type": "string"
            }
          },
          {
            "description": "ID of query",
            "in": "path",
            "name": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchParametersFacets"
              }
            }
          },
          "description": "facet parameters",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchResultNode"
                }
              }
            },
            "description": "OK."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Preconditions are not present."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization failed."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Session user has insufficient rights to perform this operation."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Fatal error occured."
          }
        },
        "summary": "Search in facets.",
        "tags": [
          "SEARCH v1"
        ]
      }
    },
    "/search/v1/queries/{repository}/{metadataset}/{query}/lrmi": {
      "post": {
        "description": "Perform queries based on metadata sets.",
        "operationId": "search-lrmi",
        "parameters": [
          {
            "description": "ID of repository (or \"-home-\" for home repository)",
            "in": "path",
            "name": "repository",
            "required": true,
            "schema": {
              "default": "-home-",
              "type": "string"
            }
          },
          {
            "description": "ID of metadataset (or \"-default-\" for default metadata set)",
            "in": "path",
            "name": "metadataset",
            "required": true,
            "schema": {
              "default": "-default-",
              "type": "string"
            }
          },
          {
            "description": "ID of query",
            "in": "path",
            "name": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Type of element",
            "in": "query",
            "name": "contentType",
            "schema": {
              "enum": [
                "FILES",
                "FOLDERS",
                "FILES_AND_FOLDERS",
                "COLLECTIONS",
                "TOOLPERMISSIONS",
                "COLLECTION_PROPOSALS",
                "ALL"
              ],
              "type": "string"
            }
          },
          {
            "description": "maximum items per page",
            "in": "query",
            "name": "maxItems",
            "schema": {
              "default": 10,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "skip a number of items",
            "in": "query",
            "name": "skipCount",
            "schema": {
              "default": 0,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "sort properties",
            "in": "query",
            "name": "sortProperties",
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "description": "sort ascending, true if not set. Use multiple values to change the direction according to the given property at the same index",
            "in": "query",
            "name": "sortAscending",
            "schema": {
              "items": {
                "type": "boolean"
              },
              "type": "array"
            }
          },
          {
            "description": "property filter for result nodes (or \"-all-\" for all properties)",
            "in": "query",
            "name": "propertyFilter",
            "schema": {
              "items": {
                "default": "-all-",
                "type": "string"
              },
              "type": "array"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchParameters"
              }
            }
          },
          "description": "search parameters",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchResultLrmi"
                }
              }
            },
            "description": "OK."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Preconditions are not present."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization failed."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Session user has insufficient rights to perform this operation."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Ressources are not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Fatal error occured."
          }
        },
        "summary": "Perform queries based on metadata sets.",
        "tags": [
          "SEARCH v1"
        ]
      }
    },
    "/search/v1/queries/{repository}/{metadataset}/{query}/save": {
      "post": {
        "description": "Save a search query.",
        "operationId": "saveSearch",
        "parameters": [
          {
            "description": "ID of repository (or \"-home-\" for home repository)",
            "in": "path",
            "name": "repository",
            "required": true,
            "schema": {
              "default": "-home-",
              "type": "string"
            }
          },
          {
            "description": "ID of metadataset (or \"-default-\" for default metadata set)",
            "in": "path",
            "name": "metadataset",
            "required": true,
            "schema": {
              "default": "-default-",
              "type": "string"
            }
          },
          {
            "description": "ID of query",
            "in": "path",
            "name": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name of the new search item",
            "in": "query",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Replace if search with the same name exists",
            "in": "query",
            "name": "replace",
            "schema": {
              "default": false,
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "$ref": "#/components/schemas/MdsQueryCriteria"
                },
                "type": "array"
              }
            }
          },
          "description": "search parameters",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NodeEntry"
                }
              }
            },
            "description": "OK."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Preconditions are not present."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization failed."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Session user has insufficient rights to perform this operation."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Ressources are not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Fatal error occured."
          }
        },
        "summary": "Save a search query.",
        "tags": [
          "SEARCH v1"
        ]
      }
    },
    "/search/v1/relevant/{repository}": {
      "get": {
        "operationId": "getRelevantNodes",
        "parameters": [
          {
            "description": "ID of repository (or \"-home-\" for home repository)",
            "in": "path",
            "name": "repository",
            "required": true,
            "schema": {
              "default": "-home-",
              "type": "string"
            }
          },
          {
            "description": "property filter for result nodes (or \"-all-\" for all properties)",
            "in": "query",
            "name": "propertyFilter",
            "schema": {
              "items": {
                "default": "-all-",
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "description": "maximum items per page",
            "in": "query",
            "name": "maxItems",
            "schema": {
              "default": 10,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "skip a number of items",
            "in": "query",
            "name": "skipCount",
            "schema": {
              "default": 0,
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchResultNode"
                }
              }
            },
            "description": "OK."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Preconditions are not present."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization failed."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Session user has insufficient rights to perform this operation."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Ressources are not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Fatal error occured."
          }
        },
        "summary": "Get relevant nodes for the current user",
        "tags": [
          "SEARCH v1"
        ]
      }
    },
    "/sharing/v1/sharing/{repository}/{node}/{share}": {
      "get": {
        "operationId": "getInfo",
        "parameters": [
          {
            "description": "ID of repository (or \"-home-\" for home repository)",
            "in": "path",
            "name": "repository",
            "required": true,
            "schema": {
              "default": "-home-",
              "type": "string"
            }
          },
          {
            "description": "ID of node",
            "in": "path",
            "name": "node",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Share token",
            "in": "path",
            "name": "share",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Password to validate (optional)",
            "in": "query",
            "name": "password",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SharingInfo"
                }
              }
            },
            "description": "OK."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Preconditions are not present."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization failed."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Session user has insufficient rights to perform this operation."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Ressources are not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Fatal error occured."
          }
        },
        "security": [],
        "summary": "Get general info of a share.",
        "tags": [
          "SHARING v1"
        ]
      }
    },
    "/sharing/v1/sharing/{repository}/{node}/{share}/children": {
      "get": {
        "description": "Only valid for shared folders",
        "operationId": "getChildren_1",
        "parameters": [
          {
            "description": "ID of repository (or \"-home-\" for home repository)",
            "in": "path",
            "name": "repository",
            "required": true,
            "schema": {
              "default": "-home-",
              "type": "string"
            }
          },
          {
            "description": "ID of node",
            "in": "path",
            "name": "node",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Share token",
            "in": "path",
            "name": "share",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Password (required if share is locked)",
            "in": "query",
            "name": "password",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "maximum items per page",
            "in": "query",
            "name": "maxItems",
            "schema": {
              "default": 500,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "skip a number of items",
            "in": "query",
            "name": "skipCount",
            "schema": {
              "default": 0,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "sort properties",
            "in": "query",
            "name": "sortProperties",
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "description": "sort ascending, true if not set. Use multiple values to change the direction according to the given property at the same index",
            "in": "query",
            "name": "sortAscending",
            "schema": {
              "items": {
                "type": "boolean"
              },
              "type": "array"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NodeEntries"
                }
              }
            },
            "description": "OK."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Preconditions are not present."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization failed."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Session user has insufficient rights to perform this operation."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Ressources are not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Fatal error occured."
          }
        },
        "security": [],
        "summary": "Get all children of this share.",
        "tags": [
          "SHARING v1"
        ]
      }
    },
    "/statistic/v1/facets/{context}": {
      "post": {
        "description": "Statistics.",
        "operationId": "get",
        "parameters": [
          {
            "description": "context, the node where to start",
            "in": "path",
            "name": "context",
            "required": true,
            "schema": {
              "default": "-root-",
              "type": "string"
            }
          },
          {
            "description": "properties",
            "in": "query",
            "name": "properties",
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Filter"
              }
            }
          },
          "description": "filter",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Statistics"
                }
              }
            },
            "description": "OK."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Preconditions are not present."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization failed."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Session user has insufficient rights to perform this operation."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Ressources are not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Fatal error occured."
          }
        },
        "summary": "Get statistics of repository.",
        "tags": [
          "STATISTIC v1"
        ]
      }
    },
    "/statistic/v1/public": {
      "get": {
        "description": "Get global statistics for this repository.",
        "operationId": "getGlobalStatistics",
        "parameters": [
          {
            "description": "primary property to build facets and count+group values",
            "in": "query",
            "name": "group",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "additional properties to build facets and count+sub-group values",
            "in": "query",
            "name": "subGroup",
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatisticsGlobal"
                }
              }
            },
            "description": "OK."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization failed."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Fatal error occured."
          }
        },
        "summary": "Get stats.",
        "tags": [
          "STATISTIC v1"
        ]
      }
    },
    "/statistic/v1/statistics/nodes": {
      "post": {
        "description": "requires either toolpermission TOOLPERMISSION_GLOBAL_STATISTICS_NODES for global stats or to be admin of the requested mediacenter",
        "operationId": "getStatisticsNode",
        "parameters": [
          {
            "description": "Grouping type (by date)",
            "in": "query",
            "name": "grouping",
            "required": true,
            "schema": {
              "enum": [
                "None",
                "Daily",
                "Monthly",
                "Yearly",
                "Node"
              ],
              "type": "string"
            }
          },
          {
            "description": "date range from",
            "in": "query",
            "name": "dateFrom",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "date range to",
            "in": "query",
            "name": "dateTo",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "the mediacenter to filter for statistics",
            "in": "query",
            "name": "mediacenter",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "additionals fields of the custom json object stored in each query that should be returned",
            "in": "query",
            "name": "additionalFields",
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "description": "grouping fields of the custom json object stored in each query (currently only meant to be combined with no grouping by date)",
            "in": "query",
            "name": "groupField",
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "additionalProperties": {
                  "type": "string"
                },
                "type": "object"
              }
            }
          },
          "description": "filters for the custom json object stored in each entry"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/TrackingNode"
                  },
                  "type": "array"
                }
              }
            },
            "description": "OK."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Preconditions are not present."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization failed."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Session user has insufficient rights to perform this operation."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Ressources are not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Fatal error occured."
          }
        },
        "summary": "get statistics for node actions",
        "tags": [
          "STATISTIC v1"
        ]
      }
    },
    "/statistic/v1/statistics/nodes/altered": {
      "get": {
        "description": "requires admin",
        "operationId": "getNodesAlteredInRange_1",
        "parameters": [
          {
            "description": "date range from",
            "in": "query",
            "name": "dateFrom",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                }
              }
            },
            "description": "OK."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Preconditions are not present."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization failed."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Session user has insufficient rights to perform this operation."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Ressources are not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Fatal error occured."
          }
        },
        "summary": "get the range of nodes which had tracked actions since a given timestamp",
        "tags": [
          "STATISTIC v1"
        ]
      }
    },
    "/statistic/v1/statistics/nodes/node/{id}": {
      "get": {
        "description": "requires admin",
        "operationId": "getNodeData",
        "parameters": [
          {
            "description": "node id to fetch data for",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "date range from",
            "in": "query",
            "name": "dateFrom",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/NodeData"
                  },
                  "type": "array"
                }
              }
            },
            "description": "OK."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Preconditions are not present."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization failed."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Session user has insufficient rights to perform this operation."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Ressources are not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Fatal error occured."
          }
        },
        "summary": "get the range of nodes which had tracked actions since a given timestamp",
        "tags": [
          "STATISTIC v1"
        ]
      }
    },
    "/statistic/v1/statistics/users": {
      "post": {
        "description": "requires either toolpermission TOOLPERMISSION_GLOBAL_STATISTICS_USER for global stats or to be admin of the requested mediacenter",
        "operationId": "getStatisticsUser",
        "parameters": [
          {
            "description": "Grouping type (by date)",
            "in": "query",
            "name": "grouping",
            "required": true,
            "schema": {
              "enum": [
                "None",
                "Daily",
                "Monthly",
                "Yearly",
                "Node"
              ],
              "type": "string"
            }
          },
          {
            "description": "date range from",
            "in": "query",
            "name": "dateFrom",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "date range to",
            "in": "query",
            "name": "dateTo",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "the mediacenter to filter for statistics",
            "in": "query",
            "name": "mediacenter",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "additionals fields of the custom json object stored in each query that should be returned",
            "in": "query",
            "name": "additionalFields",
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "description": "grouping fields of the custom json object stored in each query (currently only meant to be combined with no grouping by date)",
            "in": "query",
            "name": "groupField",
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "additionalProperties": {
                  "type": "string"
                },
                "type": "object"
              }
            }
          },
          "description": "filters for the custom json object stored in each entry"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Tracking"
                  },
                  "type": "array"
                }
              }
            },
            "description": "OK."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Preconditions are not present."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization failed."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Session user has insufficient rights to perform this operation."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Ressources are not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Fatal error occured."
          }
        },
        "summary": "get statistics for user actions (login, logout)",
        "tags": [
          "STATISTIC v1"
        ]
      }
    },
    "/stream/v1/access/{repository}/{node}": {
      "get": {
        "operationId": "canAccess",
        "parameters": [
          {
            "description": "ID of repository (or \"-home-\" for home repository)",
            "in": "path",
            "name": "repository",
            "required": true,
            "schema": {
              "default": "-home-",
              "type": "string"
            }
          },
          {
            "description": "The property to aggregate",
            "in": "path",
            "name": "node",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "OK."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Preconditions are not present."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization failed."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Session user has insufficient rights to perform this operation."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Ressources are not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Fatal error occured."
          }
        },
        "summary": "test",
        "tags": [
          "STREAM v1"
        ]
      }
    },
    "/stream/v1/add/{repository}": {
      "put": {
        "description": "will return the object and add the id to the object if creation succeeded",
        "operationId": "addEntry",
        "parameters": [
          {
            "description": "ID of repository (or \"-home-\" for home repository)",
            "in": "path",
            "name": "repository",
            "required": true,
            "schema": {
              "default": "-home-",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StreamEntryInput"
              }
            }
          },
          "description": "Stream object to add",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StreamEntryInput"
                }
              }
            },
            "description": "OK."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Preconditions are not present."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization failed."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Session user has insufficient rights to perform this operation."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Ressources are not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Fatal error occured."
          }
        },
        "summary": "add a new stream object.",
        "tags": [
          "STREAM v1"
        ]
      }
    },
    "/stream/v1/delete/{repository}/{entry}": {
      "delete": {
        "description": "the current user must be author of the given stream object",
        "operationId": "deleteEntry",
        "parameters": [
          {
            "description": "ID of repository (or \"-home-\" for home repository)",
            "in": "path",
            "name": "repository",
            "required": true,
            "schema": {
              "default": "-home-",
              "type": "string"
            }
          },
          {
            "description": "entry id to delete",
            "in": "path",
            "name": "entry",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "OK."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Preconditions are not present."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization failed."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Session user has insufficient rights to perform this operation."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Ressources are not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Fatal error occured."
          }
        },
        "summary": "delete a stream object",
        "tags": [
          "STREAM v1"
        ]
      }
    },
    "/stream/v1/properties/{repository}/{property}": {
      "get": {
        "operationId": "getPropertyValues",
        "parameters": [
          {
            "description": "ID of repository (or \"-home-\" for home repository)",
            "in": "path",
            "name": "repository",
            "required": true,
            "schema": {
              "default": "-home-",
              "type": "string"
            }
          },
          {
            "description": "The property to aggregate",
            "in": "path",
            "name": "property",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "OK."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Preconditions are not present."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization failed."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Session user has insufficient rights to perform this operation."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Ressources are not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Fatal error occured."
          }
        },
        "summary": "Get top values for a property",
        "tags": [
          "STREAM v1"
        ]
      }
    },
    "/stream/v1/search/{repository}": {
      "post": {
        "operationId": "search_1",
        "parameters": [
          {
            "description": "ID of repository (or \"-home-\" for home repository)",
            "in": "path",
            "name": "repository",
            "required": true,
            "schema": {
              "default": "-home-",
              "type": "string"
            }
          },
          {
            "description": "Stream object status to search for",
            "in": "query",
            "name": "status",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "generic text to search for (in title or description)",
            "in": "query",
            "name": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "maximum items per page",
            "in": "query",
            "name": "maxItems",
            "schema": {
              "default": 10,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "skip a number of items",
            "in": "query",
            "name": "skipCount",
            "schema": {
              "default": 0,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "sort properties, currently supported: created, priority, default: priority desc, created desc",
            "in": "query",
            "name": "sortProperties",
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "description": "sort ascending, true if not set. Use multiple values to change the direction according to the given property at the same index",
            "in": "query",
            "name": "sortAscending",
            "schema": {
              "items": {
                "type": "boolean"
              },
              "type": "array"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "additionalProperties": {
                  "type": "string"
                },
                "type": "object"
              }
            }
          },
          "description": "map with property + value to search"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StreamList"
                }
              }
            },
            "description": "OK."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Preconditions are not present."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization failed."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Session user has insufficient rights to perform this operation."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Ressources are not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Fatal error occured."
          }
        },
        "summary": "Get the stream content for the current user with the given status.",
        "tags": [
          "STREAM v1"
        ]
      }
    },
    "/stream/v1/status/{repository}/{entry}": {
      "put": {
        "operationId": "updateEntry",
        "parameters": [
          {
            "description": "ID of repository (or \"-home-\" for home repository)",
            "in": "path",
            "name": "repository",
            "required": true,
            "schema": {
              "default": "-home-",
              "type": "string"
            }
          },
          {
            "description": "entry id to update",
            "in": "path",
            "name": "entry",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "authority to set/change status",
            "in": "query",
            "name": "authority",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "New status for this authority",
            "in": "query",
            "name": "status",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "OK."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Preconditions are not present."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization failed."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Session user has insufficient rights to perform this operation."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Ressources are not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Fatal error occured."
          }
        },
        "summary": "update status for a stream object and authority",
        "tags": [
          "STREAM v1"
        ]
      }
    },
    "/suggestions/v1/{repository}/{node}": {
      "delete": {
        "operationId": "deleteSuggestions",
        "parameters": [
          {
            "description": "ID of repository (or \"-home-\" for home repository)",
            "in": "path",
            "name": "repository",
            "required": true,
            "schema": {
              "default": "-home-",
              "type": "string"
            }
          },
          {
            "description": "ID of node",
            "in": "path",
            "name": "node",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "delete only specified versions. If not set, it deletes all versions",
            "in": "query",
            "name": "version",
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Delete all suggestions of a given node."
          }
        },
        "summary": "Delete suggestions",
        "tags": [
          "SUGGESTIONS v1"
        ]
      },
      "get": {
        "operationId": "getSuggestionsByNodeId",
        "parameters": [
          {
            "description": "ID of repository (or \"-home-\" for home repository)",
            "in": "path",
            "name": "repository",
            "required": true,
            "schema": {
              "default": "-home-",
              "type": "string"
            }
          },
          {
            "description": "ID of node",
            "in": "path",
            "name": "node",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Filter option",
            "in": "query",
            "name": "status",
            "schema": {
              "items": {
                "enum": [
                  "ACCEPTED",
                  "PENDING",
                  "DECLINED"
                ],
                "type": "string"
              },
              "type": "array"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NodeSuggestionResponseDTO"
                }
              }
            },
            "description": "get all suggestions notifications"
          }
        },
        "summary": "Retrieve stored suggestion for the given nodeId",
        "tags": [
          "SUGGESTIONS v1"
        ]
      },
      "patch": {
        "operationId": "updateStatus",
        "parameters": [
          {
            "description": "ID of repository (or \"-home-\" for home repository)",
            "in": "path",
            "name": "repository",
            "required": true,
            "schema": {
              "default": "-home-",
              "type": "string"
            }
          },
          {
            "description": "ID of node",
            "in": "path",
            "name": "node",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "id",
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "in": "query",
            "name": "status",
            "schema": {
              "enum": [
                "ACCEPTED",
                "PENDING",
                "DECLINED"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/SuggestionResponseDTO"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Updates the status of all suggestions by the given suggestion ids"
          }
        },
        "summary": "Update suggestion status",
        "tags": [
          "SUGGESTIONS v1"
        ]
      },
      "post": {
        "operationId": "createSuggestions",
        "parameters": [
          {
            "description": "ID of repository (or \"-home-\" for home repository)",
            "in": "path",
            "name": "repository",
            "required": true,
            "schema": {
              "default": "-home-",
              "type": "string"
            }
          },
          {
            "description": "ID of node",
            "in": "path",
            "name": "node",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Type of the suggestion",
            "in": "query",
            "name": "type",
            "required": true,
            "schema": {
              "enum": [
                "AI",
                "USER_PROPOSAL"
              ],
              "type": "string"
            }
          },
          {
            "description": "Version of the suggestion",
            "in": "query",
            "name": "version",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "$ref": "#/components/schemas/CreateSuggestionRequestDTO"
                },
                "type": "array"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/SuggestionResponseDTO"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Store suggestions for the given node."
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Duplicate Entity/Node conflict (Node with same name exists)"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Fatal error occured."
          }
        },
        "summary": "Create suggestions",
        "tags": [
          "SUGGESTIONS v1"
        ]
      }
    },
    "/tool/v1/tools/{repository}/tooldefinitions": {
      "get": {
        "description": "Get all ToolDefinitions.",
        "operationId": "getAllToolDefinitions",
        "parameters": [
          {
            "description": "ID of repository (or \"-home-\" for home repository)",
            "in": "path",
            "name": "repository",
            "required": true,
            "schema": {
              "default": "-home-",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NodeEntry"
                }
              }
            },
            "description": "OK."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Preconditions are not present."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization failed."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Session user has insufficient rights to perform this operation."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Ressources are not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Fatal error occured."
          }
        },
        "summary": "Get all ToolDefinitions.",
        "tags": [
          "TOOL v1"
        ]
      },
      "post": {
        "description": "Create a new tool definition object.",
        "operationId": "createToolDefintition",
        "parameters": [
          {
            "description": "ID of repository (or \"-home-\" for home repository)",
            "in": "path",
            "name": "repository",
            "required": true,
            "schema": {
              "default": "-home-",
              "type": "string"
            }
          },
          {
            "description": "rename if the same node name exists",
            "in": "query",
            "name": "renameIfExists",
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "description": "comment, leave empty = no inital version",
            "in": "query",
            "name": "versionComment",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "additionalProperties": {
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                "type": "object"
              }
            }
          },
          "description": "properties, example: {\"{http://www.alfresco.org/model/content/1.0}name\": [\"test\"]}",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NodeEntry"
                }
              }
            },
            "description": "OK."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Preconditions are not present."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization failed."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Session user has insufficient rights to perform this operation."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Ressources are not found."
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Duplicate Entity/Node conflict (Node with same name exists)"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Fatal error occured."
          }
        },
        "summary": "Create a new tool definition object.",
        "tags": [
          "TOOL v1"
        ]
      }
    },
    "/tool/v1/tools/{repository}/{nodeid}/toolinstance": {
      "get": {
        "description": "Get Instances of a ToolDefinition.",
        "operationId": "getInstance",
        "parameters": [
          {
            "description": "ID of repository (or \"-home-\" for home repository)",
            "in": "path",
            "name": "repository",
            "required": true,
            "schema": {
              "default": "-home-",
              "type": "string"
            }
          },
          {
            "description": "ID of node",
            "in": "path",
            "name": "nodeid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NodeEntry"
                }
              }
            },
            "description": "OK."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Preconditions are not present."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization failed."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Session user has insufficient rights to perform this operation."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Ressources are not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Fatal error occured."
          }
        },
        "summary": "Get Instances of a ToolDefinition.",
        "tags": [
          "TOOL v1"
        ]
      }
    },
    "/tool/v1/tools/{repository}/{toolDefinition}/toolinstances": {
      "get": {
        "description": "Get Instances of a ToolDefinition.",
        "operationId": "getInstances",
        "parameters": [
          {
            "description": "ID of repository (or \"-home-\" for home repository)",
            "in": "path",
            "name": "repository",
            "required": true,
            "schema": {
              "default": "-home-",
              "type": "string"
            }
          },
          {
            "description": "ID of node",
            "in": "path",
            "name": "toolDefinition",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NodeEntry"
                }
              }
            },
            "description": "OK."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Preconditions are not present."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization failed."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Session user has insufficient rights to perform this operation."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Ressources are not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Fatal error occured."
          }
        },
        "summary": "Get Instances of a ToolDefinition.",
        "tags": [
          "TOOL v1"
        ]
      },
      "post": {
        "description": "Create a new tool Instance object.",
        "operationId": "createToolInstance",
        "parameters": [
          {
            "description": "ID of repository (or \"-home-\" for home repository)",
            "in": "path",
            "name": "repository",
            "required": true,
            "schema": {
              "default": "-home-",
              "type": "string"
            }
          },
          {
            "description": "ID of parent node must have tool_definition aspect",
            "in": "path",
            "name": "toolDefinition",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "rename if the same node name exists",
            "in": "query",
            "name": "renameIfExists",
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "description": "comment, leave empty = no inital version",
            "in": "query",
            "name": "versionComment",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "additionalProperties": {
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                "type": "object"
              }
            }
          },
          "description": "properties, example: {\"{http://www.alfresco.org/model/content/1.0}name\": [\"test\"]}",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NodeEntry"
                }
              }
            },
            "description": "OK."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Preconditions are not present."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization failed."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Session user has insufficient rights to perform this operation."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Ressources are not found."
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Duplicate Entity/Node conflict (Node with same name exists)"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Fatal error occured."
          }
        },
        "summary": "Create a new tool Instance object.",
        "tags": [
          "TOOL v1"
        ]
      }
    },
    "/tool/v1/tools/{repository}/{toolinstance}/toolobject": {
      "post": {
        "description": "Create a new tool object for a given tool instance.",
        "operationId": "createToolObject",
        "parameters": [
          {
            "description": "ID of repository (or \"-home-\" for home repository)",
            "in": "path",
            "name": "repository",
            "required": true,
            "schema": {
              "default": "-home-",
              "type": "string"
            }
          },
          {
            "description": "ID of parent node (a tool instance object)",
            "in": "path",
            "name": "toolinstance",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "rename if the same node name exists",
            "in": "query",
            "name": "renameIfExists",
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "description": "comment, leave empty = no inital version",
            "in": "query",
            "name": "versionComment",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "additionalProperties": {
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                "type": "object"
              }
            }
          },
          "description": "properties, example: {\"{http://www.alfresco.org/model/content/1.0}name\": [\"test\"]}",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NodeEntry"
                }
              }
            },
            "description": "OK."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Preconditions are not present."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization failed."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Session user has insufficient rights to perform this operation."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Ressources are not found."
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Duplicate Entity/Node conflict (Node with same name exists)"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Fatal error occured."
          }
        },
        "summary": "Create a new tool object for a given tool instance.",
        "tags": [
          "TOOL v1"
        ]
      }
    },
    "/tracking/v1/tracking/{repository}/{event}": {
      "put": {
        "description": "Currently limited to video / audio play interactions",
        "operationId": "trackEvent",
        "parameters": [
          {
            "description": "ID of repository (or \"-home-\" for home repository)",
            "in": "path",
            "name": "repository",
            "required": true,
            "schema": {
              "default": "-home-",
              "type": "string"
            }
          },
          {
            "description": "type of event to track",
            "in": "path",
            "name": "event",
            "required": true,
            "schema": {
              "enum": [
                "DOWNLOAD_MATERIAL",
                "VIEW_MATERIAL",
                "OPEN_EXTERNAL_LINK",
                "VIEW_COLLECTION",
                "VIEW_MATERIAL_EMBEDDED",
                "VIEW_MATERIAL_PLAY_MEDIA",
                "LOGIN_USER_SESSION",
                "LOGIN_USER_OAUTH_PASSWORD",
                "LOGIN_USER_OAUTH_REFRESH_TOKEN",
                "LOGOUT_USER_TIMEOUT",
                "LOGOUT_USER_REGULAR"
              ],
              "type": "string"
            }
          },
          {
            "description": "node id for which the event is tracked. For some event, this can be null",
            "in": "query",
            "name": "node",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "OK."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Preconditions are not present."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization failed."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Session user has insufficient rights to perform this operation."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Ressources are not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Fatal error occured."
          }
        },
        "summary": "Track a user interaction",
        "tags": [
          "TRACKING v1"
        ]
      }
    },
    "/usage/v1/usages/course/{appId}/{courseId}": {
      "get": {
        "description": "Get all usages of an course.",
        "operationId": "getUsagesByCourse",
        "parameters": [
          {
            "description": "ID of application (or \"-home-\" for home repository)",
            "in": "path",
            "name": "appId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "ID of course",
            "in": "path",
            "name": "courseId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Usages"
                }
              }
            },
            "description": "OK."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Preconditions are not present."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization failed."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Session user has insufficient rights to perform this operation."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Ressources are not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Fatal error occured."
          }
        },
        "summary": "Get all usages of an course.",
        "tags": [
          "USAGE v1"
        ]
      }
    },
    "/usage/v1/usages/node/{nodeId}": {
      "get": {
        "description": "Get all usages of an node.",
        "operationId": "getUsagesByNode",
        "parameters": [
          {
            "description": "ID of node",
            "in": "path",
            "name": "nodeId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Usages"
                }
              }
            },
            "description": "OK."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Preconditions are not present."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization failed."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Session user has insufficient rights to perform this operation."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Ressources are not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Fatal error occured."
          }
        },
        "summary": "Get all usages of an node.",
        "tags": [
          "USAGE v1"
        ]
      }
    },
    "/usage/v1/usages/node/{nodeId}/collections": {
      "get": {
        "operationId": "getUsagesByNodeCollections",
        "parameters": [
          {
            "description": "ID of node",
            "in": "path",
            "name": "nodeId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Collection"
                  },
                  "type": "array"
                }
              }
            },
            "description": "OK."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Preconditions are not present."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization failed."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Session user has insufficient rights to perform this operation."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Ressources are not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Fatal error occured."
          }
        },
        "summary": "Get all collections where this node is used.",
        "tags": [
          "USAGE v1"
        ]
      }
    },
    "/usage/v1/usages/node/{nodeId}/{usageId}": {
      "delete": {
        "operationId": "deleteUsage",
        "parameters": [
          {
            "description": "ID of node",
            "in": "path",
            "name": "nodeId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "ID of usage",
            "in": "path",
            "name": "usageId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Usages"
                }
              }
            },
            "description": "OK."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Preconditions are not present."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization failed."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Session user has insufficient rights to perform this operation."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Ressources are not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Fatal error occured."
          }
        },
        "summary": "Delete an usage of a node.",
        "tags": [
          "USAGE v1"
        ]
      }
    },
    "/usage/v1/usages/repository/{repositoryId}": {
      "post": {
        "description": "headers must be set: X-Edu-App-Id, X-Edu-App-Sig, X-Edu-App-Signed, X-Edu-App-Ts",
        "operationId": "setUsage",
        "parameters": [
          {
            "description": "ID of repository (or \"-home-\" for home repository)",
            "in": "path",
            "name": "repositoryId",
            "required": true,
            "schema": {
              "default": "-home-",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateUsage"
              }
            }
          },
          "description": " usage date",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Usage"
                }
              }
            },
            "description": "OK."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Preconditions are not present."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization failed."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Session user has insufficient rights to perform this operation."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Ressources are not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Fatal error occured."
          }
        },
        "summary": "Set a usage for a node. app signature headers and authenticated user required.",
        "tags": [
          "USAGE v1"
        ]
      }
    },
    "/usage/v1/usages/repository/{repositoryId}/{nodeId}": {
      "get": {
        "operationId": "getUsages_1",
        "parameters": [
          {
            "description": "ID of repository",
            "in": "path",
            "name": "repositoryId",
            "required": true,
            "schema": {
              "default": "-home-",
              "type": "string"
            }
          },
          {
            "description": "ID of node. Use -all- for getting usages of all nodes",
            "in": "path",
            "name": "nodeId",
            "required": true,
            "schema": {
              "default": "-all-",
              "type": "string"
            }
          },
          {
            "description": "from date",
            "in": "query",
            "name": "from",
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "to date",
            "in": "query",
            "name": "to",
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "default": {
            "content": {
              "application/json": {}
            },
            "description": "default response"
          }
        },
        "tags": [
          "USAGE v1"
        ]
      }
    },
    "/usage/v1/usages/{appId}": {
      "get": {
        "description": "Get all usages of an application.",
        "operationId": "getUsages",
        "parameters": [
          {
            "description": "ID of application (or \"-home-\" for home repository)",
            "in": "path",
            "name": "appId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Usages"
                }
              }
            },
            "description": "OK."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Preconditions are not present."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization failed."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Session user has insufficient rights to perform this operation."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Ressources are not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Fatal error occured."
          }
        },
        "summary": "Get all usages of an application.",
        "tags": [
          "USAGE v1"
        ]
      }
    }
  },
  "security": [
    {
      "cookieAuth": []
    },
    {
      "basicAuth": []
    }
  ],
  "servers": [
    {
      "url": "/edu-sharing/rest"
    }
  ]
}
