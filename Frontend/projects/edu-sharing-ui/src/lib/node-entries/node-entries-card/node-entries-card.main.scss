@import '../../../../assets/scss/mixins';
@import '../mixins';

$optionBarHeight: 50px;
$cardLineHeight: 1.4;

.grid-card {
    transition: all var(--transitionNormal);
    // to prevent click animation to float across the whole screen
    overflow: hidden;
    background-color: #fff;
    @include materialShadowBottom();
    display: grid;
    height: 100%;
    grid-template-columns: auto;
    @include contrastMode {
        border: 1px solid rgba(black, 0.42);
    }
    &.selected {
        background-color: rgb(var(--palette-primary-50));
    }
    .dropdown-dummy {
        position: fixed;
    }
    .card-options {
        display: grid;
        grid-template-columns: 1fr auto;
        grid-column-gap: 10px;
        .card-rating-area {
            display: flex;
            align-items: center;
            height: 100%;
            padding-left: 10px;
        }
        .card-options-area {
            display: flex;
            .card-options-spacer {
                // margin: 0 5px;
                // border-left: 1px solid #ccc;
            }

            es-option-button,
            button {
                transition: all var(--transitionNormal);
                margin: 0 2px;
                border-radius: 50%;

                &:hover,
                &:focus {
                    background-color: #fff;
                }
            }
        }
    }
    &:not(.grid-card-collection) {
        .card-top-bar {
            background-color: var(--palette-primary-200);
        }
    }
    &.grid-card-virtual {
        outline: 2px dashed var(--nodeVirtualColor);
    }
    .card-top-bar {
        height: $topBarHeight;
        display: flex;
        gap: 15px;

        align-items: center;
        padding: 0 $entriesCardPaddingHorizontal;
        position: relative;
        .card-top-bar-collection-color {
            position: absolute;
            background-color: rgba(255, 255, 255, 0.5);
            left: 0;
            top: 0;
            right: 0;
            bottom: 0;
        }
        .card-top-bar-flag {
            @include card-top-bar-badge;
        }
        .card-top-bar-checkbox {
            mat-checkbox {
                margin-right: -5px;
                position: relative;
                top: -1.3px;
                &.cdk-keyboard-focused ::ng-deep .mat-focus-indicator {
                    @include removeDefaultFocus();
                    &::after {
                        content: '';
                        position: absolute;
                        left: 2px;
                        right: 2px;
                        top: 2px;
                        bottom: 2px;
                        @include setGlobalKeyboardFocus('border');
                        border-color: white;
                    }
                }
            }
        }
        .card-top-bar-empty {
            width: 0;
            flex-grow: 1;
        }
    }
    .card-image-area {
        height: $imageHeight;
        padding: 0;
        display: flex;
        es-preview-image {
            flex-grow: 1;
        }
        .card-collection-image {
            display: flex;
            width: 100%;
            height: 100%;
            align-items: center;
            justify-content: center;
            i {
                display: flex;
                align-items: center;
                justify-content: center;
                user-select: none;
                color: rgba(0, 0, 0, 0.75);
                background-color: rgba(255, 255, 255, 0.5);
                padding: $collectionIconPadding;
                font-size: $collectionIconSize;
                border-radius: 50%;
            }
        }
    }
    .card-meta {
        padding: $entriesCardPaddingVertical $entriesCardPaddingHorizontal 0
            $entriesCardPaddingHorizontal;
        display: grid;
        flex-direction: row;
        .card-meta-row {
            display: flex;
            flex-direction: row;
            align-items: center;
            min-height: $cardLineHeight * 2em;
            gap: 5px;
            &:not(:first-child) {
                > label {
                    cursor: inherit;
                    color: var(--textLight);
                    font-size: 85%;
                }
                > es-list-base {
                    color: #000;
                    flex-grow: 1;
                    margin: 5px 0;
                    // FIXME: This breaks `limitLineCount` via `-webkit-line-clamp`, which requires
                    // `display: -webkit-box`. What is this even for? `text-align: end` seems to
                    // work just fine, even for containers.
                    display: flex;
                    justify-content: flex-end;
                    text-align: end;
                    word-break: break-word;
                    // height: 1em;
                }
            }
            &:first-child {
                font-size: 120%;
                > es-list-base,
                > es-node-url {
                    width: 100%;
                    font-size: 120%;
                    color: var(--textMain);
                    height: $cardLineHeight * 2em;
                    text-align: left;
                    word-break: break-word;
                }
            }
        }
    }
    &.dynamic-single-click:hover {
        @include materialShadowMediumLarge(false, 0.2);
        background-color: rgb(var(--palette-primary-50));
        // transform: scale(1.0075);
    }
    &.dynamic-single-click.grid-card-collection:hover .card-meta {
        background-color: rgba(255, 255, 255, 0.9);
    }
    &.grid-card-collection {
        .card-meta {
            background-color: rgba(255, 255, 255, 0.8);
        }
        .card-options {
            background-color: rgba(255, 255, 255, 0.9);
        }
    }
    .card-options {
        border-top: 1px solid #ddd;
        // margin-top: 2px; white artefact on hover
    }
}
:host ::ng-deep {
    .grid-card {
        .card-meta-row {
            &:first-child {
                es-list-base,
                es-node-url a es-list-base {
                    @include limitLineCount(2, $cardLineHeight);
                    > es-list-text {
                        word-break: break-word;
                        span {
                            // fix for firefox to calculate offsetHeight correctly
                            @include limitLineCount(2, $cardLineHeight);
                        }
                    }
                }
            }
            es-node-url {
                a {
                    color: var(--textMain);
                    &.cdk-keyboard-focused {
                        display: inline-flex;
                        @include setGlobalKeyboardFocus('outline');
                    }
                }
            }
        }
    }
    .card-meta {
        es-list-base {
            img {
                max-width: 100px;
                max-height: 20px;
            }
            es-list-node-license {
                img {
                    height: 20px;
                }
            }
            es-list-collection-info {
                display: flex;
                align-items: center;
                // justify-content: flex-end;
                i {
                    font-size: 12pt;
                    margin: 0 6px;
                }
            }
        }
    }
    .grid-card-collection es-node-url {
        a.cdk-keyboard-focused .card-meta {
            // @TDOO: better focus visibility is required
            background-color: #fff;
        }
    }
}
/**
    custom overlay provided via template
 */
.card-overlay {
    position: absolute;
    z-index: 2;
    left: 0;
    right: 0;
    top: 0;
    bottom: 0;
    // Pass pointer events through to the underlying card when the overlay template is empty...
    pointer-events: none;
    // ...but re-enable pointer-event handling for the overlay's content (if any).
    & ::ng-deep > * {
        pointer-events: auto;
    }
}
