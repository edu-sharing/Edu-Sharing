variables:
  COMMON_BIND_HOST: "0.0.0.0"
  DEPLOY_DOCKER_HELM: "true"
  DEPLOY_TIMESTAMP: "$DEPLOY_TIMESTAMP"
  DOCKER_DRIVER: "$DIND_DRIVER"
  DOCKER_HOST: "$DIND_HOST"
  DOCKER_TLS_CERTDIR: "$DIND_TLS_CERTDIR"
  MAVEN_CLI: "-Ddocker.registry=$DOCKER_REGISTRY -Dhelm.deploy.url=$HELM_REGISTRY -Dhelm.deploy.type=$HELM_TYPE -Dmaven.deploy.releases=$MAVEN_DEPLOY_RELEASES -Dmaven.deploy.snapshots=$MAVEN_DEPLOY_SNAPSHOTS --batch-mode --errors --fail-fast --show-version"
  MAVEN_OPTS: "-Dmaven.repo.local=.m2/repository"
  GIT_SUBMODULE_STRATEGY: recursive

default:
  #image: maven:3.8.4-eclipse-temurin-17
  image: maven:3.9.9-eclipse-temurin-17-focal
  services:
    - name: "$DIND_IMAGE"
      alias: docker
      entrypoint: [ "env", "-u", "DOCKER_HOST" ]
      command: [ "dockerd-entrypoint.sh" ]

stages:
  - test
  - deploy

deploy:
  stage: deploy
  cache:
    - key: $CI_BUILD_REF_NAME
      paths:
        - .m2/repository
    - key:
        files:
          - Frontend/package-lock.json
        prefix: node-modules-$NODE_VERSION
      paths:
        - Frontend/node_modules
  rules:
    - if: $CI_COMMIT_BRANCH =~ /^maven\/release\/.*/ && $CI_PIPELINE_SOURCE == "pipeline"
    - if: $CI_COMMIT_TAG && $CI_PIPELINE_SOURCE == "pipeline"
    - if: $CI_COMMIT_BRANCH =~ /^maven\// && $CI_COMMIT_BRANCH !~ /^maven\/release\/.*/ && $CI_COMMIT_TAG == null
  before_script:
    - apt-get update -y
    - apt-get install -y git
  script:
    - mvn $MAVEN_CLI -s .mvn/settings.xml deploy

.frontend_job: &frontend_job
  variables:
    NODE_VERSION: 22
  stage: test
  image: node:$NODE_VERSION-alpine3.20
  rules:
    - if: $CI_COMMIT_BRANCH =~ /^maven\/release\/.*/ && $CI_PIPELINE_SOURCE == "pipeline"
    - if: $CI_COMMIT_TAG && $CI_PIPELINE_SOURCE == "pipeline"
    - if: $CI_COMMIT_BRANCH !~ /^maven\/release\/.*/ && $CI_COMMIT_TAG == null
  cache:
    key:
      files:
        - Frontend/package-lock.json
      prefix: node-modules-$NODE_VERSION  
    paths:
      - Frontend/node_modules
  before_script:
    - cd Frontend
    - node -v
    - npm -v
    # Install dependencies on cache miss, e.g., when first running on a ci runner.
    - ([[ -d node_modules ]] || npm ci)


check formatting:
  <<: *frontend_job
  allow_failure: false
  script:
    - npm run check:format

check linting:
  <<: *frontend_job
  allow_failure: false
  script:
    - npm run check:lint


unittest frontend:
  <<: *frontend_job
  variables:
    NODE_VERSION: 20
    CHROME_BIN: /usr/bin/chromium-browser
  before_script:
    - apk add chromium
    - mkdir -p Frontend/projects/edu-sharing-api/build/
    - cp Backend/services/rest/api/src/main/resources/openapi.json Frontend/projects/edu-sharing-api/build/openapi.json
    - cd Frontend/projects/edu-sharing-api
    - node -v
    - npm -v
    - npm ci
    - npm run generate-api
    - cd ../..
    # Install dependencies on cache miss, e.g., when first running on a ci runner.
    - ([[ -d node_modules ]] || npm ci)
  script:
    - npm run prebuild
    - npm run test-ci



test docker:
  stage: test
  cache:
    - key: $CI_BUILD_REF_NAME
      paths:
        - .m2/repository
    - key:
        files:
          - Frontend/package-lock.json
        prefix: node-modules-$NODE_VERSION
      paths:
        - Frontend/node_modules
  artifacts:
    paths:
      - deploy/docker/compose/target/compose/openapi.json
      - deploy/docker/build/service/target/build/rest-api/openapi.json
    when: always
    expire_in: 3 day
  before_script:
    - apt-get update -y
    - apt-get install -y ca-certificates curl gnupg jq lsb-release wait-for-it
    - mkdir -p /etc/apt/keyrings
    - curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /etc/apt/keyrings/docker.gpg
    - echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | tee /etc/apt/sources.list.d/docker.list > /dev/null
    - apt-get update -y
    - apt-get install -y docker-ce docker-ce-cli containerd.io docker-compose-plugin docker-compose
    - apt-get install -y php php-curl php-dom php-gd php-mbstring php-xml php-zip
    - docker info
    - docker version
    - docker login $DOCKER_REGISTRY -u $DOCKER_USERNAME -p $DOCKER_PASSWORD
  script:
    - mkdir -p "$MAVEN_HOME"
    - mvn $MAVEN_CLI -s .mvn/settings.xml install
    - pushd deploy/docker/compose/target/compose
    - docker compose -f 1_repository-common.yml -f 1_redis-common.yml up -d
    - "until wait-for-it docker:8100 -t 3; do sleep 1; done"
    - "until [[ $(curl -sSf -w '%{http_code}\n' -o /dev/null -H 'Accept: application/json' http://docker:8100/edu-sharing/rest/_about/status/SERVICE?timeoutSeconds=3) -eq 200 ]]; do sleep 1; done"
    - "curl -m 300 -H 'Accept: application/json' --user 'admin:admin' http://docker:8100/edu-sharing/rest/openapi.json | jq -S . > openapi.json"
    - docker compose -f 1_repository-common.yml -f 1_redis-common.yml down -v
    - cmp -s openapi.json ../../../build/service/target/build/rest-api/openapi.json || exit 1
    - popd
  rules:
    - if: $CI_COMMIT_BRANCH =~ /^maven\/release\/.*/ && $CI_PIPELINE_SOURCE == "pipeline"
    - if: $CI_COMMIT_TAG && $CI_PIPELINE_SOURCE == "pipeline"
    - if: $CI_COMMIT_BRANCH !~ /^maven\/release\/.*/ && $CI_COMMIT_TAG == null && $CI_PIPELINE_SOURCE == "pipeline"


e2e:
  stage: test
  cache:
    - key: $CI_BUILD_REF_NAME
      paths:
        - .m2/repository
    - key:
        files:
          - Frontend/package-lock.json
        prefix: node-modules-$NODE_VERSION
      paths:
        - Frontend/node_modules
  artifacts:
    paths:
      - repository/Frontend/src/generated/ng/playwright-report/
    when: always
  before_script:
    - apt-get update -y
    - apt-get install -y ca-certificates curl gnupg jq lsb-release wait-for-it
    - mkdir -p /etc/apt/keyrings
    - curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /etc/apt/keyrings/docker.gpg
    - echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | tee /etc/apt/sources.list.d/docker.list > /dev/null
    - apt-get update -y
    - apt-get install -y docker-ce docker-ce-cli containerd.io docker-compose-plugin docker-compose
    - apt-get install -y php php-curl php-dom php-gd php-mbstring php-xml php-zip
    - curl -fsSL https://deb.nodesource.com/setup_16.x | bash - && apt-get install -y nodejs
    - docker login $DOCKER_REGISTRY -u $DOCKER_USERNAME -p $DOCKER_PASSWORD
  variables:
    E2E_TEST_BASE_URL: http://docker:8100/edu-sharing/
    REPOSITORY_SERVICE_HOST: docker
    REPOSITORY_SERVICE_PORT: 8100
  script:
    - mkdir -p "$MAVEN_HOME"
    - mvn $MAVEN_CLI -s .mvn/settings.xml install
    - pushd deploy/docker/compose/target/compose
    - docker compose -f 1_repository-common.yml -f 1_redis-common.yml up -d
    - pushd ../../../../../repository/Frontend
    - npx playwright install --with-deps
    - "until wait-for-it docker:8100 -t 3; do sleep 1; done"
    - "until [[ $(curl -sSf -w '%{http_code}\n' -o /dev/null -H 'Accept: application/json' http://docker:8100/edu-sharing/rest/_about/status/SERVICE?timeoutSeconds=3) -eq 200 ]]; do sleep 1; done"
    - npm run e2e-prepare-edu-sharing
    - npm run e2e
    - popd
    - docker compose -f 1_repository-common.yml -f 1_redis-common.yml down -v
    - popd
  only:
    variables:
      - $E2E_TEST == "true"

check-helmreadme:
  stage: test
  image: node:lts-alpine3.20
  before_script:
    - ln -s $CI_PROJECT_DIR/deploy/docker/helm/search-solr/src/main/chart /tmp/search-solr && cp /tmp/search-solr/README.md /tmp/README_search-solr.md
    - ln -s $CI_PROJECT_DIR/deploy/docker/helm/service/src/main/chart /tmp/service && cp /tmp/service/README.md /tmp/README_service.md
    - ln -s $CI_PROJECT_DIR/deploy/docker/helm/transform-aio/src/main/chart /tmp/transform-aio && cp /tmp/transform-aio/README.md /tmp/README_transform-aio.md
    - ln -s $CI_PROJECT_DIR/deploy/docker/helm/transform-es/src/main/chart /tmp/transform-es && cp /tmp/transform-es/README.md /tmp/README_transform-es.md
  script:
    - wget -qO- https://github.com/bitnami/readme-generator-for-helm/archive/refs/tags/2.6.1.tar.gz | tar -xz -C /tmp
    - cd /tmp; npm install ./readme-generator-for-helm-2.6.1; cd readme-generator-for-helm-2.6.1
    - ./bin/index.js -v /tmp/search-solr/values.yaml -r /tmp/README_search-solr.md
    - ./bin/index.js -v /tmp/service/values.yaml -r /tmp/README_service.md
    - ./bin/index.js -v /tmp/transform-aio/values.yaml -r /tmp/README_transform-aio.md
    - ./bin/index.js -v /tmp/transform-es/values.yaml -r /tmp/README_transform-es.md
    - diff /tmp/README_search-solr.md /tmp/search-solr/README.md     || (echo "README was not generated before committing." && exit 1)
    - diff /tmp/README_service.md /tmp/service/README.md             || (echo "README was not generated before committing." && exit 1)
    - diff /tmp/README_transform-aio.md /tmp/transform-aio/README.md || (echo "README was not generated before committing." && exit 1)
    - diff /tmp/README_transform-es.md /tmp/transform-es/README.md   || (echo "README was not generated before committing." && exit 1)
