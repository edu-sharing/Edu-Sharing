
// DO NOT EDIT THIS FILE
// this is the base config file
// make any custom modifications to the file "edu-sharing.conf"

// switch sso methode over spring profiles: basic (csrf protection), openidEnabled, samlEnabled
#spring.profiles.active=basic

// security and management functions
security {
    fileManagement {
        limits: {
            // max allowed size of files that can be uploaded (in bytes)
            fileSize: null
        }
        mimetypeVerification: {
            // verify mimetypes via magic bytes (tika)
            // and block non white-listed mimetypes
            enabled: false
            // enable the support for unknown mimetypes (application/octet-stream). Not recommended
            allowUnknownMimetypes: false
            list: {
                // list of mimetype / allowed extensions (or "*" to allow any extension for this mimetype)
                // "image/jpeg": ["jpg", "jpeg"]
            }
        }
    }

    configuration {
        // When enabled, override files can be created and edited in the edu-sharing admin tools
        // We DO NOT RECOMMEND to enable this for production systems
        inlineEditing: true
    }

    // sso will be enabled
    // 1. by setting spring.profiles.active to openidEnabled or samlEnabled
    // 2. by replacing  <!-- SAML comments in web.xml
    // 3. the spring configuration class has a profile which must be enabled over web.xml
    // 4. homeApplication.properties.xml allowed_authentication_types "shibboleth"
    sso: {
        // 1. configure privateKey/certificate by using one of the following:
        //  - homeApp keys - setting security.sso.saml.useHomeApplicationKeys to true
        //  - base64 strings - security.sso.saml.privateKey.value, security.sso.saml.certificate.value
        //  - files - security.sso.saml.privateKey.location, security.sso.saml.certificate.location
        // 2. idp.metadata.url
        // 3. saml sp metadata: /edu-sharing/saml2/metadata
        // 4. import to keycloak: clients -> import client
        // 5. check client.config.xml logout url must be <logout><url>/edu-sharing/logout</url></logout>
        saml: {
            privateKey: {
                location: "credentials/sp-private.key"
//                 value: """-----BEGIN PRIVATE KEY-----
// MIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQCo2MbxTqtk+YRr
// 9TR0ZXxfAPNbsLcea6DVr99DJR9X3sMxttVCcpAy8fD1KwkgUFak1Vioo9xxTumP
// VrrTi8uXzWV1zrHD9bYsd+41xRnW9Uji04wbHhXCKmR89tk7eCSN6Fdb52F2h5XS
// mV8K3+zVY2vpqOxsZSxF6ubwZkTMWOam+dARUUT5kfoIJegPvoeaxLIszVoGyoFp
// xnqfZlnKF89unVx6MWaoxKlChEOmvXZEEhsPpdAXQCmGqRnc8fY+ZMLmWpEAOaXL
// /4mHwuHZILI/BeP3fIs4yytzsTYQSI0s6lCMSpg2X/XublgpkvLs3zTZQiPtilmU
// VmE6yunTAgMBAAECggEASgy4Q0AjPueHQemKFbokb231TLMVvEurf8vf+IyhUGIr
// 7POoV7nyr8UXzg4PtJJHTYcbmOo0VaUsHWcGDJz0ryCvbJk3sR9jw+DdIcvNZ06v
// pnrsqT/qfvskkwGXh9NLBMlu9qllPxx7gp8s5ZILRhKSUyl4dplwb0F0At53Mb7b
// yTRyJ0ehvhXXthEcBPqD8kHRpQUGRp5GLeOQjCMEMucGyKFHGoyviwRko2Te+I2f
// suvj50PMm1L+w4UkHjh6otcmnWs+xxgWB73HRWWHeAsNg4hfG6x9WPeYRzNoyTOm
// bg71F2SqbPfmMiHaUj5lgbU9b2cEodpGQo0pj7K0cQKBgQDqiTXHnwoy+ZKRpVfZ
// 1nPnv/y6JqgdutYJ+L/sFgethjujSVlLRVtS8I8MI8WsI+Xv0drrQrgPN3UmkUjz
// BK0hrUs0S+IQpXbaM36LuO1WM0Pz1faX+C9GYEPSYd0DK2XBidJ0c5l/UoM6opxM
// LG5PIoydFcqN64AyCMcZKIuSDQKBgQC4TJP1rFofL0LRAZ/GYWu/5P2NnZdWl8PU
// BIHSyIp5Q+ueoxC7CxU5wR3oJzFKazKoVza3WiPj51Tsj+jtnX8ON8QpynZBTxpk
// kCamPk4MEgEa+5P8LIQ3Bvpy21JonVeoAyrtjPtBz7G8plTLhTcY0zkJsaZB5ubB
// +29AZ1vTXwKBgFEdR1ZU8OgUXNa2gp26h7edNMEE4Zv2pFQqjeYO8HTZOgMNOS7J
// O/6BaFfgf1s7xyicQcSf/Jx2p7PBB6PU+DPvhVT+8Z6kO2jX6mpUePEZJeVNGM4S
// bfc/D/XRFukjtzuqePkBihL47J3442mM7FG+NzeU88sFqf6j/of699p5AoGAElLq
// 0x5Tx433Yrh6nkrJX8bwvsfQaDemrMnV7pMp0WzDXH5yB2bOsXNV+eMLr46A9uPU
// +N3pe5tggjS8wANMwqkgw9bxcwTeZuk+LoE7WU/g9EHXMNdsPdxfwlO0GdqrAHVw
// KzY9NQnlbhBLlgCkvb8iiKg1E5BVmSvan9im9JkCgYEAzMM5xjQUluAYwrWEFdug
// 0EejPE1kIUkFfBRnC0I01jACnkgT5dlRW/Vt09iYy+hcJhdnXUl5axQGbuOFSapN
// QhS8mo2MQXw/2Gxq1HZo4iB5brzBlpVyMs2WY3wIa0p9Dciev4KsV9SVemlax7pd
// YQIlSQY659FJPSkf/Ve+dG0=
// -----END PRIVATE KEY-----"""
            }
            certificate: {
                location: "credentials/sp-certificate.crt"
//                 value: """-----BEGIN CERTIFICATE-----
// MIIDOTCCAiGgAwIBAgIUJY/8dcS/nBJPtTnhDwubCRpZ2+AwDQYJKoZIhvcNAQEL
// BQAwRTELMAkGA1UEBhMCREUxDDAKBgNVBAgMA1RIVTELMAkGA1UEBwwCU00xDTAL
// BgNVBAoMBG1ldGExDDAKBgNVBAsMA2RldjAeFw0yNDA0MjMxMDI3MDNaFw0yNTA0
// MjMxMDI3MDNaMEUxCzAJBgNVBAYTAkRFMQwwCgYDVQQIDANUSFUxCzAJBgNVBAcM
// AlNNMQ0wCwYDVQQKDARtZXRhMQwwCgYDVQQLDANkZXYwggEiMA0GCSqGSIb3DQEB
// AQUAA4IBDwAwggEKAoIBAQCo2MbxTqtk+YRr9TR0ZXxfAPNbsLcea6DVr99DJR9X
// 3sMxttVCcpAy8fD1KwkgUFak1Vioo9xxTumPVrrTi8uXzWV1zrHD9bYsd+41xRnW
// 9Uji04wbHhXCKmR89tk7eCSN6Fdb52F2h5XSmV8K3+zVY2vpqOxsZSxF6ubwZkTM
// WOam+dARUUT5kfoIJegPvoeaxLIszVoGyoFpxnqfZlnKF89unVx6MWaoxKlChEOm
// vXZEEhsPpdAXQCmGqRnc8fY+ZMLmWpEAOaXL/4mHwuHZILI/BeP3fIs4yytzsTYQ
// SI0s6lCMSpg2X/XublgpkvLs3zTZQiPtilmUVmE6yunTAgMBAAGjITAfMB0GA1Ud
// DgQWBBTzwHxWHy9uokv/AeBtK64zn9lhFTANBgkqhkiG9w0BAQsFAAOCAQEAJfA7
// OE9PyhGoIh4e63QUOPRTfqOKPS0dzhgO+AwWCYpb3t4vrKIIeR2jJaqZqNboY9Zn
// pr5+dPufc2aTIFgoDMuSryanCseZh8N/N+YjsjuIAlEylP3fB81WFDE+3Nojjg/J
// gWxPoGURuJYwebjFz9vjdWmKCZfsA8flf1qr5B0acdX93EI+Km5RPIPMLWQnlLSM
// apKJuJj4P5vYXeUcnrMgcWc+AQf8gRyclFKmdOPLp0p/zlwd1rL+2CPbEpGanZmS
// menSR/Vquv3Qgmo6dVNdlEl/z5UCmbHlc5RN2xCj3hMXkBiSIhMrvp6WG0iRKBT8
// B1WFJJGvoGLNvq+niA==
// -----END CERTIFICATE-----"""
            }
            useHomeApplicationKeys: false
            idp: {
                metadata: {
                    url: "http://idp/metadata.xml"
                }
            }
        }
        // keycloak config
        // 1. go to realm -> Clients -> Create Client -> Client Type OpenID Connect, set a Client ID
        //    set OIDC type to confidential access type (Client Authentication On).
        // 2. keycloak client config: add edu-sharing url as "Valid redirect URI"
        // 3. find out keycloak issuer: http://keycloakhost/realms/realmname/.well-known/openid-configuration
        // 4. attribute mapping SSOAuthorityMapper: given_name, family_name, email, sub(keycloak id, als remote user verfÃ¼gbar)
        // 4.1 you can also do the mapping in keycloak: Clients -> Client details -> Dedicated scopes
        //      --> Add mapper -> By configuration -> User Property
        //     ("Property" must be i.e. "firstName" or "lastName" @see org.keycloak.models.UserModel,
        //      "Token Claim Name" would key definded in SSOAuthorityMapper)
        // 5. client.config.xml set <logout><url>/edu-sharing/logout</url></logout>
        // 6. for backchannel logout set "Backchannel logout URL" on client config to sth. like this: http://repository.127.0.0.1.nip.io:8100/edu-sharing/logout/connect/back-channel/172.17.0.1
        openIdConnect: {
            issuer: "http://keycloakhost/realms/realmname"
            clientId: "edu-sharing"
            secret: "GfCronHpYHdDhpU7I7ichvKvdBh3nNjW"
        }

        // disable spring-security csrf feature, default is true
        disableCsrf: true
        debug: false
        lti: {
            // allow authentication from lti connected plattforms
            enabled: false
        }
    }
}

// basic repository features
repository: {
    multilang: false // multilang support, this is a legacy variable and only "false" is supported
    // permission mapping from remote lms systems-
    lmsCodes: "moodle,moodle/course:delete,moodle/course:update;fronter,fronter/course:delete,fronter/course:update;opal,opal/course:delete,opal/course:update"
    // deliver repository metadata with url: http://host:8080/edu-sharing/metadata
    exportMetadata: true
    // configs for childobjects (series objects)
    childobjects: {
        // metadata fields that are ignored when inheriting the metadata from the parent element (long property notation)
        ignoredInheritMetadata: [
            "{http://www.alfresco.org/model/content/1.0}name",
            "{http://www.campuscontent.de/model/1.0}educationallearningresourcetype",
            "{http://www.campuscontent.de/model/1.0}commonlicense_key",
            "{http://www.campuscontent.de/model/1.0}license_description",
            "{http://www.campuscontent.de/model/1.0}commonlicense_cc_locale",
            "{http://www.campuscontent.de/model/1.0}commonlicense_cc_version",
            "{http://www.campuscontent.de/model/1.0}wwwurl",
            "AlfrescoMimeType",
            "{http://www.campuscontent.de/model/lom/1.0}format",
            "{http://www.campuscontent.de/model/lom/1.0}size"
        ]
    }
    //database related options
    database:{
        // scripts to run on startup (e.g. for updating tables)
        // will be run in the order of the array
        scripts:{
            // core scripts, please DO NOT override or change them
            core:["tracking.sql",
                    "tracking.u1.sql",
                    "tracking.u2.sql",
                    "tracking.u3.sql",
                    "tracking.u4.sql",
                    "factualterm.sql"
                ],
            custom:[] // any custom scripts (this can be safely overriden)
        }
    }
    // configuration for groups
    groups: {
        // auto create groups on startup
        create: [
            // {
               //  // id of the group (GROUP_ prefix is not necessary)
               //  id: "MY_GROUP"
               //  // display name of the group
               //  displayName: ["My group name"]
            // }
        ]
    }
    // configuration for toolpermissions
    toolpermissions: {
        // managed toolpermissions
        // note: These toolpermissions will always re-configure on startup
        managed: [
//            {
//                // name of the tp (will be created if not exists)
//                id: "TOOLPERMISSION_EXAMPLE"
//                // allowed authorities (make sure they exists, see the groups config)
//                allowed: ["GROUP_EVERYONE"]
//                // explicitly denied authorities (make sure they exists, see the groups config)
//                denied: []
//            }
        ]
    }
    // mailserver config
    mail {
        // mail sender of automated mails
        from: "",
        // if true, add the persons e-mail who initiated the event
        addReplyTo: true,
        // config for register mails (new users registered)
        register {
            //receiver: null
        }
        // config for node report mail feature
        report {
            // List of mail report receivers
            receivers: []
        }
        server {
            smtp {
                host: "",
                port: 25,
                username: "",
                password: "",
                // either "tls" or empty for generic authentication
                authtype: ""
            }
        }
    }
    // statistics endpoints (for providing public information about content counts, user counts, etc.)
    statistics:{
        // shall the iam/person api provide statistics by user?
        // this might impact the system performance
        // if disabled, the profile/about page won't show statistical numbers about an user
        byUser: true
        api:{
            enabled:false
        }
    }
    // config for bulk import api
    bulk: {
        // register one or more interceptors of type BulkServiceInterceptorInterface
        // please refer to the interface definition for usage
        interceptors: []
    }
    // configuration relevant for edu-sharing organizations
    organizations {
        // configuration for admin groups
        admins {
            // whether members can manage their groups/users inside the organizations
            // when enabled, they'll have access to the "User management" view
            canManage: true
        }
    }
    // allow and control how the system communicates with other systems
    communication:{
        resolveUrlInformation:true // allows the repository to fetch metadata from a url ressource (when saving a link)
        // configure playwright (so automatic thumbnails from websites are supported)
        playwright: {
            // url to playwright API, e.g. "https://thumbnail.example.com" (without a trailing / )
            url: null
            // max time to wait for playwright to generate a screenshot
            timeout: 10
            // in case your playwright is secured via api key, enter it here
            api_key: ""
            // you may add more keys, they will be added as url params for playwright
            // see the api docs of the playwright container
            width: 900  // default aspect is 3:2 for best fit on grid entries
            height: 600
        }
        // DEPRECATED: use playwright if possible
        // configure splash (so automatic thumbnails from websites are supported)
        splash: {
            // url to splash, e.g. "https://thumbnail.example.com/render.png"
            url: null
            // time to wait before website is captured
            wait: 0.5
            // max time to wait for splash to generate a screenshot
            timeout: 10
            // you may add more keys, they will be added as url params for splash
        }
        // duplicate finder service
        duplicate {
            // url of the service
            url: null
            // minimum confidence threshold [0...1]
            threshold = 0.5
        }
        preview {
            // regex list of allowed remote image sources to proxy through the repo
            remoteAllowList: [
                "https(.*)pixabay\\.com\\/(.*)",
                "https(.*)ytimg.com\\/(.*)"
            ]
        }
    }
    // config for information dislcosuring of the repository, i.e. which information might be publicly visible
    disclosure: {
        // disclosure of all 3rd-party libraries and their licenses
        // either off (no disclouse at all), "minimal" (only libraries, without versions) or "all"
        // note: the admin role can still access the full information regardless of this settings
        licenses: "minimal"
    }
    // configure tracking related functions
    tracking:{
        // track incremental view + download count in alfresco properties (disable for better access performance)
        alfresco: true
        userMode: "session" // the mode to track users, either "obfuscate", "session", "none" or "full"
    }
    // the default required status for users to login. If not set, any status will be accepted
    personActiveStatus: "active"

    // privacy related configurations
    privacy: {
       // if true, e-mail all e-mail addresses inside vcards will be filtered if the user has no write permissions on the item
       // affects any api output like REST or OAI
       filterVCardEmail: false
       // if true, all e-mail addresses of creators/modifiers will be filtered if the user has no write permissions on the item
       filterMetadataEmail: false
    }
    // config for feedback feature
    feedback: {
        // how the authority should be stored on feedback
        // "full": Full authority, no obfuscation,
        // "obfuscate": Obfuscation/hashing of the authority
        // "session": Session id of the authority (when used, you can allow the toolpermission "TOOLPERMISSION_FEEDBACK" for everyone to allow feedback from guest users)
        // "external": External managed ID by identity provider (requires explicit support of the external idp!)
        userMode: "obfuscate"
        // allow multiple feedback per one user (only supported when userMode "full" or "obfuscate"
        // when disabled, new feedback will automatically override old feedback of the same user
        allowMultiple: false
    }

    httpclient: {
        // proxy to use for http requests (e.g. querying import data)
        proxy: {
            //proxyhost:proxyhost
            //proxyport:3128
            //proxyuser
            //proxypass
            //nonproxyhosts
        }
        //disableSNI4Hosts: ["misconfigured.ssl.host"]
    }
    graphql: {
        servlet: {
            subscriptionTimeout: 0s
            async: {
                enabled: true
                timeout: 30s
                threads: {
                    min: 10
                    max: 200
                }
            }
        }
    }

    request: {
        // mapping of information about the origin of requests, in case the repository is behind a proxy
        // leave this values set to "null" if the repository is not behind any proxy
        proxyHeader: {
            // header to find origin ip, for nginx this is 'x-real-ip'
            ip: null
            // header to find http 'Host:' information, for nginx this is 'x-forwarded-host'
            host: null
        }
    }

    // configuration of the DOI handleservice
    handleservice: {
        // is the handleservice active?
        enabled: false
        prefix: null
        // path of the private key file
        privkey: null
        repoid: null
        email: null
        // path to a writeable directory. defaults to $HOME/.handle/
        configDir: null
    }
    register: {
        // Class to use, for creating Alfresco Users use "RegisterServiceImpl", for LDAP "RegisterServiceLDAPImpl"
        class: "RegisterServiceImpl"
        // Configuration only relevant if LDAP is used
        ldap: {
            // Authentication method
            authentication: "simple"
            // Server, should start with ldap://
            server: null
            // Username/dn to authenticate on the ldap server (this user should have write permissions to bind new authorities)
            username: null
            // Password for the user
            password: null
            // The baseDN (where to create new users)
            baseDN: "ou=people,dc=nodomain"
            // Hashing algorithm for passwords (currently md5 or none supported)
            passwordAlgorithm: "md5"
        }
    }
    // service description, kind of a detail card about your repository
    // please see https://github.com/dini-ag-kim/oer-metadata-schemas/blob/master/service-card-example.json
    serviceDescription: {
      "name":"",
      "inLanguage":"de",
      "description":"",
      "type":"Repository",
      "audience":[
        {
          "name":"teacher"
        }
      ],
      "isAccessibleForFree":false,
      "coverage":"Organization",
      "startDate":"",
      "about":[],
      "provider":{
        "name":"",
        "location":{
          "geo": {
            "addressCountry": "de",
            "longitude": 0,
            "latitude": 0
          }
        },
        "url":"",
        "email":""
      }
    }
    interceptors: {
        properties: {
            get: [
                org.edu_sharing.service.nodeservice.PropertiesGetInterceptorDefault
            ],
            set: []
        }
    }

    webdav: {
        enabled: true
        authentication: {
            // enable in project-services.xml by setting bean WebDavAuthenticationFilter:
            // <bean name="WebDavAuthenticationFilter" class="org.alfresco.repo.webdav.auth.LDAPAuthenticationFilter"/>
            ldap: {
                uri:"ldap://172.17.0.1:389"
                base:"ou=People,dc=example,dc=org"
                sec: {
                    auth: "simple"
                    user: "cn=admin,dc=example,dc=org"
                    pwd: "admin"
                }
                from: "mail"
                to: "uid"
                uid: "uid"
                alfrescoAuthComponent: false
            }
        }
    }
}
// config for copy-based publishing of nodes
publish{
    // the node if of the parent node where published nodes get stored
    node: null
    // the pattern of the node structure (must be using date pattern data)
    nodePattern: "yyyy/MM/dd"
    // the authorityName of the new owner of published nodes
    owner: null
}
// rendering related config
rendering {
    // shall the rendering service pre-render (cache) objects after creation?
    prerender: true
}
// config for frontend/security related headers etc.
angular {
    headers: {
        // enable browser XSS protection (1 is usually the default of browsers)
        X-XSS-Protection: "1"
        // configure allowed ulrs where this edu-sharing ui might be embedded as a frame/embed object
        X-Frame-Options: "sameorigin"
        // be careful when modifying these parameters!
        // also test rendering service and external tools, like the app
        Content-Security-Policy: {
            default-src: "* data: blob: 'self' gap://ready"
            // restrict the connect-src if feasible. Please keep in mind that the rendering and app must also be allowed
            // "data:" is required for local image selection in edit collection view
            connect-src: "* data:"
            img-src: "* data: blob:"
            style-src: "* 'unsafe-inline'"
            script-src: "* 'unsafe-inline' 'unsafe-eval' https://app-registry.edu-sharing.com"
            font-src: "'self' data:"
        }
        // stricter policy, please be aware that some features like custom html content won't work
        // Content-Security-Policy: {
        //     default-src: "data: blob: 'self' gap://ready"
        //         connect-src: "'self' gap://ready data:"
        //         img-src: "'self' data: blob"
        //         // see also: https://angular.io/guide/security#content-security-policy
        //         style-src "* 'nonce-{{ngCspNonce}}'"
        //         script-src: "'self' 'unsafe-inline'"
        //         font-src: "'self' data:"
        //     }
        // }
    }
    // info file for robots (robots.txt)
    // each array entry represents a file line
    robots: [
        "User-Agent: *"
        "Disallow:"
        "Sitemap: {{sitemap}}"
    ]
}
// supported connectors (like tinyMCE, OnlyOffice, ...)
connectorList:{
    connectors:[
        {
            id:"TINYMCE", icon:"edit", showNew: true, onlyDesktop: false, hasViewMode: true,
            filetypes:[
                {mimetype: "text/html",filetype: "html",createable: true,editable: true,editorType: "tinymce"}
            ]
        }
    ]
}

// oai importer config
importer:{
    // threading config
    threads:{
        min:1, // min threads to use (>= 1)
        max:16, // max threads to use
        minSpare:1 // min amount of threads to keep free (so threads=min(threads.max,cpuCount-threads.minSpare))
    }
}

exporter:{
    oai:{
        identify:{
            name: null // repo name, if null, the local app caption will be used
            adminEmail: "adminpleasechange@nodomain.com"
            description: "<oai-identifier><scheme>oai</scheme></oai-identifier>" // a repo description
            delete: "no" // no, persistent or transient
            granularity: "Second" // timestamp granularity, Second or Day
            earliestDate: "1900-01-01T00:00:00Z" // earliest datestamp found in repository
        }
        identiferPrefix: "" // each identifier will be prefixed with this string, possible value e.g. "oai:your.domain:"
        itemsPerPage: 300,
        metadataPrefix: "lom" // name of the metadata prefix delivered by oai
        sets: ["default"] // your provided sets. Each specialized set must be defined as an mds query like "oai_<setname>"
        lom:{
            class:org.edu_sharing.repository.server.exporter.OAILOMExporter
        }
    }
    lrmi:{
        properties:{
            identifier: "sys:node-uuid"
            name: "cclom:title,cm:name"
            description: "cclom:general_description"
            keywords: "cclom:general_keyword+ccm:classification_keyword"
            learningResourceType: "ccm:educationallearningresourcetype"
            educationalAudience: "ccm:educationalintendedenduserrole"
            intendedEndUserRole: "ccm:educationalintendedenduserrole"
            typicalAgeRange: "ccm:educationaltypicalagerange"
            timeRequired: "ccm:educationaltypicallearningtime"
            inLanguage: "cclom:general_language"
            version: "cclom:version"
            fileFormat: "cclom:technical_format"
            encodingFormat: "AlfrescoMimeType"
            ContentSize: "cclom:size"
            requirements: "cclom:otherplatformrequirements"
            creditText: "ccm:author_freetext"
        }
    }
}


// class to use for the stream service (default StreamServiceNone)
stream: {
    class:StreamServiceNone
    relevancy: {
        property: "ccm:taxonid"
        depth: 1
        actionLimit: 10
    }
}

// config for scheduled jobs
// to override and add custom jobs, we recommend using "jobs.entries += {...}"
jobs: {
    // dedicated instance for running jobs inside cluster deployment
    // empty value assumes no cluster and jobs will always start
    primaryHostname: null
    entries: [
        {
            name: "Built up Cache Job"
            class: "org.edu_sharing.repository.server.jobs.quartz.RefreshCacheJob"
            trigger: "Immediate" // fire at startup
        }
    ]
}

include file("tomcat/shared/classes/config/plugins/plugin-cluster/edu-sharing.reference.conf")
include file("tomcat/shared/classes/config/plugins/plugin-elastic/edu-sharing.reference.conf")
include file("tomcat/shared/classes/config/plugins/plugin-mongo/edu-sharing.reference.conf")
include file("tomcat/shared/classes/config/plugins/plugin-kafka/edu-sharing.reference.conf")
include file("tomcat/shared/classes/config/plugins/plugin-remote/edu-sharing.reference.conf")
include file("tomcat/shared/classes/config/plugins/plugin-transform/edu-sharing.reference.conf")

include file("tomcat/shared/classes/config/default/edu-sharing.override.conf")
